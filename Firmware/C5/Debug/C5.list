
C5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a370  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a63c  0800a63c  0000b63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a67c  0800a67c  0000b67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a684  0800a684  0000b684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a688  0800a688  0000b688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800a68c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009d0  24000010  0800a69c  0000c010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240009e0  0800a69c  0000c9e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022258  00000000  00000000  0000c03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004229  00000000  00000000  0002e296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a68  00000000  00000000  000324c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014ac  00000000  00000000  00033f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000370ef  00000000  00000000  000353d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028440  00000000  00000000  0006c4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015bb32  00000000  00000000  00094903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f0435  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007110  00000000  00000000  001f0478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  001f7588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800a624 	.word	0x0800a624

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800a624 	.word	0x0800a624

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <MX_DMA_Init+0x3c>)
 8000604:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000608:	4a0b      	ldr	r2, [pc, #44]	@ (8000638 <MX_DMA_Init+0x3c>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000612:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <MX_DMA_Init+0x3c>)
 8000614:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2100      	movs	r1, #0
 8000624:	200b      	movs	r0, #11
 8000626:	f001 fe96 	bl	8002356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800062a:	200b      	movs	r0, #11
 800062c:	f001 fead 	bl	800238a <HAL_NVIC_EnableIRQ>

}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	58024400 	.word	0x58024400

0800063c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08e      	sub	sp, #56	@ 0x38
 8000640:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	4ba2      	ldr	r3, [pc, #648]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 8000654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000658:	4aa0      	ldr	r2, [pc, #640]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000662:	4b9e      	ldr	r3, [pc, #632]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 8000664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000668:	f003 0310 	and.w	r3, r3, #16
 800066c:	623b      	str	r3, [r7, #32]
 800066e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000670:	4b9a      	ldr	r3, [pc, #616]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 8000672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000676:	4a99      	ldr	r2, [pc, #612]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000680:	4b96      	ldr	r3, [pc, #600]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	61fb      	str	r3, [r7, #28]
 800068c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800068e:	4b93      	ldr	r3, [pc, #588]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 8000690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000694:	4a91      	ldr	r2, [pc, #580]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 8000696:	f043 0320 	orr.w	r3, r3, #32
 800069a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800069e:	4b8f      	ldr	r3, [pc, #572]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a4:	f003 0320 	and.w	r3, r3, #32
 80006a8:	61bb      	str	r3, [r7, #24]
 80006aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ac:	4b8b      	ldr	r3, [pc, #556]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 80006ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006b2:	4a8a      	ldr	r2, [pc, #552]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006bc:	4b87      	ldr	r3, [pc, #540]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b84      	ldr	r3, [pc, #528]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d0:	4a82      	ldr	r2, [pc, #520]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006da:	4b80      	ldr	r3, [pc, #512]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 80006dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e8:	4b7c      	ldr	r3, [pc, #496]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 80006ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ee:	4a7b      	ldr	r2, [pc, #492]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f8:	4b78      	ldr	r3, [pc, #480]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 80006fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000706:	4b75      	ldr	r3, [pc, #468]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 8000708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070c:	4a73      	ldr	r2, [pc, #460]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 800070e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000712:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000716:	4b71      	ldr	r3, [pc, #452]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000724:	4b6d      	ldr	r3, [pc, #436]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 8000726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072a:	4a6c      	ldr	r2, [pc, #432]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 800072c:	f043 0308 	orr.w	r3, r3, #8
 8000730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000734:	4b69      	ldr	r3, [pc, #420]	@ (80008dc <MX_GPIO_Init+0x2a0>)
 8000736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD1331_RES_GPIO_Port, SSD1331_RES_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2108      	movs	r1, #8
 8000746:	4866      	ldr	r0, [pc, #408]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 8000748:	f003 fca0 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD1331_DC_GPIO_Port, SSD1331_DC_Pin, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	2110      	movs	r1, #16
 8000750:	4863      	ldr	r0, [pc, #396]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 8000752:	f003 fc9b 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD1331_CS_GPIO_Port, SSD1331_CS_Pin, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800075c:	4861      	ldr	r0, [pc, #388]	@ (80008e4 <MX_GPIO_Init+0x2a8>)
 800075e:	f003 fc95 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2104      	movs	r1, #4
 8000766:	4860      	ldr	r0, [pc, #384]	@ (80008e8 <MX_GPIO_Init+0x2ac>)
 8000768:	f003 fc90 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin|FRAM_CS_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000772:	485e      	ldr	r0, [pc, #376]	@ (80008ec <MX_GPIO_Init+0x2b0>)
 8000774:	f003 fc8a 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM330_CS_GPIO_Port, ISM330_CS_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2101      	movs	r1, #1
 800077c:	485c      	ldr	r0, [pc, #368]	@ (80008f0 <MX_GPIO_Init+0x2b4>)
 800077e:	f003 fc85 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1331_RES_Pin;
 8000782:	2308      	movs	r3, #8
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SSD1331_RES_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000796:	4619      	mov	r1, r3
 8000798:	4851      	ldr	r0, [pc, #324]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 800079a:	f003 facf 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1331_DC_Pin;
 800079e:	2310      	movs	r3, #16
 80007a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SSD1331_DC_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b2:	4619      	mov	r1, r3
 80007b4:	484a      	ldr	r0, [pc, #296]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 80007b6:	f003 fac1 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1331_CS_Pin;
 80007ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SSD1331_CS_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d0:	4619      	mov	r1, r3
 80007d2:	4844      	ldr	r0, [pc, #272]	@ (80008e4 <MX_GPIO_Init+0x2a8>)
 80007d4:	f003 fab2 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 80007d8:	2304      	movs	r3, #4
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ec:	4619      	mov	r1, r3
 80007ee:	483e      	ldr	r0, [pc, #248]	@ (80008e8 <MX_GPIO_Init+0x2ac>)
 80007f0:	f003 faa4 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STM_ESP_PIN1_Pin|STM_ESP_PIN2_Pin;
 80007f4:	2318      	movs	r3, #24
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000804:	4619      	mov	r1, r3
 8000806:	4838      	ldr	r0, [pc, #224]	@ (80008e8 <MX_GPIO_Init+0x2ac>)
 8000808:	f003 fa98 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LSM303_INT2_Pin|LSM303_INT1_Pin;
 800080c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000812:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800081c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000820:	4619      	mov	r1, r3
 8000822:	482f      	ldr	r0, [pc, #188]	@ (80008e0 <MX_GPIO_Init+0x2a4>)
 8000824:	f003 fa8a 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LSM303_INT_MAG_Pin;
 8000828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000832:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LSM303_INT_MAG_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083c:	4619      	mov	r1, r3
 800083e:	482d      	ldr	r0, [pc, #180]	@ (80008f4 <MX_GPIO_Init+0x2b8>)
 8000840:	f003 fa7c 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000844:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085a:	4619      	mov	r1, r3
 800085c:	4823      	ldr	r0, [pc, #140]	@ (80008ec <MX_GPIO_Init+0x2b0>)
 800085e:	f003 fa6d 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53_INT_Pin|VL53_EN_Pin;
 8000862:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000868:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800086c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000876:	4619      	mov	r1, r3
 8000878:	481a      	ldr	r0, [pc, #104]	@ (80008e4 <MX_GPIO_Init+0x2a8>)
 800087a:	f003 fa5f 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISM330_CS_Pin;
 800087e:	2301      	movs	r3, #1
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ISM330_CS_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000892:	4619      	mov	r1, r3
 8000894:	4816      	ldr	r0, [pc, #88]	@ (80008f0 <MX_GPIO_Init+0x2b4>)
 8000896:	f003 fa51 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = ISM330_INT1_Pin|ISM330_INT2_Pin;
 800089a:	2306      	movs	r3, #6
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ac:	4619      	mov	r1, r3
 80008ae:	4810      	ldr	r0, [pc, #64]	@ (80008f0 <MX_GPIO_Init+0x2b4>)
 80008b0:	f003 fa44 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FRAM_CS_Pin;
 80008b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FRAM_CS_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ca:	4619      	mov	r1, r3
 80008cc:	4807      	ldr	r0, [pc, #28]	@ (80008ec <MX_GPIO_Init+0x2b0>)
 80008ce:	f003 fa35 	bl	8003d3c <HAL_GPIO_Init>

}
 80008d2:	bf00      	nop
 80008d4:	3738      	adds	r7, #56	@ 0x38
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	58024400 	.word	0x58024400
 80008e0:	58021000 	.word	0x58021000
 80008e4:	58020800 	.word	0x58020800
 80008e8:	58020000 	.word	0x58020000
 80008ec:	58021800 	.word	0x58021800
 80008f0:	58020c00 	.word	0x58020c00
 80008f4:	58020400 	.word	0x58020400

080008f8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	@ (800096c <MX_I2C1_Init+0x74>)
 80008fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000970 <MX_I2C1_Init+0x78>)
 8000900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 8000902:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <MX_I2C1_Init+0x74>)
 8000904:	4a1b      	ldr	r2, [pc, #108]	@ (8000974 <MX_I2C1_Init+0x7c>)
 8000906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000908:	4b18      	ldr	r3, [pc, #96]	@ (800096c <MX_I2C1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090e:	4b17      	ldr	r3, [pc, #92]	@ (800096c <MX_I2C1_Init+0x74>)
 8000910:	2201      	movs	r2, #1
 8000912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000914:	4b15      	ldr	r3, [pc, #84]	@ (800096c <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800091a:	4b14      	ldr	r3, [pc, #80]	@ (800096c <MX_I2C1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_I2C1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000932:	480e      	ldr	r0, [pc, #56]	@ (800096c <MX_I2C1_Init+0x74>)
 8000934:	f003 fc20 	bl	8004178 <HAL_I2C_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800093e:	f000 fa61 	bl	8000e04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000942:	2100      	movs	r1, #0
 8000944:	4809      	ldr	r0, [pc, #36]	@ (800096c <MX_I2C1_Init+0x74>)
 8000946:	f003 fcb3 	bl	80042b0 <HAL_I2CEx_ConfigAnalogFilter>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000950:	f000 fa58 	bl	8000e04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000954:	2100      	movs	r1, #0
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_I2C1_Init+0x74>)
 8000958:	f003 fcf5 	bl	8004346 <HAL_I2CEx_ConfigDigitalFilter>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000962:	f000 fa4f 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2400002c 	.word	0x2400002c
 8000970:	40005400 	.word	0x40005400
 8000974:	60404e72 	.word	0x60404e72

08000978 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800097c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <MX_I2C2_Init+0x74>)
 800097e:	4a1c      	ldr	r2, [pc, #112]	@ (80009f0 <MX_I2C2_Init+0x78>)
 8000980:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8000982:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <MX_I2C2_Init+0x74>)
 8000984:	4a1b      	ldr	r2, [pc, #108]	@ (80009f4 <MX_I2C2_Init+0x7c>)
 8000986:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000988:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <MX_I2C2_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098e:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <MX_I2C2_Init+0x74>)
 8000990:	2201      	movs	r2, #1
 8000992:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000994:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <MX_I2C2_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800099a:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_I2C2_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <MX_I2C2_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_I2C2_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_I2C2_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009b2:	480e      	ldr	r0, [pc, #56]	@ (80009ec <MX_I2C2_Init+0x74>)
 80009b4:	f003 fbe0 	bl	8004178 <HAL_I2C_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009be:	f000 fa21 	bl	8000e04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009c2:	2100      	movs	r1, #0
 80009c4:	4809      	ldr	r0, [pc, #36]	@ (80009ec <MX_I2C2_Init+0x74>)
 80009c6:	f003 fc73 	bl	80042b0 <HAL_I2CEx_ConfigAnalogFilter>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009d0:	f000 fa18 	bl	8000e04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_I2C2_Init+0x74>)
 80009d8:	f003 fcb5 	bl	8004346 <HAL_I2CEx_ConfigDigitalFilter>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 fa0f 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	24000080 	.word	0x24000080
 80009f0:	40005800 	.word	0x40005800
 80009f4:	60404e72 	.word	0x60404e72

080009f8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a6c <MX_I2C3_Init+0x74>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000a70 <MX_I2C3_Init+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x60404E72;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_I2C3_Init+0x74>)
 8000a04:	4a1b      	ldr	r2, [pc, #108]	@ (8000a74 <MX_I2C3_Init+0x7c>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <MX_I2C3_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <MX_I2C3_Init+0x74>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <MX_I2C3_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_I2C3_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <MX_I2C3_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_I2C3_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_I2C3_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a32:	480e      	ldr	r0, [pc, #56]	@ (8000a6c <MX_I2C3_Init+0x74>)
 8000a34:	f003 fba0 	bl	8004178 <HAL_I2C_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a3e:	f000 f9e1 	bl	8000e04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4809      	ldr	r0, [pc, #36]	@ (8000a6c <MX_I2C3_Init+0x74>)
 8000a46:	f003 fc33 	bl	80042b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a50:	f000 f9d8 	bl	8000e04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a54:	2100      	movs	r1, #0
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_I2C3_Init+0x74>)
 8000a58:	f003 fc75 	bl	8004346 <HAL_I2CEx_ConfigDigitalFilter>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a62:	f000 f9cf 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	240000d4 	.word	0x240000d4
 8000a70:	40005c00 	.word	0x40005c00
 8000a74:	60404e72 	.word	0x60404e72

08000a78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b0be      	sub	sp, #248	@ 0xf8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a94:	22b8      	movs	r2, #184	@ 0xb8
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f009 fd97 	bl	800a5cc <memset>
  if(i2cHandle->Instance==I2C1)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a86      	ldr	r2, [pc, #536]	@ (8000cbc <HAL_I2C_MspInit+0x244>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d146      	bne.n	8000b36 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000aa8:	f04f 0208 	mov.w	r2, #8
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f005 fb04 	bl	80060cc <HAL_RCCEx_PeriphCLKConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000aca:	f000 f99b 	bl	8000e04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b7c      	ldr	r3, [pc, #496]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad4:	4a7a      	ldr	r2, [pc, #488]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000ad6:	f043 0302 	orr.w	r3, r3, #2
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ade:	4b78      	ldr	r3, [pc, #480]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aec:	23c0      	movs	r3, #192	@ 0xc0
 8000aee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af2:	2312      	movs	r3, #18
 8000af4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b04:	2304      	movs	r3, #4
 8000b06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	486c      	ldr	r0, [pc, #432]	@ (8000cc4 <HAL_I2C_MspInit+0x24c>)
 8000b12:	f003 f913 	bl	8003d3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b16:	4b6a      	ldr	r3, [pc, #424]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b1c:	4a68      	ldr	r2, [pc, #416]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000b1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b22:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b26:	4b66      	ldr	r3, [pc, #408]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b30:	623b      	str	r3, [r7, #32]
 8000b32:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b34:	e0bd      	b.n	8000cb2 <HAL_I2C_MspInit+0x23a>
  else if(i2cHandle->Instance==I2C2)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a63      	ldr	r2, [pc, #396]	@ (8000cc8 <HAL_I2C_MspInit+0x250>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d147      	bne.n	8000bd0 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000b40:	f04f 0208 	mov.w	r2, #8
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b56:	4618      	mov	r0, r3
 8000b58:	f005 fab8 	bl	80060cc <HAL_RCCEx_PeriphCLKConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000b62:	f000 f94f 	bl	8000e04 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	4b56      	ldr	r3, [pc, #344]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	4a54      	ldr	r2, [pc, #336]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000b6e:	f043 0302 	orr.w	r3, r3, #2
 8000b72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b76:	4b52      	ldr	r3, [pc, #328]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	61fb      	str	r3, [r7, #28]
 8000b82:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b84:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8c:	2312      	movs	r3, #18
 8000b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4846      	ldr	r0, [pc, #280]	@ (8000cc4 <HAL_I2C_MspInit+0x24c>)
 8000bac:	f003 f8c6 	bl	8003d3c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000bb0:	4b43      	ldr	r3, [pc, #268]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000bb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bb6:	4a42      	ldr	r2, [pc, #264]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000bb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bbc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bc0:	4b3f      	ldr	r3, [pc, #252]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
}
 8000bce:	e070      	b.n	8000cb2 <HAL_I2C_MspInit+0x23a>
  else if(i2cHandle->Instance==I2C3)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a3d      	ldr	r2, [pc, #244]	@ (8000ccc <HAL_I2C_MspInit+0x254>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d16b      	bne.n	8000cb2 <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000bda:	f04f 0208 	mov.w	r2, #8
 8000bde:	f04f 0300 	mov.w	r3, #0
 8000be2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f005 fa6b 	bl	80060cc <HAL_RCCEx_PeriphCLKConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8000bfc:	f000 f902 	bl	8000e04 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c00:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c06:	4a2e      	ldr	r2, [pc, #184]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c10:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b28      	ldr	r3, [pc, #160]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c24:	4a26      	ldr	r2, [pc, #152]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c2e:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c44:	2312      	movs	r3, #18
 8000c46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c56:	2304      	movs	r3, #4
 8000c58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c60:	4619      	mov	r1, r3
 8000c62:	481b      	ldr	r0, [pc, #108]	@ (8000cd0 <HAL_I2C_MspInit+0x258>)
 8000c64:	f003 f86a 	bl	8003d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c70:	2312      	movs	r3, #18
 8000c72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c82:	2304      	movs	r3, #4
 8000c84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4811      	ldr	r0, [pc, #68]	@ (8000cd4 <HAL_I2C_MspInit+0x25c>)
 8000c90:	f003 f854 	bl	8003d3c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c9a:	4a09      	ldr	r2, [pc, #36]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000c9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ca0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <HAL_I2C_MspInit+0x248>)
 8000ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000caa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
}
 8000cb2:	bf00      	nop
 8000cb4:	37f8      	adds	r7, #248	@ 0xf8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40005400 	.word	0x40005400
 8000cc0:	58024400 	.word	0x58024400
 8000cc4:	58020400 	.word	0x58020400
 8000cc8:	40005800 	.word	0x40005800
 8000ccc:	40005c00 	.word	0x40005c00
 8000cd0:	58020800 	.word	0x58020800
 8000cd4:	58020000 	.word	0x58020000

08000cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cdc:	f001 f986 	bl	8001fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce0:	f000 f820 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce4:	f7ff fcaa 	bl	800063c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ce8:	f7ff fc88 	bl	80005fc <MX_DMA_Init>
  MX_OCTOSPI1_Init();
 8000cec:	f000 f890 	bl	8000e10 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8000cf0:	f000 f8ec 	bl	8000ecc <MX_OCTOSPI2_Init>
  MX_SPI1_Init();
 8000cf4:	f000 fad4 	bl	80012a0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000cf8:	f000 fb28 	bl	800134c <MX_SPI3_Init>
  MX_SPI4_Init();
 8000cfc:	f000 fb7c 	bl	80013f8 <MX_SPI4_Init>
  MX_UART4_Init();
 8000d00:	f000 fef8 	bl	8001af4 <MX_UART4_Init>
  MX_USB_OTG_HS_HCD_Init();
 8000d04:	f001 f8e2 	bl	8001ecc <MX_USB_OTG_HS_HCD_Init>
  MX_UART7_Init();
 8000d08:	f000 ff40 	bl	8001b8c <MX_UART7_Init>
  MX_USART1_UART_Init();
 8000d0c:	f000 ff8a 	bl	8001c24 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000d10:	f7ff fdf2 	bl	80008f8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d14:	f7ff fe30 	bl	8000978 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000d18:	f000 fde6 	bl	80018e8 <MX_TIM3_Init>
  MX_I2C3_Init();
 8000d1c:	f7ff fe6c 	bl	80009f8 <MX_I2C3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <main+0x48>

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b09c      	sub	sp, #112	@ 0x70
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2e:	224c      	movs	r2, #76	@ 0x4c
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f009 fc4a 	bl	800a5cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2220      	movs	r2, #32
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f009 fc44 	bl	800a5cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d44:	2004      	movs	r0, #4
 8000d46:	f004 f9f1 	bl	800512c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e00 <SystemClock_Config+0xdc>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a2b      	ldr	r2, [pc, #172]	@ (8000e00 <SystemClock_Config+0xdc>)
 8000d54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b29      	ldr	r3, [pc, #164]	@ (8000e00 <SystemClock_Config+0xdc>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d66:	bf00      	nop
 8000d68:	4b25      	ldr	r3, [pc, #148]	@ (8000e00 <SystemClock_Config+0xdc>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d74:	d1f8      	bne.n	8000d68 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000d76:	2321      	movs	r3, #33	@ 0x21
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d80:	2301      	movs	r3, #1
 8000d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d84:	2302      	movs	r3, #2
 8000d86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000d90:	232c      	movs	r3, #44	@ 0x2c
 8000d92:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000d94:	2301      	movs	r3, #1
 8000d96:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000d98:	2305      	movs	r3, #5
 8000d9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000da0:	230c      	movs	r3, #12
 8000da2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db0:	4618      	mov	r0, r3
 8000db2:	f004 fa25 	bl	8005200 <HAL_RCC_OscConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000dbc:	f000 f822 	bl	8000e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc0:	233f      	movs	r3, #63	@ 0x3f
 8000dc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dd0:	2340      	movs	r3, #64	@ 0x40
 8000dd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dd4:	2340      	movs	r3, #64	@ 0x40
 8000dd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ddc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dde:	2340      	movs	r3, #64	@ 0x40
 8000de0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2103      	movs	r1, #3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f004 fde4 	bl	80059b4 <HAL_RCC_ClockConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000df2:	f000 f807 	bl	8000e04 <Error_Handler>
  }
}
 8000df6:	bf00      	nop
 8000df8:	3770      	adds	r7, #112	@ 0x70
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	58024800 	.word	0x58024800

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <Error_Handler+0x8>

08000e10 <MX_OCTOSPI1_Init>:
OSPI_HandleTypeDef hospi1;
OSPI_HandleTypeDef hospi2;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000e16:	463b      	mov	r3, r7
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
 8000e24:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8000e26:	4b27      	ldr	r3, [pc, #156]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e28:	4a27      	ldr	r2, [pc, #156]	@ (8000ec8 <MX_OCTOSPI1_Init+0xb8>)
 8000e2a:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000e2c:	4b25      	ldr	r3, [pc, #148]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000e32:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000e38:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e40:	2220      	movs	r2, #32
 8000e42:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000e62:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000e68:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000e6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000e74:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e76:	2208      	movs	r2, #8
 8000e78:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8000e7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8000e80:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000e86:	480f      	ldr	r0, [pc, #60]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000e88:	f003 faaa 	bl	80043e0 <HAL_OSPI_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_OCTOSPI1_Init+0x86>
  {
    Error_Handler();
 8000e92:	f7ff ffb7 	bl	8000e04 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000e9e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000ea2:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <MX_OCTOSPI1_Init+0xb4>)
 8000eae:	f003 fb63 	bl	8004578 <HAL_OSPIM_Config>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_OCTOSPI1_Init+0xac>
  {
    Error_Handler();
 8000eb8:	f7ff ffa4 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	24000128 	.word	0x24000128
 8000ec8:	52005000 	.word	0x52005000

08000ecc <MX_OCTOSPI2_Init>:
/* OCTOSPI2 init function */
void MX_OCTOSPI2_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
 8000ee0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  hospi2.Instance = OCTOSPI2;
 8000ee2:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000ee4:	4a27      	ldr	r2, [pc, #156]	@ (8000f84 <MX_OCTOSPI2_Init+0xb8>)
 8000ee6:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8000ee8:	4b25      	ldr	r3, [pc, #148]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000eee:	4b24      	ldr	r3, [pc, #144]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000ef4:	4b22      	ldr	r3, [pc, #136]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8000efa:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000efc:	2220      	movs	r2, #32
 8000efe:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8000f00:	4b1f      	ldr	r3, [pc, #124]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000f06:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000f12:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 8000f18:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000f1e:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000f24:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000f30:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000f32:	2208      	movs	r2, #8
 8000f34:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 8000f36:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000f42:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000f44:	f003 fa4c 	bl	80043e0 <HAL_OSPI_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_OCTOSPI2_Init+0x86>
  {
    Error_Handler();
 8000f4e:	f7ff ff59 	bl	8000e04 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8000f52:	2302      	movs	r3, #2
 8000f54:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <MX_OCTOSPI2_Init+0xbc>)
 8000f5c:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <MX_OCTOSPI2_Init+0xb4>)
 8000f68:	f003 fb06 	bl	8004578 <HAL_OSPIM_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_OCTOSPI2_Init+0xaa>
  {
    Error_Handler();
 8000f72:	f7ff ff47 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	24000184 	.word	0x24000184
 8000f84:	5200a000 	.word	0x5200a000
 8000f88:	00010002 	.word	0x00010002

08000f8c <HAL_OSPI_MspInit>:

static uint32_t HAL_RCC_OCTOSPIM_CLK_ENABLED=0;

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b0c0      	sub	sp, #256	@ 0x100
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fa8:	22b8      	movs	r2, #184	@ 0xb8
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f009 fb0d 	bl	800a5cc <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4ab1      	ldr	r2, [pc, #708]	@ (800127c <HAL_OSPI_MspInit+0x2f0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	f040 80d1 	bne.w	8001160 <HAL_OSPI_MspInit+0x1d4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000fbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f005 f87a 	bl	80060cc <HAL_RCCEx_PeriphCLKConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8000fde:	f7ff ff11 	bl	8000e04 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000fe2:	4ba7      	ldr	r3, [pc, #668]	@ (8001280 <HAL_OSPI_MspInit+0x2f4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	4aa5      	ldr	r2, [pc, #660]	@ (8001280 <HAL_OSPI_MspInit+0x2f4>)
 8000fea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000fec:	4ba4      	ldr	r3, [pc, #656]	@ (8001280 <HAL_OSPI_MspInit+0x2f4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d10e      	bne.n	8001012 <HAL_OSPI_MspInit+0x86>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000ff4:	4ba3      	ldr	r3, [pc, #652]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 8000ff6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ffa:	4aa2      	ldr	r2, [pc, #648]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 8000ffc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001000:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001004:	4b9f      	ldr	r3, [pc, #636]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 8001006:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800100a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800100e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001012:	4b9c      	ldr	r3, [pc, #624]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 8001014:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001018:	4a9a      	ldr	r2, [pc, #616]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 800101a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800101e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001022:	4b98      	ldr	r3, [pc, #608]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 8001024:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001028:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800102c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800102e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b94      	ldr	r3, [pc, #592]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001036:	4a93      	ldr	r2, [pc, #588]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001040:	4b90      	ldr	r3, [pc, #576]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	627b      	str	r3, [r7, #36]	@ 0x24
 800104c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b8d      	ldr	r3, [pc, #564]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	4a8b      	ldr	r2, [pc, #556]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105e:	4b89      	ldr	r3, [pc, #548]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	623b      	str	r3, [r7, #32]
 800106a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800106c:	4b85      	ldr	r3, [pc, #532]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001072:	4a84      	ldr	r2, [pc, #528]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 8001074:	f043 0310 	orr.w	r3, r3, #16
 8001078:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107c:	4b81      	ldr	r3, [pc, #516]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
    PB0     ------> OCTOSPIM_P1_IO1
    PB1     ------> OCTOSPIM_P1_IO0
    PB2     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800108a:	2340      	movs	r3, #64	@ 0x40
 800108c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPIM_P1;
 80010a2:	2306      	movs	r3, #6
 80010a4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80010ac:	4619      	mov	r1, r3
 80010ae:	4876      	ldr	r0, [pc, #472]	@ (8001288 <HAL_OSPI_MspInit+0x2fc>)
 80010b0:	f002 fe44 	bl	8003d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010b4:	2380      	movs	r3, #128	@ 0x80
 80010b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80010cc:	230a      	movs	r3, #10
 80010ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80010d6:	4619      	mov	r1, r3
 80010d8:	486b      	ldr	r0, [pc, #428]	@ (8001288 <HAL_OSPI_MspInit+0x2fc>)
 80010da:	f002 fe2f 	bl	8003d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010de:	2303      	movs	r3, #3
 80010e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 80010f6:	2304      	movs	r3, #4
 80010f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001100:	4619      	mov	r1, r3
 8001102:	4862      	ldr	r0, [pc, #392]	@ (800128c <HAL_OSPI_MspInit+0x300>)
 8001104:	f002 fe1a 	bl	8003d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001108:	2304      	movs	r3, #4
 800110a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001120:	2309      	movs	r3, #9
 8001122:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800112a:	4619      	mov	r1, r3
 800112c:	4857      	ldr	r0, [pc, #348]	@ (800128c <HAL_OSPI_MspInit+0x300>)
 800112e:	f002 fe05 	bl	8003d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001132:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001136:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 800114c:	230b      	movs	r3, #11
 800114e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001152:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001156:	4619      	mov	r1, r3
 8001158:	484d      	ldr	r0, [pc, #308]	@ (8001290 <HAL_OSPI_MspInit+0x304>)
 800115a:	f002 fdef 	bl	8003d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }
}
 800115e:	e087      	b.n	8001270 <HAL_OSPI_MspInit+0x2e4>
  else if(ospiHandle->Instance==OCTOSPI2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a4b      	ldr	r2, [pc, #300]	@ (8001294 <HAL_OSPI_MspInit+0x308>)
 8001166:	4293      	cmp	r3, r2
 8001168:	f040 8082 	bne.w	8001270 <HAL_OSPI_MspInit+0x2e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800116c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8001178:	2300      	movs	r3, #0
 800117a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001180:	4618      	mov	r0, r3
 8001182:	f004 ffa3 	bl	80060cc <HAL_RCCEx_PeriphCLKConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_OSPI_MspInit+0x204>
      Error_Handler();
 800118c:	f7ff fe3a 	bl	8000e04 <Error_Handler>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001190:	4b3b      	ldr	r3, [pc, #236]	@ (8001280 <HAL_OSPI_MspInit+0x2f4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	4a3a      	ldr	r2, [pc, #232]	@ (8001280 <HAL_OSPI_MspInit+0x2f4>)
 8001198:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800119a:	4b39      	ldr	r3, [pc, #228]	@ (8001280 <HAL_OSPI_MspInit+0x2f4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d10e      	bne.n	80011c0 <HAL_OSPI_MspInit+0x234>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80011a2:	4b38      	ldr	r3, [pc, #224]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 80011a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011a8:	4a36      	ldr	r2, [pc, #216]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 80011aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011ae:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80011b2:	4b34      	ldr	r3, [pc, #208]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 80011b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011bc:	61bb      	str	r3, [r7, #24]
 80011be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80011c0:	4b30      	ldr	r3, [pc, #192]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 80011c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 80011c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80011d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 80011d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011de:	4b29      	ldr	r3, [pc, #164]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e4:	4a27      	ldr	r2, [pc, #156]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 80011e6:	f043 0320 	orr.w	r3, r3, #32
 80011ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ee:	4b25      	ldr	r3, [pc, #148]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f4:	f003 0320 	and.w	r3, r3, #32
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011fc:	4b21      	ldr	r3, [pc, #132]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 80011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001202:	4a20      	ldr	r2, [pc, #128]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 8001204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001208:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <HAL_OSPI_MspInit+0x2f8>)
 800120e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800121a:	231f      	movs	r3, #31
 800121c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001232:	2309      	movs	r3, #9
 8001234:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001238:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800123c:	4619      	mov	r1, r3
 800123e:	4816      	ldr	r0, [pc, #88]	@ (8001298 <HAL_OSPI_MspInit+0x30c>)
 8001240:	f002 fd7c 	bl	8003d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001248:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 800125e:	2303      	movs	r3, #3
 8001260:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001264:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001268:	4619      	mov	r1, r3
 800126a:	480c      	ldr	r0, [pc, #48]	@ (800129c <HAL_OSPI_MspInit+0x310>)
 800126c:	f002 fd66 	bl	8003d3c <HAL_GPIO_Init>
}
 8001270:	bf00      	nop
 8001272:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	52005000 	.word	0x52005000
 8001280:	240001e0 	.word	0x240001e0
 8001284:	58024400 	.word	0x58024400
 8001288:	58020000 	.word	0x58020000
 800128c:	58020400 	.word	0x58020400
 8001290:	58021000 	.word	0x58021000
 8001294:	5200a000 	.word	0x5200a000
 8001298:	58021400 	.word	0x58021400
 800129c:	58021800 	.word	0x58021800

080012a0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012a4:	4b27      	ldr	r3, [pc, #156]	@ (8001344 <MX_SPI1_Init+0xa4>)
 80012a6:	4a28      	ldr	r2, [pc, #160]	@ (8001348 <MX_SPI1_Init+0xa8>)
 80012a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012aa:	4b26      	ldr	r3, [pc, #152]	@ (8001344 <MX_SPI1_Init+0xa4>)
 80012ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012b2:	4b24      	ldr	r3, [pc, #144]	@ (8001344 <MX_SPI1_Init+0xa4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80012b8:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <MX_SPI1_Init+0xa4>)
 80012ba:	2203      	movs	r2, #3
 80012bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012be:	4b21      	ldr	r3, [pc, #132]	@ (8001344 <MX_SPI1_Init+0xa4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <MX_SPI1_Init+0xa4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <MX_SPI1_Init+0xa4>)
 80012cc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80012d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <MX_SPI1_Init+0xa4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <MX_SPI1_Init+0xa4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012de:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <MX_SPI1_Init+0xa4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <MX_SPI1_Init+0xa4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80012ea:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <MX_SPI1_Init+0xa4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012f0:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <MX_SPI1_Init+0xa4>)
 80012f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <MX_SPI1_Init+0xa4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_SPI1_Init+0xa4>)
 8001300:	2200      	movs	r2, #0
 8001302:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <MX_SPI1_Init+0xa4>)
 8001306:	2200      	movs	r2, #0
 8001308:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_SPI1_Init+0xa4>)
 800130c:	2200      	movs	r2, #0
 800130e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <MX_SPI1_Init+0xa4>)
 8001312:	2200      	movs	r2, #0
 8001314:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <MX_SPI1_Init+0xa4>)
 8001318:	2200      	movs	r2, #0
 800131a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_SPI1_Init+0xa4>)
 800131e:	2200      	movs	r2, #0
 8001320:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <MX_SPI1_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_SPI1_Init+0xa4>)
 800132a:	2200      	movs	r2, #0
 800132c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <MX_SPI1_Init+0xa4>)
 8001330:	f006 fc8e 	bl	8007c50 <HAL_SPI_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800133a:	f7ff fd63 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	240001e4 	.word	0x240001e4
 8001348:	40013000 	.word	0x40013000

0800134c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001350:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 8001352:	4a28      	ldr	r2, [pc, #160]	@ (80013f4 <MX_SPI3_Init+0xa8>)
 8001354:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001356:	4b26      	ldr	r3, [pc, #152]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 8001358:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800135c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800135e:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001364:	4b22      	ldr	r3, [pc, #136]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 8001366:	2203      	movs	r2, #3
 8001368:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800136a:	4b21      	ldr	r3, [pc, #132]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001370:	4b1f      	ldr	r3, [pc, #124]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 8001372:	2200      	movs	r2, #0
 8001374:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001376:	4b1e      	ldr	r3, [pc, #120]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 8001378:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800137c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800137e:	4b1c      	ldr	r3, [pc, #112]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 8001380:	2200      	movs	r2, #0
 8001382:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001384:	4b1a      	ldr	r3, [pc, #104]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 8001386:	2200      	movs	r2, #0
 8001388:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800138a:	4b19      	ldr	r3, [pc, #100]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 800138c:	2200      	movs	r2, #0
 800138e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001390:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 8001392:	2200      	movs	r2, #0
 8001394:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001396:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 8001398:	2200      	movs	r2, #0
 800139a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800139c:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 800139e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013c8:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <MX_SPI3_Init+0xa4>)
 80013dc:	f006 fc38 	bl	8007c50 <HAL_SPI_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80013e6:	f7ff fd0d 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2400026c 	.word	0x2400026c
 80013f4:	40003c00 	.word	0x40003c00

080013f8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80013fc:	4b27      	ldr	r3, [pc, #156]	@ (800149c <MX_SPI4_Init+0xa4>)
 80013fe:	4a28      	ldr	r2, [pc, #160]	@ (80014a0 <MX_SPI4_Init+0xa8>)
 8001400:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001402:	4b26      	ldr	r3, [pc, #152]	@ (800149c <MX_SPI4_Init+0xa4>)
 8001404:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001408:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800140a:	4b24      	ldr	r3, [pc, #144]	@ (800149c <MX_SPI4_Init+0xa4>)
 800140c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001410:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001412:	4b22      	ldr	r3, [pc, #136]	@ (800149c <MX_SPI4_Init+0xa4>)
 8001414:	2203      	movs	r2, #3
 8001416:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <MX_SPI4_Init+0xa4>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800141e:	4b1f      	ldr	r3, [pc, #124]	@ (800149c <MX_SPI4_Init+0xa4>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001424:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <MX_SPI4_Init+0xa4>)
 8001426:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800142a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <MX_SPI4_Init+0xa4>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001432:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <MX_SPI4_Init+0xa4>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001438:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_SPI4_Init+0xa4>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143e:	4b17      	ldr	r3, [pc, #92]	@ (800149c <MX_SPI4_Init+0xa4>)
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <MX_SPI4_Init+0xa4>)
 8001446:	2200      	movs	r2, #0
 8001448:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800144a:	4b14      	ldr	r3, [pc, #80]	@ (800149c <MX_SPI4_Init+0xa4>)
 800144c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001450:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001452:	4b12      	ldr	r3, [pc, #72]	@ (800149c <MX_SPI4_Init+0xa4>)
 8001454:	2200      	movs	r2, #0
 8001456:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001458:	4b10      	ldr	r3, [pc, #64]	@ (800149c <MX_SPI4_Init+0xa4>)
 800145a:	2200      	movs	r2, #0
 800145c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800145e:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <MX_SPI4_Init+0xa4>)
 8001460:	2200      	movs	r2, #0
 8001462:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001464:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <MX_SPI4_Init+0xa4>)
 8001466:	2200      	movs	r2, #0
 8001468:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800146a:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <MX_SPI4_Init+0xa4>)
 800146c:	2200      	movs	r2, #0
 800146e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001470:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <MX_SPI4_Init+0xa4>)
 8001472:	2200      	movs	r2, #0
 8001474:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <MX_SPI4_Init+0xa4>)
 8001478:	2200      	movs	r2, #0
 800147a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800147c:	4b07      	ldr	r3, [pc, #28]	@ (800149c <MX_SPI4_Init+0xa4>)
 800147e:	2200      	movs	r2, #0
 8001480:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_SPI4_Init+0xa4>)
 8001484:	2200      	movs	r2, #0
 8001486:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001488:	4804      	ldr	r0, [pc, #16]	@ (800149c <MX_SPI4_Init+0xa4>)
 800148a:	f006 fbe1 	bl	8007c50 <HAL_SPI_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8001494:	f7ff fcb6 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	240002f4 	.word	0x240002f4
 80014a0:	40013400 	.word	0x40013400

080014a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b0be      	sub	sp, #248	@ 0xf8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c0:	22b8      	movs	r2, #184	@ 0xb8
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f009 f881 	bl	800a5cc <memset>
  if(spiHandle->Instance==SPI1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a85      	ldr	r2, [pc, #532]	@ (80016e4 <HAL_SPI_MspInit+0x240>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d16b      	bne.n	80015ac <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80014d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ea:	4618      	mov	r0, r3
 80014ec:	f004 fdee 	bl	80060cc <HAL_RCCEx_PeriphCLKConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80014f6:	f7ff fc85 	bl	8000e04 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014fa:	4b7b      	ldr	r3, [pc, #492]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 80014fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001500:	4a79      	ldr	r2, [pc, #484]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 8001502:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001506:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800150a:	4b77      	ldr	r3, [pc, #476]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 800150c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001510:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001518:	4b73      	ldr	r3, [pc, #460]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151e:	4a72      	ldr	r2, [pc, #456]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001528:	4b6f      	ldr	r3, [pc, #444]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 800152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	623b      	str	r3, [r7, #32]
 8001534:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001536:	4b6c      	ldr	r3, [pc, #432]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153c:	4a6a      	ldr	r2, [pc, #424]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 800153e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001542:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001546:	4b68      	ldr	r3, [pc, #416]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001554:	2380      	movs	r3, #128	@ 0x80
 8001556:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800156c:	2305      	movs	r3, #5
 800156e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001572:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001576:	4619      	mov	r1, r3
 8001578:	485c      	ldr	r0, [pc, #368]	@ (80016ec <HAL_SPI_MspInit+0x248>)
 800157a:	f002 fbdf 	bl	8003d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800157e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001582:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001598:	2305      	movs	r3, #5
 800159a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800159e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4852      	ldr	r0, [pc, #328]	@ (80016f0 <HAL_SPI_MspInit+0x24c>)
 80015a6:	f002 fbc9 	bl	8003d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80015aa:	e097      	b.n	80016dc <HAL_SPI_MspInit+0x238>
  else if(spiHandle->Instance==SPI3)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a50      	ldr	r2, [pc, #320]	@ (80016f4 <HAL_SPI_MspInit+0x250>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d147      	bne.n	8001646 <HAL_SPI_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80015b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015cc:	4618      	mov	r0, r3
 80015ce:	f004 fd7d 	bl	80060cc <HAL_RCCEx_PeriphCLKConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <HAL_SPI_MspInit+0x138>
      Error_Handler();
 80015d8:	f7ff fc14 	bl	8000e04 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015dc:	4b42      	ldr	r3, [pc, #264]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 80015de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015e2:	4a41      	ldr	r2, [pc, #260]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 80015e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015ec:	4b3e      	ldr	r3, [pc, #248]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 80015ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	4b3b      	ldr	r3, [pc, #236]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 80015fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001600:	4a39      	ldr	r2, [pc, #228]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800160a:	4b37      	ldr	r3, [pc, #220]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001618:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800161c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001632:	2306      	movs	r3, #6
 8001634:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800163c:	4619      	mov	r1, r3
 800163e:	482e      	ldr	r0, [pc, #184]	@ (80016f8 <HAL_SPI_MspInit+0x254>)
 8001640:	f002 fb7c 	bl	8003d3c <HAL_GPIO_Init>
}
 8001644:	e04a      	b.n	80016dc <HAL_SPI_MspInit+0x238>
  else if(spiHandle->Instance==SPI4)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a2c      	ldr	r2, [pc, #176]	@ (80016fc <HAL_SPI_MspInit+0x258>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d145      	bne.n	80016dc <HAL_SPI_MspInit+0x238>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001650:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001662:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001666:	4618      	mov	r0, r3
 8001668:	f004 fd30 	bl	80060cc <HAL_RCCEx_PeriphCLKConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_SPI_MspInit+0x1d2>
      Error_Handler();
 8001672:	f7ff fbc7 	bl	8000e04 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001676:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 8001678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800167c:	4a1a      	ldr	r2, [pc, #104]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 800167e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001682:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001686:	4b18      	ldr	r3, [pc, #96]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 8001688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800168c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001694:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 8001696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169a:	4a13      	ldr	r2, [pc, #76]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016a4:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <HAL_SPI_MspInit+0x244>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80016b2:	2344      	movs	r3, #68	@ 0x44
 80016b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80016ca:	2305      	movs	r3, #5
 80016cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016d0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80016d4:	4619      	mov	r1, r3
 80016d6:	480a      	ldr	r0, [pc, #40]	@ (8001700 <HAL_SPI_MspInit+0x25c>)
 80016d8:	f002 fb30 	bl	8003d3c <HAL_GPIO_Init>
}
 80016dc:	bf00      	nop
 80016de:	37f8      	adds	r7, #248	@ 0xf8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40013000 	.word	0x40013000
 80016e8:	58024400 	.word	0x58024400
 80016ec:	58020c00 	.word	0x58020c00
 80016f0:	58021800 	.word	0x58021800
 80016f4:	40003c00 	.word	0x40003c00
 80016f8:	58020800 	.word	0x58020800
 80016fc:	40013400 	.word	0x40013400
 8001700:	58021000 	.word	0x58021000

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <HAL_MspInit+0x54>)
 800170c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001710:	4a11      	ldr	r2, [pc, #68]	@ (8001758 <HAL_MspInit+0x54>)
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <HAL_MspInit+0x54>)
 800171c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <HAL_MspInit+0x54>)
 800172a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800172e:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <HAL_MspInit+0x54>)
 8001730:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001734:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001738:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <HAL_MspInit+0x54>)
 800173a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800173e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001746:	f000 fd1b 	bl	8002180 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800174a:	2002      	movs	r0, #2
 800174c:	f000 fd04 	bl	8002158 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	58024400 	.word	0x58024400

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <NMI_Handler+0x4>

08001764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <MemManage_Handler+0x4>

08001774 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <UsageFault_Handler+0x4>

08001784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b2:	f000 fc8d 	bl	80020d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80017c0:	4802      	ldr	r0, [pc, #8]	@ (80017cc <DMA1_Stream0_IRQHandler+0x10>)
 80017c2:	f001 f955 	bl	8002a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	240003c8 	.word	0x240003c8

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017d6:	4b3c      	ldr	r3, [pc, #240]	@ (80018c8 <SystemInit+0xf8>)
 80017d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017dc:	4a3a      	ldr	r2, [pc, #232]	@ (80018c8 <SystemInit+0xf8>)
 80017de:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017e2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017e6:	4b39      	ldr	r3, [pc, #228]	@ (80018cc <SystemInit+0xfc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d807      	bhi.n	8001802 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017f2:	4b36      	ldr	r3, [pc, #216]	@ (80018cc <SystemInit+0xfc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 030f 	bic.w	r3, r3, #15
 80017fa:	4a34      	ldr	r2, [pc, #208]	@ (80018cc <SystemInit+0xfc>)
 80017fc:	f043 0307 	orr.w	r3, r3, #7
 8001800:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001802:	4b33      	ldr	r3, [pc, #204]	@ (80018d0 <SystemInit+0x100>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a32      	ldr	r2, [pc, #200]	@ (80018d0 <SystemInit+0x100>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800180e:	4b30      	ldr	r3, [pc, #192]	@ (80018d0 <SystemInit+0x100>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001814:	4b2e      	ldr	r3, [pc, #184]	@ (80018d0 <SystemInit+0x100>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	492d      	ldr	r1, [pc, #180]	@ (80018d0 <SystemInit+0x100>)
 800181a:	4b2e      	ldr	r3, [pc, #184]	@ (80018d4 <SystemInit+0x104>)
 800181c:	4013      	ands	r3, r2
 800181e:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001820:	4b2a      	ldr	r3, [pc, #168]	@ (80018cc <SystemInit+0xfc>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d007      	beq.n	800183c <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800182c:	4b27      	ldr	r3, [pc, #156]	@ (80018cc <SystemInit+0xfc>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 030f 	bic.w	r3, r3, #15
 8001834:	4a25      	ldr	r2, [pc, #148]	@ (80018cc <SystemInit+0xfc>)
 8001836:	f043 0307 	orr.w	r3, r3, #7
 800183a:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800183c:	4b24      	ldr	r3, [pc, #144]	@ (80018d0 <SystemInit+0x100>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001842:	4b23      	ldr	r3, [pc, #140]	@ (80018d0 <SystemInit+0x100>)
 8001844:	2200      	movs	r2, #0
 8001846:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001848:	4b21      	ldr	r3, [pc, #132]	@ (80018d0 <SystemInit+0x100>)
 800184a:	2200      	movs	r2, #0
 800184c:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800184e:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <SystemInit+0x100>)
 8001850:	4a21      	ldr	r2, [pc, #132]	@ (80018d8 <SystemInit+0x108>)
 8001852:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001854:	4b1e      	ldr	r3, [pc, #120]	@ (80018d0 <SystemInit+0x100>)
 8001856:	4a21      	ldr	r2, [pc, #132]	@ (80018dc <SystemInit+0x10c>)
 8001858:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800185a:	4b1d      	ldr	r3, [pc, #116]	@ (80018d0 <SystemInit+0x100>)
 800185c:	4a20      	ldr	r2, [pc, #128]	@ (80018e0 <SystemInit+0x110>)
 800185e:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001860:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <SystemInit+0x100>)
 8001862:	2200      	movs	r2, #0
 8001864:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001866:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <SystemInit+0x100>)
 8001868:	4a1d      	ldr	r2, [pc, #116]	@ (80018e0 <SystemInit+0x110>)
 800186a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800186c:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <SystemInit+0x100>)
 800186e:	2200      	movs	r2, #0
 8001870:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001872:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <SystemInit+0x100>)
 8001874:	4a1a      	ldr	r2, [pc, #104]	@ (80018e0 <SystemInit+0x110>)
 8001876:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001878:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <SystemInit+0x100>)
 800187a:	2200      	movs	r2, #0
 800187c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800187e:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <SystemInit+0x100>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a13      	ldr	r2, [pc, #76]	@ (80018d0 <SystemInit+0x100>)
 8001884:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001888:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <SystemInit+0x100>)
 800188c:	2200      	movs	r2, #0
 800188e:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001890:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <SystemInit+0x100>)
 8001892:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001896:	4a0e      	ldr	r2, [pc, #56]	@ (80018d0 <SystemInit+0x100>)
 8001898:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800189c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 80018a0:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <SystemInit+0x100>)
 80018a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80018a6:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 80018a8:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <SystemInit+0x114>)
 80018ac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80018b0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 80018b2:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <SystemInit+0xf8>)
 80018b4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018b8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00
 80018cc:	52002000 	.word	0x52002000
 80018d0:	58024400 	.word	0x58024400
 80018d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80018d8:	02020200 	.word	0x02020200
 80018dc:	01ff0000 	.word	0x01ff0000
 80018e0:	01010280 	.word	0x01010280
 80018e4:	52004000 	.word	0x52004000

080018e8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08e      	sub	sp, #56	@ 0x38
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001908:	463b      	mov	r3, r7
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]
 8001916:	615a      	str	r2, [r3, #20]
 8001918:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800191a:	4b2d      	ldr	r3, [pc, #180]	@ (80019d0 <MX_TIM3_Init+0xe8>)
 800191c:	4a2d      	ldr	r2, [pc, #180]	@ (80019d4 <MX_TIM3_Init+0xec>)
 800191e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001920:	4b2b      	ldr	r3, [pc, #172]	@ (80019d0 <MX_TIM3_Init+0xe8>)
 8001922:	2200      	movs	r2, #0
 8001924:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001926:	4b2a      	ldr	r3, [pc, #168]	@ (80019d0 <MX_TIM3_Init+0xe8>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800192c:	4b28      	ldr	r3, [pc, #160]	@ (80019d0 <MX_TIM3_Init+0xe8>)
 800192e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001932:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001934:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <MX_TIM3_Init+0xe8>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	4b25      	ldr	r3, [pc, #148]	@ (80019d0 <MX_TIM3_Init+0xe8>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001940:	4823      	ldr	r0, [pc, #140]	@ (80019d0 <MX_TIM3_Init+0xe8>)
 8001942:	f006 fac4 	bl	8007ece <HAL_TIM_Base_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800194c:	f7ff fa5a 	bl	8000e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001956:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800195a:	4619      	mov	r1, r3
 800195c:	481c      	ldr	r0, [pc, #112]	@ (80019d0 <MX_TIM3_Init+0xe8>)
 800195e:	f006 fc83 	bl	8008268 <HAL_TIM_ConfigClockSource>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001968:	f7ff fa4c 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800196c:	4818      	ldr	r0, [pc, #96]	@ (80019d0 <MX_TIM3_Init+0xe8>)
 800196e:	f006 fb05 	bl	8007f7c <HAL_TIM_PWM_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001978:	f7ff fa44 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	4811      	ldr	r0, [pc, #68]	@ (80019d0 <MX_TIM3_Init+0xe8>)
 800198c:	f007 f98a 	bl	8008ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001996:	f7ff fa35 	bl	8000e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800199a:	2360      	movs	r3, #96	@ 0x60
 800199c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019aa:	463b      	mov	r3, r7
 80019ac:	2200      	movs	r2, #0
 80019ae:	4619      	mov	r1, r3
 80019b0:	4807      	ldr	r0, [pc, #28]	@ (80019d0 <MX_TIM3_Init+0xe8>)
 80019b2:	f006 fb45 	bl	8008040 <HAL_TIM_PWM_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80019bc:	f7ff fa22 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019c0:	4803      	ldr	r0, [pc, #12]	@ (80019d0 <MX_TIM3_Init+0xe8>)
 80019c2:	f000 f85d 	bl	8001a80 <HAL_TIM_MspPostInit>

}
 80019c6:	bf00      	nop
 80019c8:	3738      	adds	r7, #56	@ 0x38
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2400037c 	.word	0x2400037c
 80019d4:	40000400 	.word	0x40000400

080019d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a22      	ldr	r2, [pc, #136]	@ (8001a70 <HAL_TIM_Base_MspInit+0x98>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d13d      	bne.n	8001a66 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ea:	4b22      	ldr	r3, [pc, #136]	@ (8001a74 <HAL_TIM_Base_MspInit+0x9c>)
 80019ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019f0:	4a20      	ldr	r2, [pc, #128]	@ (8001a74 <HAL_TIM_Base_MspInit+0x9c>)
 80019f2:	f043 0302 	orr.w	r3, r3, #2
 80019f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001a74 <HAL_TIM_Base_MspInit+0x9c>)
 80019fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Stream0;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a7c <HAL_TIM_Base_MspInit+0xa4>)
 8001a0c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a10:	2217      	movs	r2, #23
 8001a12:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	@ (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a20:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a26:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a28:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a2e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a30:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a36:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001a4a:	480b      	ldr	r0, [pc, #44]	@ (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a4c:	f000 fcb8 	bl	80023c0 <HAL_DMA_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001a56:	f7ff f9d5 	bl	8000e04 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a06      	ldr	r2, [pc, #24]	@ (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a60:	4a05      	ldr	r2, [pc, #20]	@ (8001a78 <HAL_TIM_Base_MspInit+0xa0>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40000400 	.word	0x40000400
 8001a74:	58024400 	.word	0x58024400
 8001a78:	240003c8 	.word	0x240003c8
 8001a7c:	40020010 	.word	0x40020010

08001a80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a12      	ldr	r2, [pc, #72]	@ (8001ae8 <HAL_TIM_MspPostInit+0x68>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d11e      	bne.n	8001ae0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <HAL_TIM_MspPostInit+0x6c>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa8:	4a10      	ldr	r2, [pc, #64]	@ (8001aec <HAL_TIM_MspPostInit+0x6c>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_TIM_MspPostInit+0x6c>)
 8001ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = WS2812_Pin;
 8001ac0:	2340      	movs	r3, #64	@ 0x40
 8001ac2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4805      	ldr	r0, [pc, #20]	@ (8001af0 <HAL_TIM_MspPostInit+0x70>)
 8001adc:	f002 f92e 	bl	8003d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ae0:	bf00      	nop
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40000400 	.word	0x40000400
 8001aec:	58024400 	.word	0x58024400
 8001af0:	58020800 	.word	0x58020800

08001af4 <MX_UART4_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001af8:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <MX_UART4_Init+0x90>)
 8001afa:	4a23      	ldr	r2, [pc, #140]	@ (8001b88 <MX_UART4_Init+0x94>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001afe:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <MX_UART4_Init+0x90>)
 8001b00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b06:	4b1f      	ldr	r3, [pc, #124]	@ (8001b84 <MX_UART4_Init+0x90>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <MX_UART4_Init+0x90>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b12:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <MX_UART4_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <MX_UART4_Init+0x90>)
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	@ (8001b84 <MX_UART4_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b24:	4b17      	ldr	r3, [pc, #92]	@ (8001b84 <MX_UART4_Init+0x90>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b2a:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <MX_UART4_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b30:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <MX_UART4_Init+0x90>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b36:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <MX_UART4_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b3c:	4811      	ldr	r0, [pc, #68]	@ (8001b84 <MX_UART4_Init+0x90>)
 8001b3e:	f007 f94d 	bl	8008ddc <HAL_UART_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001b48:	f7ff f95c 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <MX_UART4_Init+0x90>)
 8001b50:	f008 fa59 	bl	800a006 <HAL_UARTEx_SetTxFifoThreshold>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001b5a:	f7ff f953 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4808      	ldr	r0, [pc, #32]	@ (8001b84 <MX_UART4_Init+0x90>)
 8001b62:	f008 fa8e 	bl	800a082 <HAL_UARTEx_SetRxFifoThreshold>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001b6c:	f7ff f94a 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	@ (8001b84 <MX_UART4_Init+0x90>)
 8001b72:	f008 fa0f 	bl	8009f94 <HAL_UARTEx_DisableFifoMode>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001b7c:	f7ff f942 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	24000440 	.word	0x24000440
 8001b88:	40004c00 	.word	0x40004c00

08001b8c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001b90:	4b22      	ldr	r3, [pc, #136]	@ (8001c1c <MX_UART7_Init+0x90>)
 8001b92:	4a23      	ldr	r2, [pc, #140]	@ (8001c20 <MX_UART7_Init+0x94>)
 8001b94:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001b96:	4b21      	ldr	r3, [pc, #132]	@ (8001c1c <MX_UART7_Init+0x90>)
 8001b98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b9c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c1c <MX_UART7_Init+0x90>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <MX_UART7_Init+0x90>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001baa:	4b1c      	ldr	r3, [pc, #112]	@ (8001c1c <MX_UART7_Init+0x90>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <MX_UART7_Init+0x90>)
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb6:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <MX_UART7_Init+0x90>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bbc:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <MX_UART7_Init+0x90>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc2:	4b16      	ldr	r3, [pc, #88]	@ (8001c1c <MX_UART7_Init+0x90>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	@ (8001c1c <MX_UART7_Init+0x90>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bce:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <MX_UART7_Init+0x90>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001bd4:	4811      	ldr	r0, [pc, #68]	@ (8001c1c <MX_UART7_Init+0x90>)
 8001bd6:	f007 f901 	bl	8008ddc <HAL_UART_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001be0:	f7ff f910 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be4:	2100      	movs	r1, #0
 8001be6:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <MX_UART7_Init+0x90>)
 8001be8:	f008 fa0d 	bl	800a006 <HAL_UARTEx_SetTxFifoThreshold>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001bf2:	f7ff f907 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4808      	ldr	r0, [pc, #32]	@ (8001c1c <MX_UART7_Init+0x90>)
 8001bfa:	f008 fa42 	bl	800a082 <HAL_UARTEx_SetRxFifoThreshold>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001c04:	f7ff f8fe 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001c08:	4804      	ldr	r0, [pc, #16]	@ (8001c1c <MX_UART7_Init+0x90>)
 8001c0a:	f008 f9c3 	bl	8009f94 <HAL_UARTEx_DisableFifoMode>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001c14:	f7ff f8f6 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	240004d4 	.word	0x240004d4
 8001c20:	40007800 	.word	0x40007800

08001c24 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c28:	4b22      	ldr	r3, [pc, #136]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c2a:	4a23      	ldr	r2, [pc, #140]	@ (8001cb8 <MX_USART1_UART_Init+0x94>)
 8001c2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c2e:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c36:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c42:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c48:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	4b19      	ldr	r3, [pc, #100]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	4b17      	ldr	r3, [pc, #92]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c5a:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c60:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c66:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c6c:	4811      	ldr	r0, [pc, #68]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c6e:	f007 f8b5 	bl	8008ddc <HAL_UART_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c78:	f7ff f8c4 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	480d      	ldr	r0, [pc, #52]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c80:	f008 f9c1 	bl	800a006 <HAL_UARTEx_SetTxFifoThreshold>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c8a:	f7ff f8bb 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4808      	ldr	r0, [pc, #32]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001c92:	f008 f9f6 	bl	800a082 <HAL_UARTEx_SetRxFifoThreshold>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c9c:	f7ff f8b2 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ca0:	4804      	ldr	r0, [pc, #16]	@ (8001cb4 <MX_USART1_UART_Init+0x90>)
 8001ca2:	f008 f977 	bl	8009f94 <HAL_UARTEx_DisableFifoMode>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001cac:	f7ff f8aa 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	24000568 	.word	0x24000568
 8001cb8:	40011000 	.word	0x40011000

08001cbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b0bc      	sub	sp, #240	@ 0xf0
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd4:	f107 0320 	add.w	r3, r7, #32
 8001cd8:	22b8      	movs	r2, #184	@ 0xb8
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f008 fc75 	bl	800a5cc <memset>
  if(uartHandle->Instance==UART4)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a73      	ldr	r2, [pc, #460]	@ (8001eb4 <HAL_UART_MspInit+0x1f8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d146      	bne.n	8001d7a <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001cec:	f04f 0202 	mov.w	r2, #2
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfe:	f107 0320 	add.w	r3, r7, #32
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 f9e2 	bl	80060cc <HAL_RCCEx_PeriphCLKConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001d0e:	f7ff f879 	bl	8000e04 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d12:	4b69      	ldr	r3, [pc, #420]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001d14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d18:	4a67      	ldr	r2, [pc, #412]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001d1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d22:	4b65      	ldr	r3, [pc, #404]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001d24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	4b61      	ldr	r3, [pc, #388]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d36:	4a60      	ldr	r2, [pc, #384]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d40:	4b5d      	ldr	r3, [pc, #372]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	61bb      	str	r3, [r7, #24]
 8001d4c:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d66:	2308      	movs	r3, #8
 8001d68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d70:	4619      	mov	r1, r3
 8001d72:	4852      	ldr	r0, [pc, #328]	@ (8001ebc <HAL_UART_MspInit+0x200>)
 8001d74:	f001 ffe2 	bl	8003d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d78:	e097      	b.n	8001eaa <HAL_UART_MspInit+0x1ee>
  else if(uartHandle->Instance==UART7)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a50      	ldr	r2, [pc, #320]	@ (8001ec0 <HAL_UART_MspInit+0x204>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d146      	bne.n	8001e12 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001d84:	f04f 0202 	mov.w	r2, #2
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d96:	f107 0320 	add.w	r3, r7, #32
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 f996 	bl	80060cc <HAL_RCCEx_PeriphCLKConfig>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_UART_MspInit+0xee>
      Error_Handler();
 8001da6:	f7ff f82d 	bl	8000e04 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001daa:	4b43      	ldr	r3, [pc, #268]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001db0:	4a41      	ldr	r2, [pc, #260]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001db2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001db6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dba:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dc0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dce:	4a3a      	ldr	r2, [pc, #232]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001dd0:	f043 0320 	orr.w	r3, r3, #32
 8001dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd8:	4b37      	ldr	r3, [pc, #220]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001de6:	23c0      	movs	r3, #192	@ 0xc0
 8001de8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001dfe:	2307      	movs	r3, #7
 8001e00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e04:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e08:	4619      	mov	r1, r3
 8001e0a:	482e      	ldr	r0, [pc, #184]	@ (8001ec4 <HAL_UART_MspInit+0x208>)
 8001e0c:	f001 ff96 	bl	8003d3c <HAL_GPIO_Init>
}
 8001e10:	e04b      	b.n	8001eaa <HAL_UART_MspInit+0x1ee>
  else if(uartHandle->Instance==USART1)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a2c      	ldr	r2, [pc, #176]	@ (8001ec8 <HAL_UART_MspInit+0x20c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d146      	bne.n	8001eaa <HAL_UART_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e1c:	f04f 0201 	mov.w	r2, #1
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e2e:	f107 0320 	add.w	r3, r7, #32
 8001e32:	4618      	mov	r0, r3
 8001e34:	f004 f94a 	bl	80060cc <HAL_RCCEx_PeriphCLKConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_UART_MspInit+0x186>
      Error_Handler();
 8001e3e:	f7fe ffe1 	bl	8000e04 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e42:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e48:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001e4a:	f043 0310 	orr.w	r3, r3, #16
 8001e4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e52:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e60:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e66:	4a14      	ldr	r2, [pc, #80]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e70:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <HAL_UART_MspInit+0x1fc>)
 8001e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e98:	2307      	movs	r3, #7
 8001e9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4805      	ldr	r0, [pc, #20]	@ (8001ebc <HAL_UART_MspInit+0x200>)
 8001ea6:	f001 ff49 	bl	8003d3c <HAL_GPIO_Init>
}
 8001eaa:	bf00      	nop
 8001eac:	37f0      	adds	r7, #240	@ 0xf0
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40004c00 	.word	0x40004c00
 8001eb8:	58024400 	.word	0x58024400
 8001ebc:	58020000 	.word	0x58020000
 8001ec0:	40007800 	.word	0x40007800
 8001ec4:	58021400 	.word	0x58021400
 8001ec8:	40011000 	.word	0x40011000

08001ecc <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001ed0:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001ed2:	4a11      	ldr	r2, [pc, #68]	@ (8001f18 <MX_USB_OTG_HS_HCD_Init+0x4c>)
 8001ed4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f14 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001ed8:	2210      	movs	r2, #16
 8001eda:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8001edc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001eea:	2202      	movs	r2, #2
 8001eec:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001eee:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001ef4:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8001f00:	4804      	ldr	r0, [pc, #16]	@ (8001f14 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001f02:	f002 f8dc 	bl	80040be <HAL_HCD_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_USB_OTG_HS_HCD_Init+0x44>
  {
    Error_Handler();
 8001f0c:	f7fe ff7a 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	240005fc 	.word	0x240005fc
 8001f18:	40040000 	.word	0x40040000

08001f1c <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b0b2      	sub	sp, #200	@ 0xc8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	22b8      	movs	r2, #184	@ 0xb8
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f008 fb4d 	bl	800a5cc <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a16      	ldr	r2, [pc, #88]	@ (8001f90 <HAL_HCD_MspInit+0x74>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d124      	bne.n	8001f86 <HAL_HCD_MspInit+0x6a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f3c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001f48:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001f4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	4618      	mov	r0, r3
 8001f56:	f004 f8b9 	bl	80060cc <HAL_RCCEx_PeriphCLKConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_HCD_MspInit+0x48>
    {
      Error_Handler();
 8001f60:	f7fe ff50 	bl	8000e04 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001f64:	f003 f93c 	bl	80051e0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001f68:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <HAL_HCD_MspInit+0x78>)
 8001f6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f6e:	4a09      	ldr	r2, [pc, #36]	@ (8001f94 <HAL_HCD_MspInit+0x78>)
 8001f70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f74:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <HAL_HCD_MspInit+0x78>)
 8001f7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8001f86:	bf00      	nop
 8001f88:	37c8      	adds	r7, #200	@ 0xc8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40040000 	.word	0x40040000
 8001f94:	58024400 	.word	0x58024400

08001f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f9c:	f7ff fc18 	bl	80017d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa0:	480c      	ldr	r0, [pc, #48]	@ (8001fd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fa2:	490d      	ldr	r1, [pc, #52]	@ (8001fd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8001fdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa8:	e002      	b.n	8001fb0 <LoopCopyDataInit>

08001faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fae:	3304      	adds	r3, #4

08001fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb4:	d3f9      	bcc.n	8001faa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001fe4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fbc:	e001      	b.n	8001fc2 <LoopFillZerobss>

08001fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc0:	3204      	adds	r2, #4

08001fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc4:	d3fb      	bcc.n	8001fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fc6:	f008 fb09 	bl	800a5dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fca:	f7fe fe85 	bl	8000cd8 <main>
  bx  lr
 8001fce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fd0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001fd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fd8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001fdc:	0800a68c 	.word	0x0800a68c
  ldr r2, =_sbss
 8001fe0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001fe4:	240009e0 	.word	0x240009e0

08001fe8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe8:	e7fe      	b.n	8001fe8 <ADC3_IRQHandler>
	...

08001fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	f000 f9a4 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ff8:	f003 fe92 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <HAL_Init+0x68>)
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	4913      	ldr	r1, [pc, #76]	@ (8002058 <HAL_Init+0x6c>)
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
 8002014:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002016:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <HAL_Init+0x68>)
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	4a0e      	ldr	r2, [pc, #56]	@ (8002058 <HAL_Init+0x6c>)
 8002020:	5cd3      	ldrb	r3, [r2, r3]
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
 800202c:	4a0b      	ldr	r2, [pc, #44]	@ (800205c <HAL_Init+0x70>)
 800202e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002030:	4a0b      	ldr	r2, [pc, #44]	@ (8002060 <HAL_Init+0x74>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002036:	200f      	movs	r0, #15
 8002038:	f000 f814 	bl	8002064 <HAL_InitTick>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e002      	b.n	800204c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002046:	f7ff fb5d 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	58024400 	.word	0x58024400
 8002058:	0800a63c 	.word	0x0800a63c
 800205c:	24000004 	.word	0x24000004
 8002060:	24000000 	.word	0x24000000

08002064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800206c:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <HAL_InitTick+0x60>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e021      	b.n	80020bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002078:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <HAL_InitTick+0x64>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <HAL_InitTick+0x60>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4619      	mov	r1, r3
 8002082:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002086:	fbb3 f3f1 	udiv	r3, r3, r1
 800208a:	fbb2 f3f3 	udiv	r3, r2, r3
 800208e:	4618      	mov	r0, r3
 8002090:	f000 f989 	bl	80023a6 <HAL_SYSTICK_Config>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e00e      	b.n	80020bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b0f      	cmp	r3, #15
 80020a2:	d80a      	bhi.n	80020ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a4:	2200      	movs	r2, #0
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f000 f953 	bl	8002356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b0:	4a06      	ldr	r2, [pc, #24]	@ (80020cc <HAL_InitTick+0x68>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e000      	b.n	80020bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	2400000c 	.word	0x2400000c
 80020c8:	24000000 	.word	0x24000000
 80020cc:	24000008 	.word	0x24000008

080020d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020d4:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <HAL_IncTick+0x20>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_IncTick+0x24>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	4a04      	ldr	r2, [pc, #16]	@ (80020f4 <HAL_IncTick+0x24>)
 80020e2:	6013      	str	r3, [r2, #0]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	2400000c 	.word	0x2400000c
 80020f4:	240009dc 	.word	0x240009dc

080020f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;
 80020fc:	4b03      	ldr	r3, [pc, #12]	@ (800210c <HAL_GetTick+0x14>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	240009dc 	.word	0x240009dc

08002110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002118:	f7ff ffee 	bl	80020f8 <HAL_GetTick>
 800211c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d005      	beq.n	8002136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800212a:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <HAL_Delay+0x44>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002136:	bf00      	nop
 8002138:	f7ff ffde 	bl	80020f8 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	429a      	cmp	r2, r3
 8002146:	d8f7      	bhi.n	8002138 <HAL_Delay+0x28>
  {
  }
}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2400000c 	.word	0x2400000c

08002158 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f023 0202 	bic.w	r2, r3, #2
 8002168:	4904      	ldr	r1, [pc, #16]	@ (800217c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	58003c00 	.word	0x58003c00

08002180 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002184:	4b05      	ldr	r3, [pc, #20]	@ (800219c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a04      	ldr	r2, [pc, #16]	@ (800219c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	6013      	str	r3, [r2, #0]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	58003c00 	.word	0x58003c00

080021a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <__NVIC_SetPriorityGrouping+0x40>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ce:	4a04      	ldr	r2, [pc, #16]	@ (80021e0 <__NVIC_SetPriorityGrouping+0x40>)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	60d3      	str	r3, [r2, #12]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00
 80021e4:	05fa0000 	.word	0x05fa0000

080021e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4907      	ldr	r1, [pc, #28]	@ (800223c <__NVIC_EnableIRQ+0x38>)
 800221e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	@ (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	@ (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	@ 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	@ 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	@ (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f7ff ff8e 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	@ (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	@ (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff29 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002364:	f7ff ff40 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 8002368:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	6978      	ldr	r0, [r7, #20]
 8002370:	f7ff ff90 	bl	8002294 <NVIC_EncodePriority>
 8002374:	4602      	mov	r2, r0
 8002376:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff5f 	bl	8002240 <__NVIC_SetPriority>
}
 8002382:	bf00      	nop
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff33 	bl	8002204 <__NVIC_EnableIRQ>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ffa4 	bl	80022fc <SysTick_Config>
 80023b4:	4603      	mov	r3, r0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80023c8:	f7ff fe96 	bl	80020f8 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e312      	b.n	80029fe <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a66      	ldr	r2, [pc, #408]	@ (8002578 <HAL_DMA_Init+0x1b8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d04a      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a65      	ldr	r2, [pc, #404]	@ (800257c <HAL_DMA_Init+0x1bc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d045      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a63      	ldr	r2, [pc, #396]	@ (8002580 <HAL_DMA_Init+0x1c0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d040      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a62      	ldr	r2, [pc, #392]	@ (8002584 <HAL_DMA_Init+0x1c4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d03b      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a60      	ldr	r2, [pc, #384]	@ (8002588 <HAL_DMA_Init+0x1c8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d036      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a5f      	ldr	r2, [pc, #380]	@ (800258c <HAL_DMA_Init+0x1cc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d031      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a5d      	ldr	r2, [pc, #372]	@ (8002590 <HAL_DMA_Init+0x1d0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d02c      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a5c      	ldr	r2, [pc, #368]	@ (8002594 <HAL_DMA_Init+0x1d4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d027      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a5a      	ldr	r2, [pc, #360]	@ (8002598 <HAL_DMA_Init+0x1d8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d022      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a59      	ldr	r2, [pc, #356]	@ (800259c <HAL_DMA_Init+0x1dc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d01d      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a57      	ldr	r2, [pc, #348]	@ (80025a0 <HAL_DMA_Init+0x1e0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d018      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a56      	ldr	r2, [pc, #344]	@ (80025a4 <HAL_DMA_Init+0x1e4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d013      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a54      	ldr	r2, [pc, #336]	@ (80025a8 <HAL_DMA_Init+0x1e8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00e      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a53      	ldr	r2, [pc, #332]	@ (80025ac <HAL_DMA_Init+0x1ec>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d009      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a51      	ldr	r2, [pc, #324]	@ (80025b0 <HAL_DMA_Init+0x1f0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d004      	beq.n	8002478 <HAL_DMA_Init+0xb8>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a50      	ldr	r2, [pc, #320]	@ (80025b4 <HAL_DMA_Init+0x1f4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_DMA_Init+0xbc>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <HAL_DMA_Init+0xbe>
 800247c:	2300      	movs	r3, #0
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 813c 	beq.w	80026fc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a37      	ldr	r2, [pc, #220]	@ (8002578 <HAL_DMA_Init+0x1b8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d04a      	beq.n	8002534 <HAL_DMA_Init+0x174>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a36      	ldr	r2, [pc, #216]	@ (800257c <HAL_DMA_Init+0x1bc>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d045      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a34      	ldr	r2, [pc, #208]	@ (8002580 <HAL_DMA_Init+0x1c0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d040      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a33      	ldr	r2, [pc, #204]	@ (8002584 <HAL_DMA_Init+0x1c4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d03b      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a31      	ldr	r2, [pc, #196]	@ (8002588 <HAL_DMA_Init+0x1c8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d036      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a30      	ldr	r2, [pc, #192]	@ (800258c <HAL_DMA_Init+0x1cc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d031      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002590 <HAL_DMA_Init+0x1d0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d02c      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a2d      	ldr	r2, [pc, #180]	@ (8002594 <HAL_DMA_Init+0x1d4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d027      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002598 <HAL_DMA_Init+0x1d8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d022      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2a      	ldr	r2, [pc, #168]	@ (800259c <HAL_DMA_Init+0x1dc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d01d      	beq.n	8002534 <HAL_DMA_Init+0x174>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a28      	ldr	r2, [pc, #160]	@ (80025a0 <HAL_DMA_Init+0x1e0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d018      	beq.n	8002534 <HAL_DMA_Init+0x174>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a27      	ldr	r2, [pc, #156]	@ (80025a4 <HAL_DMA_Init+0x1e4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d013      	beq.n	8002534 <HAL_DMA_Init+0x174>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a25      	ldr	r2, [pc, #148]	@ (80025a8 <HAL_DMA_Init+0x1e8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00e      	beq.n	8002534 <HAL_DMA_Init+0x174>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a24      	ldr	r2, [pc, #144]	@ (80025ac <HAL_DMA_Init+0x1ec>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d009      	beq.n	8002534 <HAL_DMA_Init+0x174>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a22      	ldr	r2, [pc, #136]	@ (80025b0 <HAL_DMA_Init+0x1f0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_DMA_Init+0x174>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a21      	ldr	r2, [pc, #132]	@ (80025b4 <HAL_DMA_Init+0x1f4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d108      	bne.n	8002546 <HAL_DMA_Init+0x186>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e007      	b.n	8002556 <HAL_DMA_Init+0x196>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002556:	e02f      	b.n	80025b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002558:	f7ff fdce 	bl	80020f8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b05      	cmp	r3, #5
 8002564:	d928      	bls.n	80025b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2220      	movs	r2, #32
 800256a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2203      	movs	r2, #3
 8002570:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e242      	b.n	80029fe <HAL_DMA_Init+0x63e>
 8002578:	40020010 	.word	0x40020010
 800257c:	40020028 	.word	0x40020028
 8002580:	40020040 	.word	0x40020040
 8002584:	40020058 	.word	0x40020058
 8002588:	40020070 	.word	0x40020070
 800258c:	40020088 	.word	0x40020088
 8002590:	400200a0 	.word	0x400200a0
 8002594:	400200b8 	.word	0x400200b8
 8002598:	40020410 	.word	0x40020410
 800259c:	40020428 	.word	0x40020428
 80025a0:	40020440 	.word	0x40020440
 80025a4:	40020458 	.word	0x40020458
 80025a8:	40020470 	.word	0x40020470
 80025ac:	40020488 	.word	0x40020488
 80025b0:	400204a0 	.word	0x400204a0
 80025b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1c8      	bne.n	8002558 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4b83      	ldr	r3, [pc, #524]	@ (80027e0 <HAL_DMA_Init+0x420>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80025de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002608:	2b04      	cmp	r3, #4
 800260a:	d107      	bne.n	800261c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002614:	4313      	orrs	r3, r2
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b28      	cmp	r3, #40	@ 0x28
 8002622:	d903      	bls.n	800262c <HAL_DMA_Init+0x26c>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b2e      	cmp	r3, #46	@ 0x2e
 800262a:	d91f      	bls.n	800266c <HAL_DMA_Init+0x2ac>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b3e      	cmp	r3, #62	@ 0x3e
 8002632:	d903      	bls.n	800263c <HAL_DMA_Init+0x27c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b42      	cmp	r3, #66	@ 0x42
 800263a:	d917      	bls.n	800266c <HAL_DMA_Init+0x2ac>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b46      	cmp	r3, #70	@ 0x46
 8002642:	d903      	bls.n	800264c <HAL_DMA_Init+0x28c>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b48      	cmp	r3, #72	@ 0x48
 800264a:	d90f      	bls.n	800266c <HAL_DMA_Init+0x2ac>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b4e      	cmp	r3, #78	@ 0x4e
 8002652:	d903      	bls.n	800265c <HAL_DMA_Init+0x29c>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b52      	cmp	r3, #82	@ 0x52
 800265a:	d907      	bls.n	800266c <HAL_DMA_Init+0x2ac>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b73      	cmp	r3, #115	@ 0x73
 8002662:	d905      	bls.n	8002670 <HAL_DMA_Init+0x2b0>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b77      	cmp	r3, #119	@ 0x77
 800266a:	d801      	bhi.n	8002670 <HAL_DMA_Init+0x2b0>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <HAL_DMA_Init+0x2b2>
 8002670:	2300      	movs	r3, #0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800267c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f023 0307 	bic.w	r3, r3, #7
 8002694:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d117      	bne.n	80026d8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00e      	beq.n	80026d8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f001 f9b4 	bl	8003a28 <DMA_CheckFifoParam>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2240      	movs	r2, #64	@ 0x40
 80026ca:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e192      	b.n	80029fe <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f001 f8ef 	bl	80038c4 <DMA_CalcBaseAndBitshift>
 80026e6:	4603      	mov	r3, r0
 80026e8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	223f      	movs	r2, #63	@ 0x3f
 80026f4:	409a      	lsls	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	e0c8      	b.n	800288e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a38      	ldr	r2, [pc, #224]	@ (80027e4 <HAL_DMA_Init+0x424>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d022      	beq.n	800274c <HAL_DMA_Init+0x38c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a37      	ldr	r2, [pc, #220]	@ (80027e8 <HAL_DMA_Init+0x428>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d01d      	beq.n	800274c <HAL_DMA_Init+0x38c>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a35      	ldr	r2, [pc, #212]	@ (80027ec <HAL_DMA_Init+0x42c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d018      	beq.n	800274c <HAL_DMA_Init+0x38c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a34      	ldr	r2, [pc, #208]	@ (80027f0 <HAL_DMA_Init+0x430>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d013      	beq.n	800274c <HAL_DMA_Init+0x38c>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a32      	ldr	r2, [pc, #200]	@ (80027f4 <HAL_DMA_Init+0x434>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00e      	beq.n	800274c <HAL_DMA_Init+0x38c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a31      	ldr	r2, [pc, #196]	@ (80027f8 <HAL_DMA_Init+0x438>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_DMA_Init+0x38c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a2f      	ldr	r2, [pc, #188]	@ (80027fc <HAL_DMA_Init+0x43c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d004      	beq.n	800274c <HAL_DMA_Init+0x38c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a2e      	ldr	r2, [pc, #184]	@ (8002800 <HAL_DMA_Init+0x440>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d101      	bne.n	8002750 <HAL_DMA_Init+0x390>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <HAL_DMA_Init+0x392>
 8002750:	2300      	movs	r3, #0
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8092 	beq.w	800287c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a21      	ldr	r2, [pc, #132]	@ (80027e4 <HAL_DMA_Init+0x424>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d021      	beq.n	80027a6 <HAL_DMA_Init+0x3e6>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a20      	ldr	r2, [pc, #128]	@ (80027e8 <HAL_DMA_Init+0x428>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d01c      	beq.n	80027a6 <HAL_DMA_Init+0x3e6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1e      	ldr	r2, [pc, #120]	@ (80027ec <HAL_DMA_Init+0x42c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d017      	beq.n	80027a6 <HAL_DMA_Init+0x3e6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1d      	ldr	r2, [pc, #116]	@ (80027f0 <HAL_DMA_Init+0x430>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d012      	beq.n	80027a6 <HAL_DMA_Init+0x3e6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1b      	ldr	r2, [pc, #108]	@ (80027f4 <HAL_DMA_Init+0x434>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00d      	beq.n	80027a6 <HAL_DMA_Init+0x3e6>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1a      	ldr	r2, [pc, #104]	@ (80027f8 <HAL_DMA_Init+0x438>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d008      	beq.n	80027a6 <HAL_DMA_Init+0x3e6>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a18      	ldr	r2, [pc, #96]	@ (80027fc <HAL_DMA_Init+0x43c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d003      	beq.n	80027a6 <HAL_DMA_Init+0x3e6>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a17      	ldr	r2, [pc, #92]	@ (8002800 <HAL_DMA_Init+0x440>)
 80027a4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2202      	movs	r2, #2
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <HAL_DMA_Init+0x444>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b40      	cmp	r3, #64	@ 0x40
 80027cc:	d01c      	beq.n	8002808 <HAL_DMA_Init+0x448>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b80      	cmp	r3, #128	@ 0x80
 80027d4:	d102      	bne.n	80027dc <HAL_DMA_Init+0x41c>
 80027d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027da:	e016      	b.n	800280a <HAL_DMA_Init+0x44a>
 80027dc:	2300      	movs	r3, #0
 80027de:	e014      	b.n	800280a <HAL_DMA_Init+0x44a>
 80027e0:	fe10803f 	.word	0xfe10803f
 80027e4:	58025408 	.word	0x58025408
 80027e8:	5802541c 	.word	0x5802541c
 80027ec:	58025430 	.word	0x58025430
 80027f0:	58025444 	.word	0x58025444
 80027f4:	58025458 	.word	0x58025458
 80027f8:	5802546c 	.word	0x5802546c
 80027fc:	58025480 	.word	0x58025480
 8002800:	58025494 	.word	0x58025494
 8002804:	fffe000f 	.word	0xfffe000f
 8002808:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68d2      	ldr	r2, [r2, #12]
 800280e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002810:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002818:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002820:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002828:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002830:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002838:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	4b6e      	ldr	r3, [pc, #440]	@ (8002a08 <HAL_DMA_Init+0x648>)
 8002850:	4413      	add	r3, r2
 8002852:	4a6e      	ldr	r2, [pc, #440]	@ (8002a0c <HAL_DMA_Init+0x64c>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	009a      	lsls	r2, r3, #2
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f001 f82f 	bl	80038c4 <DMA_CalcBaseAndBitshift>
 8002866:	4603      	mov	r3, r0
 8002868:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	2201      	movs	r2, #1
 8002874:	409a      	lsls	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	e008      	b.n	800288e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2240      	movs	r2, #64	@ 0x40
 8002880:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2203      	movs	r2, #3
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0b7      	b.n	80029fe <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a5f      	ldr	r2, [pc, #380]	@ (8002a10 <HAL_DMA_Init+0x650>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d072      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a5d      	ldr	r2, [pc, #372]	@ (8002a14 <HAL_DMA_Init+0x654>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d06d      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a18 <HAL_DMA_Init+0x658>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d068      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a5a      	ldr	r2, [pc, #360]	@ (8002a1c <HAL_DMA_Init+0x65c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d063      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a59      	ldr	r2, [pc, #356]	@ (8002a20 <HAL_DMA_Init+0x660>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d05e      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a57      	ldr	r2, [pc, #348]	@ (8002a24 <HAL_DMA_Init+0x664>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d059      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a56      	ldr	r2, [pc, #344]	@ (8002a28 <HAL_DMA_Init+0x668>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d054      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a54      	ldr	r2, [pc, #336]	@ (8002a2c <HAL_DMA_Init+0x66c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d04f      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a53      	ldr	r2, [pc, #332]	@ (8002a30 <HAL_DMA_Init+0x670>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d04a      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a51      	ldr	r2, [pc, #324]	@ (8002a34 <HAL_DMA_Init+0x674>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d045      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a50      	ldr	r2, [pc, #320]	@ (8002a38 <HAL_DMA_Init+0x678>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d040      	beq.n	800297e <HAL_DMA_Init+0x5be>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a4e      	ldr	r2, [pc, #312]	@ (8002a3c <HAL_DMA_Init+0x67c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d03b      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a4d      	ldr	r2, [pc, #308]	@ (8002a40 <HAL_DMA_Init+0x680>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d036      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a4b      	ldr	r2, [pc, #300]	@ (8002a44 <HAL_DMA_Init+0x684>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d031      	beq.n	800297e <HAL_DMA_Init+0x5be>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a48 <HAL_DMA_Init+0x688>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d02c      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a48      	ldr	r2, [pc, #288]	@ (8002a4c <HAL_DMA_Init+0x68c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d027      	beq.n	800297e <HAL_DMA_Init+0x5be>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a47      	ldr	r2, [pc, #284]	@ (8002a50 <HAL_DMA_Init+0x690>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d022      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a45      	ldr	r2, [pc, #276]	@ (8002a54 <HAL_DMA_Init+0x694>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01d      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a44      	ldr	r2, [pc, #272]	@ (8002a58 <HAL_DMA_Init+0x698>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d018      	beq.n	800297e <HAL_DMA_Init+0x5be>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a42      	ldr	r2, [pc, #264]	@ (8002a5c <HAL_DMA_Init+0x69c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a41      	ldr	r2, [pc, #260]	@ (8002a60 <HAL_DMA_Init+0x6a0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00e      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a3f      	ldr	r2, [pc, #252]	@ (8002a64 <HAL_DMA_Init+0x6a4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d009      	beq.n	800297e <HAL_DMA_Init+0x5be>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a3e      	ldr	r2, [pc, #248]	@ (8002a68 <HAL_DMA_Init+0x6a8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d004      	beq.n	800297e <HAL_DMA_Init+0x5be>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a3c      	ldr	r2, [pc, #240]	@ (8002a6c <HAL_DMA_Init+0x6ac>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d101      	bne.n	8002982 <HAL_DMA_Init+0x5c2>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_DMA_Init+0x5c4>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d032      	beq.n	80029ee <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f001 f8c9 	bl	8003b20 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b80      	cmp	r3, #128	@ 0x80
 8002994:	d102      	bne.n	800299c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80029b0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d010      	beq.n	80029dc <HAL_DMA_Init+0x61c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d80c      	bhi.n	80029dc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f001 f946 	bl	8003c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	e008      	b.n	80029ee <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	a7fdabf8 	.word	0xa7fdabf8
 8002a0c:	cccccccd 	.word	0xcccccccd
 8002a10:	40020010 	.word	0x40020010
 8002a14:	40020028 	.word	0x40020028
 8002a18:	40020040 	.word	0x40020040
 8002a1c:	40020058 	.word	0x40020058
 8002a20:	40020070 	.word	0x40020070
 8002a24:	40020088 	.word	0x40020088
 8002a28:	400200a0 	.word	0x400200a0
 8002a2c:	400200b8 	.word	0x400200b8
 8002a30:	40020410 	.word	0x40020410
 8002a34:	40020428 	.word	0x40020428
 8002a38:	40020440 	.word	0x40020440
 8002a3c:	40020458 	.word	0x40020458
 8002a40:	40020470 	.word	0x40020470
 8002a44:	40020488 	.word	0x40020488
 8002a48:	400204a0 	.word	0x400204a0
 8002a4c:	400204b8 	.word	0x400204b8
 8002a50:	58025408 	.word	0x58025408
 8002a54:	5802541c 	.word	0x5802541c
 8002a58:	58025430 	.word	0x58025430
 8002a5c:	58025444 	.word	0x58025444
 8002a60:	58025458 	.word	0x58025458
 8002a64:	5802546c 	.word	0x5802546c
 8002a68:	58025480 	.word	0x58025480
 8002a6c:	58025494 	.word	0x58025494

08002a70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	@ 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a7c:	4b67      	ldr	r3, [pc, #412]	@ (8002c1c <HAL_DMA_IRQHandler+0x1ac>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a67      	ldr	r2, [pc, #412]	@ (8002c20 <HAL_DMA_IRQHandler+0x1b0>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	0a9b      	lsrs	r3, r3, #10
 8002a88:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a94:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5f      	ldr	r2, [pc, #380]	@ (8002c24 <HAL_DMA_IRQHandler+0x1b4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d04a      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a5d      	ldr	r2, [pc, #372]	@ (8002c28 <HAL_DMA_IRQHandler+0x1b8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d045      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a5c      	ldr	r2, [pc, #368]	@ (8002c2c <HAL_DMA_IRQHandler+0x1bc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d040      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a5a      	ldr	r2, [pc, #360]	@ (8002c30 <HAL_DMA_IRQHandler+0x1c0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d03b      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a59      	ldr	r2, [pc, #356]	@ (8002c34 <HAL_DMA_IRQHandler+0x1c4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d036      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a57      	ldr	r2, [pc, #348]	@ (8002c38 <HAL_DMA_IRQHandler+0x1c8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d031      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a56      	ldr	r2, [pc, #344]	@ (8002c3c <HAL_DMA_IRQHandler+0x1cc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d02c      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a54      	ldr	r2, [pc, #336]	@ (8002c40 <HAL_DMA_IRQHandler+0x1d0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d027      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a53      	ldr	r2, [pc, #332]	@ (8002c44 <HAL_DMA_IRQHandler+0x1d4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d022      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a51      	ldr	r2, [pc, #324]	@ (8002c48 <HAL_DMA_IRQHandler+0x1d8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01d      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a50      	ldr	r2, [pc, #320]	@ (8002c4c <HAL_DMA_IRQHandler+0x1dc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d018      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a4e      	ldr	r2, [pc, #312]	@ (8002c50 <HAL_DMA_IRQHandler+0x1e0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a4d      	ldr	r2, [pc, #308]	@ (8002c54 <HAL_DMA_IRQHandler+0x1e4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00e      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a4b      	ldr	r2, [pc, #300]	@ (8002c58 <HAL_DMA_IRQHandler+0x1e8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d009      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a4a      	ldr	r2, [pc, #296]	@ (8002c5c <HAL_DMA_IRQHandler+0x1ec>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d004      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a48      	ldr	r2, [pc, #288]	@ (8002c60 <HAL_DMA_IRQHandler+0x1f0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_DMA_IRQHandler+0xd6>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_DMA_IRQHandler+0xd8>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 842b 	beq.w	80033a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2208      	movs	r2, #8
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 80a2 	beq.w	8002ca8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a2e      	ldr	r2, [pc, #184]	@ (8002c24 <HAL_DMA_IRQHandler+0x1b4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d04a      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a2d      	ldr	r2, [pc, #180]	@ (8002c28 <HAL_DMA_IRQHandler+0x1b8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d045      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c2c <HAL_DMA_IRQHandler+0x1bc>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d040      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2a      	ldr	r2, [pc, #168]	@ (8002c30 <HAL_DMA_IRQHandler+0x1c0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d03b      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a28      	ldr	r2, [pc, #160]	@ (8002c34 <HAL_DMA_IRQHandler+0x1c4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d036      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a27      	ldr	r2, [pc, #156]	@ (8002c38 <HAL_DMA_IRQHandler+0x1c8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d031      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a25      	ldr	r2, [pc, #148]	@ (8002c3c <HAL_DMA_IRQHandler+0x1cc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d02c      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a24      	ldr	r2, [pc, #144]	@ (8002c40 <HAL_DMA_IRQHandler+0x1d0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d027      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a22      	ldr	r2, [pc, #136]	@ (8002c44 <HAL_DMA_IRQHandler+0x1d4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d022      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a21      	ldr	r2, [pc, #132]	@ (8002c48 <HAL_DMA_IRQHandler+0x1d8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d01d      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c4c <HAL_DMA_IRQHandler+0x1dc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d018      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c50 <HAL_DMA_IRQHandler+0x1e0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d013      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c54 <HAL_DMA_IRQHandler+0x1e4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00e      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1b      	ldr	r2, [pc, #108]	@ (8002c58 <HAL_DMA_IRQHandler+0x1e8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d009      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a19      	ldr	r2, [pc, #100]	@ (8002c5c <HAL_DMA_IRQHandler+0x1ec>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d004      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a18      	ldr	r2, [pc, #96]	@ (8002c60 <HAL_DMA_IRQHandler+0x1f0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d12f      	bne.n	8002c64 <HAL_DMA_IRQHandler+0x1f4>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	bf14      	ite	ne
 8002c12:	2301      	movne	r3, #1
 8002c14:	2300      	moveq	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	e02e      	b.n	8002c78 <HAL_DMA_IRQHandler+0x208>
 8002c1a:	bf00      	nop
 8002c1c:	24000000 	.word	0x24000000
 8002c20:	1b4e81b5 	.word	0x1b4e81b5
 8002c24:	40020010 	.word	0x40020010
 8002c28:	40020028 	.word	0x40020028
 8002c2c:	40020040 	.word	0x40020040
 8002c30:	40020058 	.word	0x40020058
 8002c34:	40020070 	.word	0x40020070
 8002c38:	40020088 	.word	0x40020088
 8002c3c:	400200a0 	.word	0x400200a0
 8002c40:	400200b8 	.word	0x400200b8
 8002c44:	40020410 	.word	0x40020410
 8002c48:	40020428 	.word	0x40020428
 8002c4c:	40020440 	.word	0x40020440
 8002c50:	40020458 	.word	0x40020458
 8002c54:	40020470 	.word	0x40020470
 8002c58:	40020488 	.word	0x40020488
 8002c5c:	400204a0 	.word	0x400204a0
 8002c60:	400204b8 	.word	0x400204b8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf14      	ite	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	2300      	moveq	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d015      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0204 	bic.w	r2, r2, #4
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	2208      	movs	r2, #8
 8002c96:	409a      	lsls	r2, r3
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cac:	f003 031f 	and.w	r3, r3, #31
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d06e      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a69      	ldr	r2, [pc, #420]	@ (8002e68 <HAL_DMA_IRQHandler+0x3f8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d04a      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a67      	ldr	r2, [pc, #412]	@ (8002e6c <HAL_DMA_IRQHandler+0x3fc>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d045      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a66      	ldr	r2, [pc, #408]	@ (8002e70 <HAL_DMA_IRQHandler+0x400>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d040      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a64      	ldr	r2, [pc, #400]	@ (8002e74 <HAL_DMA_IRQHandler+0x404>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d03b      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a63      	ldr	r2, [pc, #396]	@ (8002e78 <HAL_DMA_IRQHandler+0x408>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d036      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a61      	ldr	r2, [pc, #388]	@ (8002e7c <HAL_DMA_IRQHandler+0x40c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d031      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a60      	ldr	r2, [pc, #384]	@ (8002e80 <HAL_DMA_IRQHandler+0x410>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d02c      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a5e      	ldr	r2, [pc, #376]	@ (8002e84 <HAL_DMA_IRQHandler+0x414>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d027      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a5d      	ldr	r2, [pc, #372]	@ (8002e88 <HAL_DMA_IRQHandler+0x418>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d022      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a5b      	ldr	r2, [pc, #364]	@ (8002e8c <HAL_DMA_IRQHandler+0x41c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01d      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a5a      	ldr	r2, [pc, #360]	@ (8002e90 <HAL_DMA_IRQHandler+0x420>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d018      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a58      	ldr	r2, [pc, #352]	@ (8002e94 <HAL_DMA_IRQHandler+0x424>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a57      	ldr	r2, [pc, #348]	@ (8002e98 <HAL_DMA_IRQHandler+0x428>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00e      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a55      	ldr	r2, [pc, #340]	@ (8002e9c <HAL_DMA_IRQHandler+0x42c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d009      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a54      	ldr	r2, [pc, #336]	@ (8002ea0 <HAL_DMA_IRQHandler+0x430>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d004      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a52      	ldr	r2, [pc, #328]	@ (8002ea4 <HAL_DMA_IRQHandler+0x434>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10a      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x304>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e003      	b.n	8002d7c <HAL_DMA_IRQHandler+0x30c>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00d      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	2201      	movs	r2, #1
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d94:	f043 0202 	orr.w	r2, r3, #2
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	2204      	movs	r2, #4
 8002da6:	409a      	lsls	r2, r3
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 808f 	beq.w	8002ed0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a2c      	ldr	r2, [pc, #176]	@ (8002e68 <HAL_DMA_IRQHandler+0x3f8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d04a      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8002e6c <HAL_DMA_IRQHandler+0x3fc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d045      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a29      	ldr	r2, [pc, #164]	@ (8002e70 <HAL_DMA_IRQHandler+0x400>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d040      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a27      	ldr	r2, [pc, #156]	@ (8002e74 <HAL_DMA_IRQHandler+0x404>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d03b      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a26      	ldr	r2, [pc, #152]	@ (8002e78 <HAL_DMA_IRQHandler+0x408>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d036      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a24      	ldr	r2, [pc, #144]	@ (8002e7c <HAL_DMA_IRQHandler+0x40c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d031      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a23      	ldr	r2, [pc, #140]	@ (8002e80 <HAL_DMA_IRQHandler+0x410>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d02c      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a21      	ldr	r2, [pc, #132]	@ (8002e84 <HAL_DMA_IRQHandler+0x414>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d027      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a20      	ldr	r2, [pc, #128]	@ (8002e88 <HAL_DMA_IRQHandler+0x418>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d022      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1e      	ldr	r2, [pc, #120]	@ (8002e8c <HAL_DMA_IRQHandler+0x41c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d01d      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e90 <HAL_DMA_IRQHandler+0x420>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d018      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1b      	ldr	r2, [pc, #108]	@ (8002e94 <HAL_DMA_IRQHandler+0x424>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8002e98 <HAL_DMA_IRQHandler+0x428>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00e      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a18      	ldr	r2, [pc, #96]	@ (8002e9c <HAL_DMA_IRQHandler+0x42c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d009      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a17      	ldr	r2, [pc, #92]	@ (8002ea0 <HAL_DMA_IRQHandler+0x430>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d004      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a15      	ldr	r2, [pc, #84]	@ (8002ea4 <HAL_DMA_IRQHandler+0x434>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d12a      	bne.n	8002ea8 <HAL_DMA_IRQHandler+0x438>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf14      	ite	ne
 8002e60:	2301      	movne	r3, #1
 8002e62:	2300      	moveq	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	e023      	b.n	8002eb0 <HAL_DMA_IRQHandler+0x440>
 8002e68:	40020010 	.word	0x40020010
 8002e6c:	40020028 	.word	0x40020028
 8002e70:	40020040 	.word	0x40020040
 8002e74:	40020058 	.word	0x40020058
 8002e78:	40020070 	.word	0x40020070
 8002e7c:	40020088 	.word	0x40020088
 8002e80:	400200a0 	.word	0x400200a0
 8002e84:	400200b8 	.word	0x400200b8
 8002e88:	40020410 	.word	0x40020410
 8002e8c:	40020428 	.word	0x40020428
 8002e90:	40020440 	.word	0x40020440
 8002e94:	40020458 	.word	0x40020458
 8002e98:	40020470 	.word	0x40020470
 8002e9c:	40020488 	.word	0x40020488
 8002ea0:	400204a0 	.word	0x400204a0
 8002ea4:	400204b8 	.word	0x400204b8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	2210      	movs	r2, #16
 8002eda:	409a      	lsls	r2, r3
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80a6 	beq.w	8003032 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a85      	ldr	r2, [pc, #532]	@ (8003100 <HAL_DMA_IRQHandler+0x690>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d04a      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a83      	ldr	r2, [pc, #524]	@ (8003104 <HAL_DMA_IRQHandler+0x694>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d045      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a82      	ldr	r2, [pc, #520]	@ (8003108 <HAL_DMA_IRQHandler+0x698>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d040      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a80      	ldr	r2, [pc, #512]	@ (800310c <HAL_DMA_IRQHandler+0x69c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d03b      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a7f      	ldr	r2, [pc, #508]	@ (8003110 <HAL_DMA_IRQHandler+0x6a0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d036      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a7d      	ldr	r2, [pc, #500]	@ (8003114 <HAL_DMA_IRQHandler+0x6a4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d031      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7c      	ldr	r2, [pc, #496]	@ (8003118 <HAL_DMA_IRQHandler+0x6a8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d02c      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a7a      	ldr	r2, [pc, #488]	@ (800311c <HAL_DMA_IRQHandler+0x6ac>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d027      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a79      	ldr	r2, [pc, #484]	@ (8003120 <HAL_DMA_IRQHandler+0x6b0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d022      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a77      	ldr	r2, [pc, #476]	@ (8003124 <HAL_DMA_IRQHandler+0x6b4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d01d      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a76      	ldr	r2, [pc, #472]	@ (8003128 <HAL_DMA_IRQHandler+0x6b8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d018      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a74      	ldr	r2, [pc, #464]	@ (800312c <HAL_DMA_IRQHandler+0x6bc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a73      	ldr	r2, [pc, #460]	@ (8003130 <HAL_DMA_IRQHandler+0x6c0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00e      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a71      	ldr	r2, [pc, #452]	@ (8003134 <HAL_DMA_IRQHandler+0x6c4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d009      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a70      	ldr	r2, [pc, #448]	@ (8003138 <HAL_DMA_IRQHandler+0x6c8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d004      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a6e      	ldr	r2, [pc, #440]	@ (800313c <HAL_DMA_IRQHandler+0x6cc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d10a      	bne.n	8002f9c <HAL_DMA_IRQHandler+0x52c>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf14      	ite	ne
 8002f94:	2301      	movne	r3, #1
 8002f96:	2300      	moveq	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e009      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x540>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf14      	ite	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	2300      	moveq	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d03e      	beq.n	8003032 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d018      	beq.n	8003004 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d108      	bne.n	8002ff2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d024      	beq.n	8003032 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
 8002ff0:	e01f      	b.n	8003032 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d01b      	beq.n	8003032 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	4798      	blx	r3
 8003002:	e016      	b.n	8003032 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d107      	bne.n	8003022 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0208 	bic.w	r2, r2, #8
 8003020:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	2220      	movs	r2, #32
 800303c:	409a      	lsls	r2, r3
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8110 	beq.w	8003268 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a2c      	ldr	r2, [pc, #176]	@ (8003100 <HAL_DMA_IRQHandler+0x690>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d04a      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2b      	ldr	r2, [pc, #172]	@ (8003104 <HAL_DMA_IRQHandler+0x694>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d045      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a29      	ldr	r2, [pc, #164]	@ (8003108 <HAL_DMA_IRQHandler+0x698>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d040      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a28      	ldr	r2, [pc, #160]	@ (800310c <HAL_DMA_IRQHandler+0x69c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d03b      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a26      	ldr	r2, [pc, #152]	@ (8003110 <HAL_DMA_IRQHandler+0x6a0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d036      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a25      	ldr	r2, [pc, #148]	@ (8003114 <HAL_DMA_IRQHandler+0x6a4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d031      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a23      	ldr	r2, [pc, #140]	@ (8003118 <HAL_DMA_IRQHandler+0x6a8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d02c      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a22      	ldr	r2, [pc, #136]	@ (800311c <HAL_DMA_IRQHandler+0x6ac>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d027      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a20      	ldr	r2, [pc, #128]	@ (8003120 <HAL_DMA_IRQHandler+0x6b0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d022      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003124 <HAL_DMA_IRQHandler+0x6b4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d01d      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003128 <HAL_DMA_IRQHandler+0x6b8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d018      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1c      	ldr	r2, [pc, #112]	@ (800312c <HAL_DMA_IRQHandler+0x6bc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d013      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003130 <HAL_DMA_IRQHandler+0x6c0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00e      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a19      	ldr	r2, [pc, #100]	@ (8003134 <HAL_DMA_IRQHandler+0x6c4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d009      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a17      	ldr	r2, [pc, #92]	@ (8003138 <HAL_DMA_IRQHandler+0x6c8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d004      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a16      	ldr	r2, [pc, #88]	@ (800313c <HAL_DMA_IRQHandler+0x6cc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d12b      	bne.n	8003140 <HAL_DMA_IRQHandler+0x6d0>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bf14      	ite	ne
 80030f6:	2301      	movne	r3, #1
 80030f8:	2300      	moveq	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	e02a      	b.n	8003154 <HAL_DMA_IRQHandler+0x6e4>
 80030fe:	bf00      	nop
 8003100:	40020010 	.word	0x40020010
 8003104:	40020028 	.word	0x40020028
 8003108:	40020040 	.word	0x40020040
 800310c:	40020058 	.word	0x40020058
 8003110:	40020070 	.word	0x40020070
 8003114:	40020088 	.word	0x40020088
 8003118:	400200a0 	.word	0x400200a0
 800311c:	400200b8 	.word	0x400200b8
 8003120:	40020410 	.word	0x40020410
 8003124:	40020428 	.word	0x40020428
 8003128:	40020440 	.word	0x40020440
 800312c:	40020458 	.word	0x40020458
 8003130:	40020470 	.word	0x40020470
 8003134:	40020488 	.word	0x40020488
 8003138:	400204a0 	.word	0x400204a0
 800313c:	400204b8 	.word	0x400204b8
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	bf14      	ite	ne
 800314e:	2301      	movne	r3, #1
 8003150:	2300      	moveq	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8087 	beq.w	8003268 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	2220      	movs	r2, #32
 8003164:	409a      	lsls	r2, r3
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b04      	cmp	r3, #4
 8003174:	d139      	bne.n	80031ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0216 	bic.w	r2, r2, #22
 8003184:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003194:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d103      	bne.n	80031a6 <HAL_DMA_IRQHandler+0x736>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0208 	bic.w	r2, r2, #8
 80031b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	223f      	movs	r2, #63	@ 0x3f
 80031c0:	409a      	lsls	r2, r3
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 834a 	beq.w	8003874 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
          }
          return;
 80031e8:	e344      	b.n	8003874 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d018      	beq.n	800322a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d108      	bne.n	8003218 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320a:	2b00      	cmp	r3, #0
 800320c:	d02c      	beq.n	8003268 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	4798      	blx	r3
 8003216:	e027      	b.n	8003268 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d023      	beq.n	8003268 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
 8003228:	e01e      	b.n	8003268 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10f      	bne.n	8003258 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0210 	bic.w	r2, r2, #16
 8003246:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8306 	beq.w	800387e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 8088 	beq.w	8003390 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2204      	movs	r2, #4
 8003284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a7a      	ldr	r2, [pc, #488]	@ (8003478 <HAL_DMA_IRQHandler+0xa08>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d04a      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a79      	ldr	r2, [pc, #484]	@ (800347c <HAL_DMA_IRQHandler+0xa0c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d045      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a77      	ldr	r2, [pc, #476]	@ (8003480 <HAL_DMA_IRQHandler+0xa10>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d040      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a76      	ldr	r2, [pc, #472]	@ (8003484 <HAL_DMA_IRQHandler+0xa14>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d03b      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a74      	ldr	r2, [pc, #464]	@ (8003488 <HAL_DMA_IRQHandler+0xa18>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d036      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a73      	ldr	r2, [pc, #460]	@ (800348c <HAL_DMA_IRQHandler+0xa1c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d031      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a71      	ldr	r2, [pc, #452]	@ (8003490 <HAL_DMA_IRQHandler+0xa20>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d02c      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a70      	ldr	r2, [pc, #448]	@ (8003494 <HAL_DMA_IRQHandler+0xa24>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d027      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003498 <HAL_DMA_IRQHandler+0xa28>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d022      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6d      	ldr	r2, [pc, #436]	@ (800349c <HAL_DMA_IRQHandler+0xa2c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d01d      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a6b      	ldr	r2, [pc, #428]	@ (80034a0 <HAL_DMA_IRQHandler+0xa30>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d018      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a6a      	ldr	r2, [pc, #424]	@ (80034a4 <HAL_DMA_IRQHandler+0xa34>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d013      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a68      	ldr	r2, [pc, #416]	@ (80034a8 <HAL_DMA_IRQHandler+0xa38>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00e      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a67      	ldr	r2, [pc, #412]	@ (80034ac <HAL_DMA_IRQHandler+0xa3c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d009      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a65      	ldr	r2, [pc, #404]	@ (80034b0 <HAL_DMA_IRQHandler+0xa40>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d004      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a64      	ldr	r2, [pc, #400]	@ (80034b4 <HAL_DMA_IRQHandler+0xa44>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d108      	bne.n	800333a <HAL_DMA_IRQHandler+0x8ca>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e007      	b.n	800334a <HAL_DMA_IRQHandler+0x8da>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	3301      	adds	r3, #1
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003352:	429a      	cmp	r2, r3
 8003354:	d307      	bcc.n	8003366 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f2      	bne.n	800334a <HAL_DMA_IRQHandler+0x8da>
 8003364:	e000      	b.n	8003368 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003366:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d004      	beq.n	8003380 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2203      	movs	r2, #3
 800337a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800337e:	e003      	b.n	8003388 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8272 	beq.w	800387e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
 80033a2:	e26c      	b.n	800387e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a43      	ldr	r2, [pc, #268]	@ (80034b8 <HAL_DMA_IRQHandler+0xa48>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d022      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x984>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a42      	ldr	r2, [pc, #264]	@ (80034bc <HAL_DMA_IRQHandler+0xa4c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d01d      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x984>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a40      	ldr	r2, [pc, #256]	@ (80034c0 <HAL_DMA_IRQHandler+0xa50>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d018      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x984>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a3f      	ldr	r2, [pc, #252]	@ (80034c4 <HAL_DMA_IRQHandler+0xa54>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x984>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a3d      	ldr	r2, [pc, #244]	@ (80034c8 <HAL_DMA_IRQHandler+0xa58>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00e      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x984>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a3c      	ldr	r2, [pc, #240]	@ (80034cc <HAL_DMA_IRQHandler+0xa5c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d009      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x984>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a3a      	ldr	r2, [pc, #232]	@ (80034d0 <HAL_DMA_IRQHandler+0xa60>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d004      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x984>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a39      	ldr	r2, [pc, #228]	@ (80034d4 <HAL_DMA_IRQHandler+0xa64>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d101      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x988>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <HAL_DMA_IRQHandler+0x98a>
 80033f8:	2300      	movs	r3, #0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 823f 	beq.w	800387e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	2204      	movs	r2, #4
 8003412:	409a      	lsls	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80cd 	beq.w	80035b8 <HAL_DMA_IRQHandler+0xb48>
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80c7 	beq.w	80035b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	2204      	movs	r2, #4
 8003434:	409a      	lsls	r2, r3
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d049      	beq.n	80034d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8210 	beq.w	8003878 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003460:	e20a      	b.n	8003878 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8206 	beq.w	8003878 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003474:	e200      	b.n	8003878 <HAL_DMA_IRQHandler+0xe08>
 8003476:	bf00      	nop
 8003478:	40020010 	.word	0x40020010
 800347c:	40020028 	.word	0x40020028
 8003480:	40020040 	.word	0x40020040
 8003484:	40020058 	.word	0x40020058
 8003488:	40020070 	.word	0x40020070
 800348c:	40020088 	.word	0x40020088
 8003490:	400200a0 	.word	0x400200a0
 8003494:	400200b8 	.word	0x400200b8
 8003498:	40020410 	.word	0x40020410
 800349c:	40020428 	.word	0x40020428
 80034a0:	40020440 	.word	0x40020440
 80034a4:	40020458 	.word	0x40020458
 80034a8:	40020470 	.word	0x40020470
 80034ac:	40020488 	.word	0x40020488
 80034b0:	400204a0 	.word	0x400204a0
 80034b4:	400204b8 	.word	0x400204b8
 80034b8:	58025408 	.word	0x58025408
 80034bc:	5802541c 	.word	0x5802541c
 80034c0:	58025430 	.word	0x58025430
 80034c4:	58025444 	.word	0x58025444
 80034c8:	58025458 	.word	0x58025458
 80034cc:	5802546c 	.word	0x5802546c
 80034d0:	58025480 	.word	0x58025480
 80034d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d160      	bne.n	80035a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a7f      	ldr	r2, [pc, #508]	@ (80036e4 <HAL_DMA_IRQHandler+0xc74>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d04a      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a7d      	ldr	r2, [pc, #500]	@ (80036e8 <HAL_DMA_IRQHandler+0xc78>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d045      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a7c      	ldr	r2, [pc, #496]	@ (80036ec <HAL_DMA_IRQHandler+0xc7c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d040      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a7a      	ldr	r2, [pc, #488]	@ (80036f0 <HAL_DMA_IRQHandler+0xc80>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d03b      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a79      	ldr	r2, [pc, #484]	@ (80036f4 <HAL_DMA_IRQHandler+0xc84>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d036      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a77      	ldr	r2, [pc, #476]	@ (80036f8 <HAL_DMA_IRQHandler+0xc88>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d031      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a76      	ldr	r2, [pc, #472]	@ (80036fc <HAL_DMA_IRQHandler+0xc8c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d02c      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a74      	ldr	r2, [pc, #464]	@ (8003700 <HAL_DMA_IRQHandler+0xc90>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d027      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a73      	ldr	r2, [pc, #460]	@ (8003704 <HAL_DMA_IRQHandler+0xc94>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d022      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a71      	ldr	r2, [pc, #452]	@ (8003708 <HAL_DMA_IRQHandler+0xc98>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01d      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a70      	ldr	r2, [pc, #448]	@ (800370c <HAL_DMA_IRQHandler+0xc9c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d018      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a6e      	ldr	r2, [pc, #440]	@ (8003710 <HAL_DMA_IRQHandler+0xca0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a6d      	ldr	r2, [pc, #436]	@ (8003714 <HAL_DMA_IRQHandler+0xca4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00e      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a6b      	ldr	r2, [pc, #428]	@ (8003718 <HAL_DMA_IRQHandler+0xca8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d009      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a6a      	ldr	r2, [pc, #424]	@ (800371c <HAL_DMA_IRQHandler+0xcac>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a68      	ldr	r2, [pc, #416]	@ (8003720 <HAL_DMA_IRQHandler+0xcb0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d108      	bne.n	8003594 <HAL_DMA_IRQHandler+0xb24>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0208 	bic.w	r2, r2, #8
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	e007      	b.n	80035a4 <HAL_DMA_IRQHandler+0xb34>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0204 	bic.w	r2, r2, #4
 80035a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8165 	beq.w	8003878 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035b6:	e15f      	b.n	8003878 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	2202      	movs	r2, #2
 80035c2:	409a      	lsls	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80c5 	beq.w	8003758 <HAL_DMA_IRQHandler+0xce8>
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80bf 	beq.w	8003758 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	2202      	movs	r2, #2
 80035e4:	409a      	lsls	r2, r3
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d018      	beq.n	8003626 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 813a 	beq.w	800387c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003610:	e134      	b.n	800387c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8130 	beq.w	800387c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003624:	e12a      	b.n	800387c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	f040 8089 	bne.w	8003744 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a2b      	ldr	r2, [pc, #172]	@ (80036e4 <HAL_DMA_IRQHandler+0xc74>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d04a      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a29      	ldr	r2, [pc, #164]	@ (80036e8 <HAL_DMA_IRQHandler+0xc78>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d045      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a28      	ldr	r2, [pc, #160]	@ (80036ec <HAL_DMA_IRQHandler+0xc7c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d040      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a26      	ldr	r2, [pc, #152]	@ (80036f0 <HAL_DMA_IRQHandler+0xc80>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d03b      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a25      	ldr	r2, [pc, #148]	@ (80036f4 <HAL_DMA_IRQHandler+0xc84>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d036      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a23      	ldr	r2, [pc, #140]	@ (80036f8 <HAL_DMA_IRQHandler+0xc88>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d031      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a22      	ldr	r2, [pc, #136]	@ (80036fc <HAL_DMA_IRQHandler+0xc8c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d02c      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a20      	ldr	r2, [pc, #128]	@ (8003700 <HAL_DMA_IRQHandler+0xc90>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d027      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1f      	ldr	r2, [pc, #124]	@ (8003704 <HAL_DMA_IRQHandler+0xc94>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d022      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1d      	ldr	r2, [pc, #116]	@ (8003708 <HAL_DMA_IRQHandler+0xc98>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d01d      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1c      	ldr	r2, [pc, #112]	@ (800370c <HAL_DMA_IRQHandler+0xc9c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d018      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003710 <HAL_DMA_IRQHandler+0xca0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a19      	ldr	r2, [pc, #100]	@ (8003714 <HAL_DMA_IRQHandler+0xca4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00e      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a17      	ldr	r2, [pc, #92]	@ (8003718 <HAL_DMA_IRQHandler+0xca8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a16      	ldr	r2, [pc, #88]	@ (800371c <HAL_DMA_IRQHandler+0xcac>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a14      	ldr	r2, [pc, #80]	@ (8003720 <HAL_DMA_IRQHandler+0xcb0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d128      	bne.n	8003724 <HAL_DMA_IRQHandler+0xcb4>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0214 	bic.w	r2, r2, #20
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e027      	b.n	8003734 <HAL_DMA_IRQHandler+0xcc4>
 80036e4:	40020010 	.word	0x40020010
 80036e8:	40020028 	.word	0x40020028
 80036ec:	40020040 	.word	0x40020040
 80036f0:	40020058 	.word	0x40020058
 80036f4:	40020070 	.word	0x40020070
 80036f8:	40020088 	.word	0x40020088
 80036fc:	400200a0 	.word	0x400200a0
 8003700:	400200b8 	.word	0x400200b8
 8003704:	40020410 	.word	0x40020410
 8003708:	40020428 	.word	0x40020428
 800370c:	40020440 	.word	0x40020440
 8003710:	40020458 	.word	0x40020458
 8003714:	40020470 	.word	0x40020470
 8003718:	40020488 	.word	0x40020488
 800371c:	400204a0 	.word	0x400204a0
 8003720:	400204b8 	.word	0x400204b8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 020a 	bic.w	r2, r2, #10
 8003732:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8097 	beq.w	800387c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003756:	e091      	b.n	800387c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	2208      	movs	r2, #8
 8003762:	409a      	lsls	r2, r3
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8088 	beq.w	800387e <HAL_DMA_IRQHandler+0xe0e>
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8082 	beq.w	800387e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a41      	ldr	r2, [pc, #260]	@ (8003884 <HAL_DMA_IRQHandler+0xe14>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d04a      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a3f      	ldr	r2, [pc, #252]	@ (8003888 <HAL_DMA_IRQHandler+0xe18>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d045      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a3e      	ldr	r2, [pc, #248]	@ (800388c <HAL_DMA_IRQHandler+0xe1c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d040      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a3c      	ldr	r2, [pc, #240]	@ (8003890 <HAL_DMA_IRQHandler+0xe20>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d03b      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003894 <HAL_DMA_IRQHandler+0xe24>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d036      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a39      	ldr	r2, [pc, #228]	@ (8003898 <HAL_DMA_IRQHandler+0xe28>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d031      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a38      	ldr	r2, [pc, #224]	@ (800389c <HAL_DMA_IRQHandler+0xe2c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d02c      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a36      	ldr	r2, [pc, #216]	@ (80038a0 <HAL_DMA_IRQHandler+0xe30>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d027      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a35      	ldr	r2, [pc, #212]	@ (80038a4 <HAL_DMA_IRQHandler+0xe34>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d022      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a33      	ldr	r2, [pc, #204]	@ (80038a8 <HAL_DMA_IRQHandler+0xe38>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01d      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a32      	ldr	r2, [pc, #200]	@ (80038ac <HAL_DMA_IRQHandler+0xe3c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d018      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a30      	ldr	r2, [pc, #192]	@ (80038b0 <HAL_DMA_IRQHandler+0xe40>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d013      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a2f      	ldr	r2, [pc, #188]	@ (80038b4 <HAL_DMA_IRQHandler+0xe44>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00e      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a2d      	ldr	r2, [pc, #180]	@ (80038b8 <HAL_DMA_IRQHandler+0xe48>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d009      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a2c      	ldr	r2, [pc, #176]	@ (80038bc <HAL_DMA_IRQHandler+0xe4c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d004      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a2a      	ldr	r2, [pc, #168]	@ (80038c0 <HAL_DMA_IRQHandler+0xe50>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d108      	bne.n	800382c <HAL_DMA_IRQHandler+0xdbc>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 021c 	bic.w	r2, r2, #28
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e007      	b.n	800383c <HAL_DMA_IRQHandler+0xdcc>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 020e 	bic.w	r2, r2, #14
 800383a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	2201      	movs	r2, #1
 8003846:	409a      	lsls	r2, r3
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
 8003872:	e004      	b.n	800387e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003874:	bf00      	nop
 8003876:	e002      	b.n	800387e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003878:	bf00      	nop
 800387a:	e000      	b.n	800387e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800387c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800387e:	3728      	adds	r7, #40	@ 0x28
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40020010 	.word	0x40020010
 8003888:	40020028 	.word	0x40020028
 800388c:	40020040 	.word	0x40020040
 8003890:	40020058 	.word	0x40020058
 8003894:	40020070 	.word	0x40020070
 8003898:	40020088 	.word	0x40020088
 800389c:	400200a0 	.word	0x400200a0
 80038a0:	400200b8 	.word	0x400200b8
 80038a4:	40020410 	.word	0x40020410
 80038a8:	40020428 	.word	0x40020428
 80038ac:	40020440 	.word	0x40020440
 80038b0:	40020458 	.word	0x40020458
 80038b4:	40020470 	.word	0x40020470
 80038b8:	40020488 	.word	0x40020488
 80038bc:	400204a0 	.word	0x400204a0
 80038c0:	400204b8 	.word	0x400204b8

080038c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a42      	ldr	r2, [pc, #264]	@ (80039dc <DMA_CalcBaseAndBitshift+0x118>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d04a      	beq.n	800396c <DMA_CalcBaseAndBitshift+0xa8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a41      	ldr	r2, [pc, #260]	@ (80039e0 <DMA_CalcBaseAndBitshift+0x11c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d045      	beq.n	800396c <DMA_CalcBaseAndBitshift+0xa8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a3f      	ldr	r2, [pc, #252]	@ (80039e4 <DMA_CalcBaseAndBitshift+0x120>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d040      	beq.n	800396c <DMA_CalcBaseAndBitshift+0xa8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a3e      	ldr	r2, [pc, #248]	@ (80039e8 <DMA_CalcBaseAndBitshift+0x124>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d03b      	beq.n	800396c <DMA_CalcBaseAndBitshift+0xa8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a3c      	ldr	r2, [pc, #240]	@ (80039ec <DMA_CalcBaseAndBitshift+0x128>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d036      	beq.n	800396c <DMA_CalcBaseAndBitshift+0xa8>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a3b      	ldr	r2, [pc, #236]	@ (80039f0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d031      	beq.n	800396c <DMA_CalcBaseAndBitshift+0xa8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a39      	ldr	r2, [pc, #228]	@ (80039f4 <DMA_CalcBaseAndBitshift+0x130>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d02c      	beq.n	800396c <DMA_CalcBaseAndBitshift+0xa8>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a38      	ldr	r2, [pc, #224]	@ (80039f8 <DMA_CalcBaseAndBitshift+0x134>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d027      	beq.n	800396c <DMA_CalcBaseAndBitshift+0xa8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a36      	ldr	r2, [pc, #216]	@ (80039fc <DMA_CalcBaseAndBitshift+0x138>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d022      	beq.n	800396c <DMA_CalcBaseAndBitshift+0xa8>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a35      	ldr	r2, [pc, #212]	@ (8003a00 <DMA_CalcBaseAndBitshift+0x13c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d01d      	beq.n	800396c <DMA_CalcBaseAndBitshift+0xa8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a33      	ldr	r2, [pc, #204]	@ (8003a04 <DMA_CalcBaseAndBitshift+0x140>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d018      	beq.n	800396c <DMA_CalcBaseAndBitshift+0xa8>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a32      	ldr	r2, [pc, #200]	@ (8003a08 <DMA_CalcBaseAndBitshift+0x144>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d013      	beq.n	800396c <DMA_CalcBaseAndBitshift+0xa8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a30      	ldr	r2, [pc, #192]	@ (8003a0c <DMA_CalcBaseAndBitshift+0x148>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00e      	beq.n	800396c <DMA_CalcBaseAndBitshift+0xa8>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a2f      	ldr	r2, [pc, #188]	@ (8003a10 <DMA_CalcBaseAndBitshift+0x14c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d009      	beq.n	800396c <DMA_CalcBaseAndBitshift+0xa8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a14 <DMA_CalcBaseAndBitshift+0x150>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <DMA_CalcBaseAndBitshift+0xa8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a2c      	ldr	r2, [pc, #176]	@ (8003a18 <DMA_CalcBaseAndBitshift+0x154>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d101      	bne.n	8003970 <DMA_CalcBaseAndBitshift+0xac>
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <DMA_CalcBaseAndBitshift+0xae>
 8003970:	2300      	movs	r3, #0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d024      	beq.n	80039c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	3b10      	subs	r3, #16
 800397e:	4a27      	ldr	r2, [pc, #156]	@ (8003a1c <DMA_CalcBaseAndBitshift+0x158>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	4a24      	ldr	r2, [pc, #144]	@ (8003a20 <DMA_CalcBaseAndBitshift+0x15c>)
 8003990:	5cd3      	ldrb	r3, [r2, r3]
 8003992:	461a      	mov	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b03      	cmp	r3, #3
 800399c:	d908      	bls.n	80039b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a24 <DMA_CalcBaseAndBitshift+0x160>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	1d1a      	adds	r2, r3, #4
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80039ae:	e00d      	b.n	80039cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a24 <DMA_CalcBaseAndBitshift+0x160>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80039be:	e005      	b.n	80039cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	40020010 	.word	0x40020010
 80039e0:	40020028 	.word	0x40020028
 80039e4:	40020040 	.word	0x40020040
 80039e8:	40020058 	.word	0x40020058
 80039ec:	40020070 	.word	0x40020070
 80039f0:	40020088 	.word	0x40020088
 80039f4:	400200a0 	.word	0x400200a0
 80039f8:	400200b8 	.word	0x400200b8
 80039fc:	40020410 	.word	0x40020410
 8003a00:	40020428 	.word	0x40020428
 8003a04:	40020440 	.word	0x40020440
 8003a08:	40020458 	.word	0x40020458
 8003a0c:	40020470 	.word	0x40020470
 8003a10:	40020488 	.word	0x40020488
 8003a14:	400204a0 	.word	0x400204a0
 8003a18:	400204b8 	.word	0x400204b8
 8003a1c:	aaaaaaab 	.word	0xaaaaaaab
 8003a20:	0800a64c 	.word	0x0800a64c
 8003a24:	fffffc00 	.word	0xfffffc00

08003a28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d120      	bne.n	8003a7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d858      	bhi.n	8003af6 <DMA_CheckFifoParam+0xce>
 8003a44:	a201      	add	r2, pc, #4	@ (adr r2, 8003a4c <DMA_CheckFifoParam+0x24>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a5d 	.word	0x08003a5d
 8003a50:	08003a6f 	.word	0x08003a6f
 8003a54:	08003a5d 	.word	0x08003a5d
 8003a58:	08003af7 	.word	0x08003af7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d048      	beq.n	8003afa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a6c:	e045      	b.n	8003afa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a76:	d142      	bne.n	8003afe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a7c:	e03f      	b.n	8003afe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a86:	d123      	bne.n	8003ad0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d838      	bhi.n	8003b02 <DMA_CheckFifoParam+0xda>
 8003a90:	a201      	add	r2, pc, #4	@ (adr r2, 8003a98 <DMA_CheckFifoParam+0x70>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003aa9 	.word	0x08003aa9
 8003a9c:	08003aaf 	.word	0x08003aaf
 8003aa0:	08003aa9 	.word	0x08003aa9
 8003aa4:	08003ac1 	.word	0x08003ac1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
        break;
 8003aac:	e030      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d025      	beq.n	8003b06 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003abe:	e022      	b.n	8003b06 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ac8:	d11f      	bne.n	8003b0a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ace:	e01c      	b.n	8003b0a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d902      	bls.n	8003ade <DMA_CheckFifoParam+0xb6>
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d003      	beq.n	8003ae4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003adc:	e018      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ae2:	e015      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00e      	beq.n	8003b0e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
    break;
 8003af4:	e00b      	b.n	8003b0e <DMA_CheckFifoParam+0xe6>
        break;
 8003af6:	bf00      	nop
 8003af8:	e00a      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
        break;
 8003afa:	bf00      	nop
 8003afc:	e008      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
        break;
 8003afe:	bf00      	nop
 8003b00:	e006      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
        break;
 8003b02:	bf00      	nop
 8003b04:	e004      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
        break;
 8003b06:	bf00      	nop
 8003b08:	e002      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
        break;
 8003b0a:	bf00      	nop
 8003b0c:	e000      	b.n	8003b10 <DMA_CheckFifoParam+0xe8>
    break;
 8003b0e:	bf00      	nop
    }
  }

  return status;
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop

08003b20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a38      	ldr	r2, [pc, #224]	@ (8003c14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d022      	beq.n	8003b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a36      	ldr	r2, [pc, #216]	@ (8003c18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d01d      	beq.n	8003b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a35      	ldr	r2, [pc, #212]	@ (8003c1c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d018      	beq.n	8003b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a33      	ldr	r2, [pc, #204]	@ (8003c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a32      	ldr	r2, [pc, #200]	@ (8003c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00e      	beq.n	8003b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a30      	ldr	r2, [pc, #192]	@ (8003c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d009      	beq.n	8003b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8003c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a2d      	ldr	r2, [pc, #180]	@ (8003c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d101      	bne.n	8003b82 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003b82:	2300      	movs	r3, #0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01a      	beq.n	8003bbe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	3b08      	subs	r3, #8
 8003b90:	4a28      	ldr	r2, [pc, #160]	@ (8003c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	091b      	lsrs	r3, r3, #4
 8003b98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4b26      	ldr	r3, [pc, #152]	@ (8003c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a24      	ldr	r2, [pc, #144]	@ (8003c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003bac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003bbc:	e024      	b.n	8003c08 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	3b10      	subs	r3, #16
 8003bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d806      	bhi.n	8003be6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4a1b      	ldr	r2, [pc, #108]	@ (8003c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d902      	bls.n	8003be6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3308      	adds	r3, #8
 8003be4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4b18      	ldr	r3, [pc, #96]	@ (8003c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	461a      	mov	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a16      	ldr	r2, [pc, #88]	@ (8003c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003bf8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	2201      	movs	r2, #1
 8003c02:	409a      	lsls	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	58025408 	.word	0x58025408
 8003c18:	5802541c 	.word	0x5802541c
 8003c1c:	58025430 	.word	0x58025430
 8003c20:	58025444 	.word	0x58025444
 8003c24:	58025458 	.word	0x58025458
 8003c28:	5802546c 	.word	0x5802546c
 8003c2c:	58025480 	.word	0x58025480
 8003c30:	58025494 	.word	0x58025494
 8003c34:	cccccccd 	.word	0xcccccccd
 8003c38:	16009600 	.word	0x16009600
 8003c3c:	58025880 	.word	0x58025880
 8003c40:	aaaaaaab 	.word	0xaaaaaaab
 8003c44:	400204b8 	.word	0x400204b8
 8003c48:	4002040f 	.word	0x4002040f
 8003c4c:	10008200 	.word	0x10008200
 8003c50:	40020880 	.word	0x40020880

08003c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d04a      	beq.n	8003d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d847      	bhi.n	8003d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a25      	ldr	r2, [pc, #148]	@ (8003d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d022      	beq.n	8003cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a24      	ldr	r2, [pc, #144]	@ (8003d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d01d      	beq.n	8003cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a22      	ldr	r2, [pc, #136]	@ (8003d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d018      	beq.n	8003cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a21      	ldr	r2, [pc, #132]	@ (8003d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d013      	beq.n	8003cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8003d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00e      	beq.n	8003cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8003d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d009      	beq.n	8003cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1b      	ldr	r2, [pc, #108]	@ (8003d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d101      	bne.n	8003cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4b17      	ldr	r3, [pc, #92]	@ (8003d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a15      	ldr	r2, [pc, #84]	@ (8003d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003cdc:	671a      	str	r2, [r3, #112]	@ 0x70
 8003cde:	e009      	b.n	8003cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4b14      	ldr	r3, [pc, #80]	@ (8003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	461a      	mov	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a11      	ldr	r2, [pc, #68]	@ (8003d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003cf2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	58025408 	.word	0x58025408
 8003d10:	5802541c 	.word	0x5802541c
 8003d14:	58025430 	.word	0x58025430
 8003d18:	58025444 	.word	0x58025444
 8003d1c:	58025458 	.word	0x58025458
 8003d20:	5802546c 	.word	0x5802546c
 8003d24:	58025480 	.word	0x58025480
 8003d28:	58025494 	.word	0x58025494
 8003d2c:	1600963f 	.word	0x1600963f
 8003d30:	58025940 	.word	0x58025940
 8003d34:	1000823f 	.word	0x1000823f
 8003d38:	40020940 	.word	0x40020940

08003d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b089      	sub	sp, #36	@ 0x24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003d4a:	4b86      	ldr	r3, [pc, #536]	@ (8003f64 <HAL_GPIO_Init+0x228>)
 8003d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d4e:	e18c      	b.n	800406a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	2101      	movs	r1, #1
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 817e 	beq.w	8004064 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d005      	beq.n	8003d80 <HAL_GPIO_Init+0x44>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d130      	bne.n	8003de2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003db6:	2201      	movs	r2, #1
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	f003 0201 	and.w	r2, r3, #1
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d017      	beq.n	8003e1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	2203      	movs	r2, #3
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4013      	ands	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d123      	bne.n	8003e72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	08da      	lsrs	r2, r3, #3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3208      	adds	r2, #8
 8003e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	220f      	movs	r2, #15
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	08da      	lsrs	r2, r3, #3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3208      	adds	r2, #8
 8003e6c:	69b9      	ldr	r1, [r7, #24]
 8003e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 0203 	and.w	r2, r3, #3
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80d8 	beq.w	8004064 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8003f68 <HAL_GPIO_Init+0x22c>)
 8003eb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003eba:	4a2b      	ldr	r2, [pc, #172]	@ (8003f68 <HAL_GPIO_Init+0x22c>)
 8003ebc:	f043 0302 	orr.w	r3, r3, #2
 8003ec0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003ec4:	4b28      	ldr	r3, [pc, #160]	@ (8003f68 <HAL_GPIO_Init+0x22c>)
 8003ec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ed2:	4a26      	ldr	r2, [pc, #152]	@ (8003f6c <HAL_GPIO_Init+0x230>)
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	3302      	adds	r3, #2
 8003eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	220f      	movs	r2, #15
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f70 <HAL_GPIO_Init+0x234>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d04a      	beq.n	8003f94 <HAL_GPIO_Init+0x258>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a1c      	ldr	r2, [pc, #112]	@ (8003f74 <HAL_GPIO_Init+0x238>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d02b      	beq.n	8003f5e <HAL_GPIO_Init+0x222>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1b      	ldr	r2, [pc, #108]	@ (8003f78 <HAL_GPIO_Init+0x23c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d025      	beq.n	8003f5a <HAL_GPIO_Init+0x21e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a1a      	ldr	r2, [pc, #104]	@ (8003f7c <HAL_GPIO_Init+0x240>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01f      	beq.n	8003f56 <HAL_GPIO_Init+0x21a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a19      	ldr	r2, [pc, #100]	@ (8003f80 <HAL_GPIO_Init+0x244>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d019      	beq.n	8003f52 <HAL_GPIO_Init+0x216>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a18      	ldr	r2, [pc, #96]	@ (8003f84 <HAL_GPIO_Init+0x248>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_GPIO_Init+0x212>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a17      	ldr	r2, [pc, #92]	@ (8003f88 <HAL_GPIO_Init+0x24c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00d      	beq.n	8003f4a <HAL_GPIO_Init+0x20e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a16      	ldr	r2, [pc, #88]	@ (8003f8c <HAL_GPIO_Init+0x250>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d007      	beq.n	8003f46 <HAL_GPIO_Init+0x20a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a15      	ldr	r2, [pc, #84]	@ (8003f90 <HAL_GPIO_Init+0x254>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d101      	bne.n	8003f42 <HAL_GPIO_Init+0x206>
 8003f3e:	2309      	movs	r3, #9
 8003f40:	e029      	b.n	8003f96 <HAL_GPIO_Init+0x25a>
 8003f42:	230a      	movs	r3, #10
 8003f44:	e027      	b.n	8003f96 <HAL_GPIO_Init+0x25a>
 8003f46:	2307      	movs	r3, #7
 8003f48:	e025      	b.n	8003f96 <HAL_GPIO_Init+0x25a>
 8003f4a:	2306      	movs	r3, #6
 8003f4c:	e023      	b.n	8003f96 <HAL_GPIO_Init+0x25a>
 8003f4e:	2305      	movs	r3, #5
 8003f50:	e021      	b.n	8003f96 <HAL_GPIO_Init+0x25a>
 8003f52:	2304      	movs	r3, #4
 8003f54:	e01f      	b.n	8003f96 <HAL_GPIO_Init+0x25a>
 8003f56:	2303      	movs	r3, #3
 8003f58:	e01d      	b.n	8003f96 <HAL_GPIO_Init+0x25a>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e01b      	b.n	8003f96 <HAL_GPIO_Init+0x25a>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e019      	b.n	8003f96 <HAL_GPIO_Init+0x25a>
 8003f62:	bf00      	nop
 8003f64:	58000080 	.word	0x58000080
 8003f68:	58024400 	.word	0x58024400
 8003f6c:	58000400 	.word	0x58000400
 8003f70:	58020000 	.word	0x58020000
 8003f74:	58020400 	.word	0x58020400
 8003f78:	58020800 	.word	0x58020800
 8003f7c:	58020c00 	.word	0x58020c00
 8003f80:	58021000 	.word	0x58021000
 8003f84:	58021400 	.word	0x58021400
 8003f88:	58021800 	.word	0x58021800
 8003f8c:	58021c00 	.word	0x58021c00
 8003f90:	58022400 	.word	0x58022400
 8003f94:	2300      	movs	r3, #0
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	f002 0203 	and.w	r2, r2, #3
 8003f9c:	0092      	lsls	r2, r2, #2
 8003f9e:	4093      	lsls	r3, r2
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fa6:	4938      	ldr	r1, [pc, #224]	@ (8004088 <HAL_GPIO_Init+0x34c>)
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	089b      	lsrs	r3, r3, #2
 8003fac:	3302      	adds	r3, #2
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003fda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004008:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	43db      	mvns	r3, r3
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4013      	ands	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	3301      	adds	r3, #1
 8004068:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	fa22 f303 	lsr.w	r3, r2, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	f47f ae6b 	bne.w	8003d50 <HAL_GPIO_Init+0x14>
  }
}
 800407a:	bf00      	nop
 800407c:	bf00      	nop
 800407e:	3724      	adds	r7, #36	@ 0x24
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	58000400 	.word	0x58000400

0800408c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	807b      	strh	r3, [r7, #2]
 8004098:	4613      	mov	r3, r2
 800409a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800409c:	787b      	ldrb	r3, [r7, #1]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040a2:	887a      	ldrh	r2, [r7, #2]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80040a8:	e003      	b.n	80040b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	041a      	lsls	r2, r3, #16
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	619a      	str	r2, [r3, #24]
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af02      	add	r7, sp, #8
 80040c4:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e04f      	b.n	8004170 <HAL_HCD_Init+0xb2>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d106      	bne.n	80040ea <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7fd ff19 	bl	8001f1c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2203      	movs	r2, #3
 80040ee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f006 f8c2 	bl	800a280 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	7c1a      	ldrb	r2, [r3, #16]
 8004104:	f88d 2000 	strb.w	r2, [sp]
 8004108:	3304      	adds	r3, #4
 800410a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800410c:	f006 f846 	bl	800a19c <USB_CoreInit>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_HCD_Init+0x64>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2202      	movs	r2, #2
 800411a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e026      	b.n	8004170 <HAL_HCD_Init+0xb2>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2101      	movs	r1, #1
 8004128:	4618      	mov	r0, r3
 800412a:	f006 f8ba 	bl	800a2a2 <USB_SetCurrentMode>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_HCD_Init+0x82>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e017      	b.n	8004170 <HAL_HCD_Init+0xb2>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6818      	ldr	r0, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	7c1a      	ldrb	r2, [r3, #16]
 8004148:	f88d 2000 	strb.w	r2, [sp]
 800414c:	3304      	adds	r3, #4
 800414e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004150:	f006 f992 	bl	800a478 <USB_HostInit>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_HCD_Init+0xa8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e004      	b.n	8004170 <HAL_HCD_Init+0xb2>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e08b      	b.n	80042a2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fc fc6a 	bl	8000a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2224      	movs	r2, #36	@ 0x24
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d107      	bne.n	80041f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	e006      	b.n	8004200 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80041fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d108      	bne.n	800421a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	e007      	b.n	800422a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004228:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6859      	ldr	r1, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4b1d      	ldr	r3, [pc, #116]	@ (80042ac <HAL_I2C_Init+0x134>)
 8004236:	430b      	orrs	r3, r1
 8004238:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004248:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69d9      	ldr	r1, [r3, #28]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1a      	ldr	r2, [r3, #32]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0201 	orr.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	02008000 	.word	0x02008000

080042b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	d138      	bne.n	8004338 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e032      	b.n	800433a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2224      	movs	r2, #36	@ 0x24
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0201 	bic.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004302:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6819      	ldr	r1, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	e000      	b.n	800433a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004338:	2302      	movs	r3, #2
  }
}
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b20      	cmp	r3, #32
 800435a:	d139      	bne.n	80043d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004366:	2302      	movs	r3, #2
 8004368:	e033      	b.n	80043d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2224      	movs	r2, #36	@ 0x24
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0201 	bic.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004398:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	e000      	b.n	80043d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
  }
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80043ec:	f7fd fe84 	bl	80020f8 <HAL_GetTick>
 80043f0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
 80043fc:	e0a5      	b.n	800454a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004408:	2b00      	cmp	r3, #0
 800440a:	f040 809e 	bne.w	800454a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fc fdbc 	bl	8000f8c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004414:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f89d 	bl	8004558 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	4b4b      	ldr	r3, [pc, #300]	@ (8004554 <HAL_OSPI_Init+0x174>)
 8004426:	4013      	ands	r3, r2
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	68d1      	ldr	r1, [r2, #12]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6912      	ldr	r2, [r2, #16]
 8004430:	3a01      	subs	r2, #1
 8004432:	0412      	lsls	r2, r2, #16
 8004434:	4311      	orrs	r1, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6952      	ldr	r2, [r2, #20]
 800443a:	3a01      	subs	r2, #1
 800443c:	0212      	lsls	r2, r2, #8
 800443e:	4311      	orrs	r1, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004444:	4311      	orrs	r1, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	69d2      	ldr	r2, [r2, #28]
 800444a:	4311      	orrs	r1, r2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	430b      	orrs	r3, r1
 8004452:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1a      	ldr	r2, [r3, #32]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004484:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	3b01      	subs	r3, #1
 8004496:	021a      	lsls	r2, r3, #8
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2200      	movs	r2, #0
 80044aa:	2120      	movs	r1, #32
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fd4b 	bl	8004f48 <OSPI_WaitFlagStateUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d146      	bne.n	800454a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	1e5a      	subs	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80044f2:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0201 	orr.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d107      	bne.n	8004532 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0202 	orr.w	r2, r2, #2
 8004530:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800453a:	d103      	bne.n	8004544 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	651a      	str	r2, [r3, #80]	@ 0x50
 8004542:	e002      	b.n	800454a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800454a:	7bfb      	ldrb	r3, [r7, #15]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	f8e0f8f4 	.word	0xf8e0f8f4

08004558 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
	...

08004578 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b094      	sub	sp, #80	@ 0x50
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a9d      	ldr	r2, [pc, #628]	@ (800480c <HAL_OSPIM_Config+0x294>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d105      	bne.n	80045a6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 800459e:	2301      	movs	r3, #1
 80045a0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80045a4:	e004      	b.n	80045b0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80045a6:	2301      	movs	r3, #1
 80045a8:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80045b0:	2300      	movs	r3, #0
 80045b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80045b6:	e01d      	b.n	80045f4 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80045b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045bc:	3301      	adds	r3, #1
 80045be:	b2d8      	uxtb	r0, r3
 80045c0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80045c4:	f107 0114 	add.w	r1, r7, #20
 80045c8:	4613      	mov	r3, r2
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	4413      	add	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	440b      	add	r3, r1
 80045d2:	4619      	mov	r1, r3
 80045d4:	f000 fcf0 	bl	8004fb8 <OSPIM_GetConfig>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2208      	movs	r2, #8
 80045e8:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80045ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045ee:	3301      	adds	r3, #1
 80045f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80045f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d9dd      	bls.n	80045b8 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80045fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004600:	2b00      	cmp	r3, #0
 8004602:	f040 8495 	bne.w	8004f30 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004606:	4b81      	ldr	r3, [pc, #516]	@ (800480c <HAL_OSPIM_Config+0x294>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004612:	4b7e      	ldr	r3, [pc, #504]	@ (800480c <HAL_OSPIM_Config+0x294>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a7d      	ldr	r2, [pc, #500]	@ (800480c <HAL_OSPIM_Config+0x294>)
 8004618:	f023 0301 	bic.w	r3, r3, #1
 800461c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800461e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800462a:	4b79      	ldr	r3, [pc, #484]	@ (8004810 <HAL_OSPIM_Config+0x298>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004636:	4b76      	ldr	r3, [pc, #472]	@ (8004810 <HAL_OSPIM_Config+0x298>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a75      	ldr	r2, [pc, #468]	@ (8004810 <HAL_OSPIM_Config+0x298>)
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004642:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004646:	f043 0302 	orr.w	r3, r3, #2
 800464a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800464e:	4971      	ldr	r1, [pc, #452]	@ (8004814 <HAL_OSPIM_Config+0x29c>)
 8004650:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004652:	4613      	mov	r3, r2
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4413      	add	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	3350      	adds	r3, #80	@ 0x50
 800465c:	443b      	add	r3, r7
 800465e:	3b34      	subs	r3, #52	@ 0x34
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3b01      	subs	r3, #1
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	6859      	ldr	r1, [r3, #4]
 800466a:	486a      	ldr	r0, [pc, #424]	@ (8004814 <HAL_OSPIM_Config+0x29c>)
 800466c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800466e:	4613      	mov	r3, r2
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	4413      	add	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	3350      	adds	r3, #80	@ 0x50
 8004678:	443b      	add	r3, r7
 800467a:	3b34      	subs	r3, #52	@ 0x34
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3b01      	subs	r3, #1
 8004680:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4403      	add	r3, r0
 8004688:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800468a:	4b62      	ldr	r3, [pc, #392]	@ (8004814 <HAL_OSPIM_Config+0x29c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80c0 	beq.w	8004818 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8004698:	4b5e      	ldr	r3, [pc, #376]	@ (8004814 <HAL_OSPIM_Config+0x29c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a5d      	ldr	r2, [pc, #372]	@ (8004814 <HAL_OSPIM_Config+0x29c>)
 800469e:	f023 0301 	bic.w	r3, r3, #1
 80046a2:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80046a4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	f040 8162 	bne.w	8004972 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80046ae:	4959      	ldr	r1, [pc, #356]	@ (8004814 <HAL_OSPIM_Config+0x29c>)
 80046b0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80046b4:	4613      	mov	r3, r2
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	4413      	add	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	3350      	adds	r3, #80	@ 0x50
 80046be:	443b      	add	r3, r7
 80046c0:	3b3c      	subs	r3, #60	@ 0x3c
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	6859      	ldr	r1, [r3, #4]
 80046cc:	4851      	ldr	r0, [pc, #324]	@ (8004814 <HAL_OSPIM_Config+0x29c>)
 80046ce:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80046d2:	4613      	mov	r3, r2
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	4413      	add	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	3350      	adds	r3, #80	@ 0x50
 80046dc:	443b      	add	r3, r7
 80046de:	3b3c      	subs	r3, #60	@ 0x3c
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	f041 0202 	orr.w	r2, r1, #2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4403      	add	r3, r0
 80046ec:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80046ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80046f2:	4613      	mov	r3, r2
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	4413      	add	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	3350      	adds	r3, #80	@ 0x50
 80046fc:	443b      	add	r3, r7
 80046fe:	3b38      	subs	r3, #56	@ 0x38
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01f      	beq.n	8004746 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8004706:	4943      	ldr	r1, [pc, #268]	@ (8004814 <HAL_OSPIM_Config+0x29c>)
 8004708:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800470c:	4613      	mov	r3, r2
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	4413      	add	r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	3350      	adds	r3, #80	@ 0x50
 8004716:	443b      	add	r3, r7
 8004718:	3b38      	subs	r3, #56	@ 0x38
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3b01      	subs	r3, #1
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	6859      	ldr	r1, [r3, #4]
 8004724:	483b      	ldr	r0, [pc, #236]	@ (8004814 <HAL_OSPIM_Config+0x29c>)
 8004726:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800472a:	4613      	mov	r3, r2
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	4413      	add	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	3350      	adds	r3, #80	@ 0x50
 8004734:	443b      	add	r3, r7
 8004736:	3b38      	subs	r3, #56	@ 0x38
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3b01      	subs	r3, #1
 800473c:	f041 0220 	orr.w	r2, r1, #32
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4403      	add	r3, r0
 8004744:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004746:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800474a:	4613      	mov	r3, r2
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	4413      	add	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	3350      	adds	r3, #80	@ 0x50
 8004754:	443b      	add	r3, r7
 8004756:	3b30      	subs	r3, #48	@ 0x30
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d023      	beq.n	80047a6 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800475e:	492d      	ldr	r1, [pc, #180]	@ (8004814 <HAL_OSPIM_Config+0x29c>)
 8004760:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004764:	4613      	mov	r3, r2
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	4413      	add	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	3350      	adds	r3, #80	@ 0x50
 800476e:	443b      	add	r3, r7
 8004770:	3b30      	subs	r3, #48	@ 0x30
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3b01      	subs	r3, #1
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	6859      	ldr	r1, [r3, #4]
 8004780:	4824      	ldr	r0, [pc, #144]	@ (8004814 <HAL_OSPIM_Config+0x29c>)
 8004782:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004786:	4613      	mov	r3, r2
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	4413      	add	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	3350      	adds	r3, #80	@ 0x50
 8004790:	443b      	add	r3, r7
 8004792:	3b30      	subs	r3, #48	@ 0x30
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3b01      	subs	r3, #1
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4403      	add	r3, r0
 80047a4:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80047a6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80047aa:	4613      	mov	r3, r2
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	4413      	add	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	3350      	adds	r3, #80	@ 0x50
 80047b4:	443b      	add	r3, r7
 80047b6:	3b2c      	subs	r3, #44	@ 0x2c
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 80d9 	beq.w	8004972 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80047c0:	4914      	ldr	r1, [pc, #80]	@ (8004814 <HAL_OSPIM_Config+0x29c>)
 80047c2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80047c6:	4613      	mov	r3, r2
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	4413      	add	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	3350      	adds	r3, #80	@ 0x50
 80047d0:	443b      	add	r3, r7
 80047d2:	3b2c      	subs	r3, #44	@ 0x2c
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	6859      	ldr	r1, [r3, #4]
 80047e2:	480c      	ldr	r0, [pc, #48]	@ (8004814 <HAL_OSPIM_Config+0x29c>)
 80047e4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80047e8:	4613      	mov	r3, r2
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	4413      	add	r3, r2
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	3350      	adds	r3, #80	@ 0x50
 80047f2:	443b      	add	r3, r7
 80047f4:	3b2c      	subs	r3, #44	@ 0x2c
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4403      	add	r3, r0
 8004806:	605a      	str	r2, [r3, #4]
 8004808:	e0b3      	b.n	8004972 <HAL_OSPIM_Config+0x3fa>
 800480a:	bf00      	nop
 800480c:	52005000 	.word	0x52005000
 8004810:	5200a000 	.word	0x5200a000
 8004814:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8004818:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800481a:	4613      	mov	r3, r2
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	4413      	add	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	3350      	adds	r3, #80	@ 0x50
 8004824:	443b      	add	r3, r7
 8004826:	3b3c      	subs	r3, #60	@ 0x3c
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 80a1 	beq.w	8004972 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004830:	4993      	ldr	r1, [pc, #588]	@ (8004a80 <HAL_OSPIM_Config+0x508>)
 8004832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004834:	4613      	mov	r3, r2
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4413      	add	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	3350      	adds	r3, #80	@ 0x50
 800483e:	443b      	add	r3, r7
 8004840:	3b3c      	subs	r3, #60	@ 0x3c
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3b01      	subs	r3, #1
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	6859      	ldr	r1, [r3, #4]
 800484c:	488c      	ldr	r0, [pc, #560]	@ (8004a80 <HAL_OSPIM_Config+0x508>)
 800484e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004850:	4613      	mov	r3, r2
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	4413      	add	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	3350      	adds	r3, #80	@ 0x50
 800485a:	443b      	add	r3, r7
 800485c:	3b3c      	subs	r3, #60	@ 0x3c
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3b01      	subs	r3, #1
 8004862:	f021 0201 	bic.w	r2, r1, #1
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4403      	add	r3, r0
 800486a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800486c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800486e:	4613      	mov	r3, r2
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	4413      	add	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	3350      	adds	r3, #80	@ 0x50
 8004878:	443b      	add	r3, r7
 800487a:	3b38      	subs	r3, #56	@ 0x38
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01d      	beq.n	80048be <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004882:	497f      	ldr	r1, [pc, #508]	@ (8004a80 <HAL_OSPIM_Config+0x508>)
 8004884:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004886:	4613      	mov	r3, r2
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	4413      	add	r3, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	3350      	adds	r3, #80	@ 0x50
 8004890:	443b      	add	r3, r7
 8004892:	3b38      	subs	r3, #56	@ 0x38
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3b01      	subs	r3, #1
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	6859      	ldr	r1, [r3, #4]
 800489e:	4878      	ldr	r0, [pc, #480]	@ (8004a80 <HAL_OSPIM_Config+0x508>)
 80048a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048a2:	4613      	mov	r3, r2
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	4413      	add	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	3350      	adds	r3, #80	@ 0x50
 80048ac:	443b      	add	r3, r7
 80048ae:	3b38      	subs	r3, #56	@ 0x38
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	f021 0210 	bic.w	r2, r1, #16
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4403      	add	r3, r0
 80048bc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80048be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048c0:	4613      	mov	r3, r2
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	4413      	add	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	3350      	adds	r3, #80	@ 0x50
 80048ca:	443b      	add	r3, r7
 80048cc:	3b30      	subs	r3, #48	@ 0x30
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d021      	beq.n	8004918 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80048d4:	496a      	ldr	r1, [pc, #424]	@ (8004a80 <HAL_OSPIM_Config+0x508>)
 80048d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048d8:	4613      	mov	r3, r2
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	4413      	add	r3, r2
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	3350      	adds	r3, #80	@ 0x50
 80048e2:	443b      	add	r3, r7
 80048e4:	3b30      	subs	r3, #48	@ 0x30
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	6859      	ldr	r1, [r3, #4]
 80048f4:	4862      	ldr	r0, [pc, #392]	@ (8004a80 <HAL_OSPIM_Config+0x508>)
 80048f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	3350      	adds	r3, #80	@ 0x50
 8004902:	443b      	add	r3, r7
 8004904:	3b30      	subs	r3, #48	@ 0x30
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3b01      	subs	r3, #1
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4403      	add	r3, r0
 8004916:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004918:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800491a:	4613      	mov	r3, r2
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	4413      	add	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	3350      	adds	r3, #80	@ 0x50
 8004924:	443b      	add	r3, r7
 8004926:	3b2c      	subs	r3, #44	@ 0x2c
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d021      	beq.n	8004972 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800492e:	4954      	ldr	r1, [pc, #336]	@ (8004a80 <HAL_OSPIM_Config+0x508>)
 8004930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004932:	4613      	mov	r3, r2
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	4413      	add	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	3350      	adds	r3, #80	@ 0x50
 800493c:	443b      	add	r3, r7
 800493e:	3b2c      	subs	r3, #44	@ 0x2c
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3b01      	subs	r3, #1
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	6859      	ldr	r1, [r3, #4]
 800494e:	484c      	ldr	r0, [pc, #304]	@ (8004a80 <HAL_OSPIM_Config+0x508>)
 8004950:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004952:	4613      	mov	r3, r2
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	4413      	add	r3, r2
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	3350      	adds	r3, #80	@ 0x50
 800495c:	443b      	add	r3, r7
 800495e:	3b2c      	subs	r3, #44	@ 0x2c
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3b01      	subs	r3, #1
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4403      	add	r3, r0
 8004970:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	6819      	ldr	r1, [r3, #0]
 8004976:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800497a:	4613      	mov	r3, r2
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4413      	add	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	3350      	adds	r3, #80	@ 0x50
 8004984:	443b      	add	r3, r7
 8004986:	3b3c      	subs	r3, #60	@ 0x3c
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4299      	cmp	r1, r3
 800498c:	d038      	beq.n	8004a00 <HAL_OSPIM_Config+0x488>
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	6859      	ldr	r1, [r3, #4]
 8004992:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004996:	4613      	mov	r3, r2
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	4413      	add	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	3350      	adds	r3, #80	@ 0x50
 80049a0:	443b      	add	r3, r7
 80049a2:	3b38      	subs	r3, #56	@ 0x38
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4299      	cmp	r1, r3
 80049a8:	d02a      	beq.n	8004a00 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	6899      	ldr	r1, [r3, #8]
 80049ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80049b2:	4613      	mov	r3, r2
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	4413      	add	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	3350      	adds	r3, #80	@ 0x50
 80049bc:	443b      	add	r3, r7
 80049be:	3b34      	subs	r3, #52	@ 0x34
 80049c0:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80049c2:	4299      	cmp	r1, r3
 80049c4:	d01c      	beq.n	8004a00 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	68d9      	ldr	r1, [r3, #12]
 80049ca:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80049ce:	4613      	mov	r3, r2
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	4413      	add	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	3350      	adds	r3, #80	@ 0x50
 80049d8:	443b      	add	r3, r7
 80049da:	3b30      	subs	r3, #48	@ 0x30
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4299      	cmp	r1, r3
 80049e0:	d00e      	beq.n	8004a00 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	6919      	ldr	r1, [r3, #16]
 80049e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80049ea:	4613      	mov	r3, r2
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	4413      	add	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	3350      	adds	r3, #80	@ 0x50
 80049f4:	443b      	add	r3, r7
 80049f6:	3b2c      	subs	r3, #44	@ 0x2c
 80049f8:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80049fa:	4299      	cmp	r1, r3
 80049fc:	f040 810e 	bne.w	8004c1c <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	6819      	ldr	r1, [r3, #0]
 8004a04:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004a08:	4613      	mov	r3, r2
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	4413      	add	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3350      	adds	r3, #80	@ 0x50
 8004a12:	443b      	add	r3, r7
 8004a14:	3b3c      	subs	r3, #60	@ 0x3c
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4299      	cmp	r1, r3
 8004a1a:	d133      	bne.n	8004a84 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	6859      	ldr	r1, [r3, #4]
 8004a20:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004a24:	4613      	mov	r3, r2
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	4413      	add	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	3350      	adds	r3, #80	@ 0x50
 8004a2e:	443b      	add	r3, r7
 8004a30:	3b38      	subs	r3, #56	@ 0x38
 8004a32:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004a34:	4299      	cmp	r1, r3
 8004a36:	d125      	bne.n	8004a84 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	68d9      	ldr	r1, [r3, #12]
 8004a3c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004a40:	4613      	mov	r3, r2
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	4413      	add	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	3350      	adds	r3, #80	@ 0x50
 8004a4a:	443b      	add	r3, r7
 8004a4c:	3b30      	subs	r3, #48	@ 0x30
 8004a4e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004a50:	4299      	cmp	r1, r3
 8004a52:	d117      	bne.n	8004a84 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	6919      	ldr	r1, [r3, #16]
 8004a58:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	4413      	add	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	3350      	adds	r3, #80	@ 0x50
 8004a66:	443b      	add	r3, r7
 8004a68:	3b2c      	subs	r3, #44	@ 0x2c
 8004a6a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004a6c:	4299      	cmp	r1, r3
 8004a6e:	d109      	bne.n	8004a84 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8004a70:	4b03      	ldr	r3, [pc, #12]	@ (8004a80 <HAL_OSPIM_Config+0x508>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a02      	ldr	r2, [pc, #8]	@ (8004a80 <HAL_OSPIM_Config+0x508>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	e0ce      	b.n	8004c1c <HAL_OSPIM_Config+0x6a4>
 8004a7e:	bf00      	nop
 8004a80:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004a84:	49bb      	ldr	r1, [pc, #748]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004a86:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	4413      	add	r3, r2
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	3350      	adds	r3, #80	@ 0x50
 8004a94:	443b      	add	r3, r7
 8004a96:	3b3c      	subs	r3, #60	@ 0x3c
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	6859      	ldr	r1, [r3, #4]
 8004aa2:	48b4      	ldr	r0, [pc, #720]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004aa4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	4413      	add	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	3350      	adds	r3, #80	@ 0x50
 8004ab2:	443b      	add	r3, r7
 8004ab4:	3b3c      	subs	r3, #60	@ 0x3c
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	f021 0201 	bic.w	r2, r1, #1
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4403      	add	r3, r0
 8004ac2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004ac4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004ac8:	4613      	mov	r3, r2
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	4413      	add	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	3350      	adds	r3, #80	@ 0x50
 8004ad2:	443b      	add	r3, r7
 8004ad4:	3b38      	subs	r3, #56	@ 0x38
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01f      	beq.n	8004b1c <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004adc:	49a5      	ldr	r1, [pc, #660]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004ade:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	4413      	add	r3, r2
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	3350      	adds	r3, #80	@ 0x50
 8004aec:	443b      	add	r3, r7
 8004aee:	3b38      	subs	r3, #56	@ 0x38
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	6859      	ldr	r1, [r3, #4]
 8004afa:	489e      	ldr	r0, [pc, #632]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004afc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004b00:	4613      	mov	r3, r2
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	4413      	add	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	3350      	adds	r3, #80	@ 0x50
 8004b0a:	443b      	add	r3, r7
 8004b0c:	3b38      	subs	r3, #56	@ 0x38
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	f021 0210 	bic.w	r2, r1, #16
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4403      	add	r3, r0
 8004b1a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004b1c:	4995      	ldr	r1, [pc, #596]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004b1e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004b22:	4613      	mov	r3, r2
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	4413      	add	r3, r2
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	3350      	adds	r3, #80	@ 0x50
 8004b2c:	443b      	add	r3, r7
 8004b2e:	3b34      	subs	r3, #52	@ 0x34
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	6859      	ldr	r1, [r3, #4]
 8004b3a:	488e      	ldr	r0, [pc, #568]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004b3c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004b40:	4613      	mov	r3, r2
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	4413      	add	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	3350      	adds	r3, #80	@ 0x50
 8004b4a:	443b      	add	r3, r7
 8004b4c:	3b34      	subs	r3, #52	@ 0x34
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4403      	add	r3, r0
 8004b5a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004b5c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004b60:	4613      	mov	r3, r2
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	4413      	add	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	3350      	adds	r3, #80	@ 0x50
 8004b6a:	443b      	add	r3, r7
 8004b6c:	3b30      	subs	r3, #48	@ 0x30
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d023      	beq.n	8004bbc <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004b74:	497f      	ldr	r1, [pc, #508]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004b76:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	4413      	add	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	3350      	adds	r3, #80	@ 0x50
 8004b84:	443b      	add	r3, r7
 8004b86:	3b30      	subs	r3, #48	@ 0x30
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	6859      	ldr	r1, [r3, #4]
 8004b96:	4877      	ldr	r0, [pc, #476]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004b98:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4413      	add	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	3350      	adds	r3, #80	@ 0x50
 8004ba6:	443b      	add	r3, r7
 8004ba8:	3b30      	subs	r3, #48	@ 0x30
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4403      	add	r3, r0
 8004bba:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004bbc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	4413      	add	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	3350      	adds	r3, #80	@ 0x50
 8004bca:	443b      	add	r3, r7
 8004bcc:	3b2c      	subs	r3, #44	@ 0x2c
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d023      	beq.n	8004c1c <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004bd4:	4967      	ldr	r1, [pc, #412]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004bd6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004bda:	4613      	mov	r3, r2
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	4413      	add	r3, r2
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	3350      	adds	r3, #80	@ 0x50
 8004be4:	443b      	add	r3, r7
 8004be6:	3b2c      	subs	r3, #44	@ 0x2c
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	6859      	ldr	r1, [r3, #4]
 8004bf6:	485f      	ldr	r0, [pc, #380]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004bf8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	4413      	add	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	3350      	adds	r3, #80	@ 0x50
 8004c06:	443b      	add	r3, r7
 8004c08:	3b2c      	subs	r3, #44	@ 0x2c
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4403      	add	r3, r0
 8004c1a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004c1c:	4a55      	ldr	r2, [pc, #340]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c30:	025b      	lsls	r3, r3, #9
 8004c32:	431a      	orrs	r2, r3
 8004c34:	494f      	ldr	r1, [pc, #316]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	440b      	add	r3, r1
 8004c44:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	1e5a      	subs	r2, r3, #1
 8004c4c:	4b49      	ldr	r3, [pc, #292]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	0c1b      	lsrs	r3, r3, #16
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d90a      	bls.n	8004c6e <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8004c58:	4b46      	ldr	r3, [pc, #280]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	041b      	lsls	r3, r3, #16
 8004c68:	4942      	ldr	r1, [pc, #264]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8004c6e:	4b41      	ldr	r3, [pc, #260]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 809a 	beq.w	8004db0 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8004c7c:	4a3d      	ldr	r2, [pc, #244]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	4939      	ldr	r1, [pc, #228]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d011      	beq.n	8004ccc <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8004ca8:	4a32      	ldr	r2, [pc, #200]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cba:	492e      	ldr	r1, [pc, #184]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	f042 0210 	orr.w	r2, r2, #16
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d016      	beq.n	8004d06 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004cd8:	4a26      	ldr	r2, [pc, #152]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004cee:	4921      	ldr	r1, [pc, #132]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	605a      	str	r2, [r3, #4]
 8004d04:	e019      	b.n	8004d3a <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d015      	beq.n	8004d3a <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d0e:	4a19      	ldr	r2, [pc, #100]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004d24:	4913      	ldr	r1, [pc, #76]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d018      	beq.n	8004d78 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d46:	4a0b      	ldr	r2, [pc, #44]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004d5c:	4905      	ldr	r1, [pc, #20]	@ (8004d74 <HAL_OSPIM_Config+0x7fc>)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	e0c5      	b.n	8004f00 <HAL_OSPIM_Config+0x988>
 8004d74:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 80bf 	beq.w	8004f00 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d82:	4a6e      	ldr	r2, [pc, #440]	@ (8004f3c <HAL_OSPIM_Config+0x9c4>)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004d98:	4968      	ldr	r1, [pc, #416]	@ (8004f3c <HAL_OSPIM_Config+0x9c4>)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	605a      	str	r2, [r3, #4]
 8004dae:	e0a7      	b.n	8004f00 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004db0:	4a62      	ldr	r2, [pc, #392]	@ (8004f3c <HAL_OSPIM_Config+0x9c4>)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f023 0203 	bic.w	r2, r3, #3
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	495c      	ldr	r1, [pc, #368]	@ (8004f3c <HAL_OSPIM_Config+0x9c4>)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d014      	beq.n	8004e0c <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004de2:	4a56      	ldr	r2, [pc, #344]	@ (8004f3c <HAL_OSPIM_Config+0x9c4>)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004df4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004df6:	015b      	lsls	r3, r3, #5
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	4950      	ldr	r1, [pc, #320]	@ (8004f3c <HAL_OSPIM_Config+0x9c4>)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	f042 0210 	orr.w	r2, r2, #16
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d019      	beq.n	8004e4c <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e18:	4a48      	ldr	r2, [pc, #288]	@ (8004f3c <HAL_OSPIM_Config+0x9c4>)
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e30:	049b      	lsls	r3, r3, #18
 8004e32:	431a      	orrs	r2, r3
 8004e34:	4941      	ldr	r1, [pc, #260]	@ (8004f3c <HAL_OSPIM_Config+0x9c4>)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	605a      	str	r2, [r3, #4]
 8004e4a:	e01c      	b.n	8004e86 <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d018      	beq.n	8004e86 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e54:	4a39      	ldr	r2, [pc, #228]	@ (8004f3c <HAL_OSPIM_Config+0x9c4>)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e6c:	069b      	lsls	r3, r3, #26
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	4932      	ldr	r1, [pc, #200]	@ (8004f3c <HAL_OSPIM_Config+0x9c4>)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d019      	beq.n	8004ec6 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e92:	4a2a      	ldr	r2, [pc, #168]	@ (8004f3c <HAL_OSPIM_Config+0x9c4>)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004ea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eaa:	049b      	lsls	r3, r3, #18
 8004eac:	431a      	orrs	r2, r3
 8004eae:	4923      	ldr	r1, [pc, #140]	@ (8004f3c <HAL_OSPIM_Config+0x9c4>)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	605a      	str	r2, [r3, #4]
 8004ec4:	e01c      	b.n	8004f00 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d018      	beq.n	8004f00 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004ece:	4a1b      	ldr	r2, [pc, #108]	@ (8004f3c <HAL_OSPIM_Config+0x9c4>)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ee6:	069b      	lsls	r3, r3, #26
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	4914      	ldr	r1, [pc, #80]	@ (8004f3c <HAL_OSPIM_Config+0x9c4>)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004f00:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f40 <HAL_OSPIM_Config+0x9c8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a0b      	ldr	r2, [pc, #44]	@ (8004f40 <HAL_OSPIM_Config+0x9c8>)
 8004f12:	f043 0301 	orr.w	r3, r3, #1
 8004f16:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004f18:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004f24:	4b07      	ldr	r3, [pc, #28]	@ (8004f44 <HAL_OSPIM_Config+0x9cc>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a06      	ldr	r2, [pc, #24]	@ (8004f44 <HAL_OSPIM_Config+0x9cc>)
 8004f2a:	f043 0301 	orr.w	r3, r3, #1
 8004f2e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004f30:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3750      	adds	r7, #80	@ 0x50
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	5200b400 	.word	0x5200b400
 8004f40:	52005000 	.word	0x52005000
 8004f44:	5200a000 	.word	0x5200a000

08004f48 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004f58:	e01a      	b.n	8004f90 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f60:	d016      	beq.n	8004f90 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f62:	f7fd f8c9 	bl	80020f8 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d302      	bcc.n	8004f78 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10b      	bne.n	8004f90 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f7e:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f84:	f043 0201 	orr.w	r2, r3, #1
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e00e      	b.n	8004fae <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6a1a      	ldr	r2, [r3, #32]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	bf14      	ite	ne
 8004f9e:	2301      	movne	r3, #1
 8004fa0:	2300      	moveq	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d1d6      	bne.n	8004f5a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	6039      	str	r1, [r7, #0]
 8004fc2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004fcc:	79fb      	ldrb	r3, [r7, #7]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d005      	beq.n	8004fde <OSPIM_GetConfig+0x26>
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d802      	bhi.n	8004fde <OSPIM_GetConfig+0x26>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d102      	bne.n	8004fe4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	75fb      	strb	r3, [r7, #23]
 8004fe2:	e098      	b.n	8005116 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2200      	movs	r2, #0
 8004fee:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2200      	movs	r2, #0
 8005000:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	2b02      	cmp	r3, #2
 8005006:	d10b      	bne.n	8005020 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8005008:	4b46      	ldr	r3, [pc, #280]	@ (8005124 <OSPIM_GetConfig+0x16c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d102      	bne.n	800501a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8005014:	4b44      	ldr	r3, [pc, #272]	@ (8005128 <OSPIM_GetConfig+0x170>)
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	e002      	b.n	8005020 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800501a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800501e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005020:	2300      	movs	r3, #0
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	e074      	b.n	8005110 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8005026:	4a3f      	ldr	r2, [pc, #252]	@ (8005124 <OSPIM_GetConfig+0x16c>)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	4053      	eors	r3, r2
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d103      	bne.n	8005052 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4053      	eors	r3, r2
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d103      	bne.n	8005072 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	4053      	eors	r3, r2
 8005082:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d018      	beq.n	80050ce <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	4053      	eors	r3, r2
 80050a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d111      	bne.n	80050ce <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d106      	bne.n	80050c2 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3301      	adds	r3, #1
 80050b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	60da      	str	r2, [r3, #12]
 80050c0:	e005      	b.n	80050ce <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3301      	adds	r3, #1
 80050c6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d018      	beq.n	800510a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	4053      	eors	r3, r2
 80050de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d111      	bne.n	800510a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d106      	bne.n	80050fe <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3301      	adds	r3, #1
 80050f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	611a      	str	r2, [r3, #16]
 80050fc:	e005      	b.n	800510a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3301      	adds	r3, #1
 8005102:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3301      	adds	r3, #1
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d987      	bls.n	8005026 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8005116:	7dfb      	ldrb	r3, [r7, #23]
}
 8005118:	4618      	mov	r0, r3
 800511a:	371c      	adds	r7, #28
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	5200b400 	.word	0x5200b400
 8005128:	04040222 	.word	0x04040222

0800512c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005134:	4b29      	ldr	r3, [pc, #164]	@ (80051dc <HAL_PWREx_ConfigSupply+0xb0>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	2b06      	cmp	r3, #6
 800513e:	d00a      	beq.n	8005156 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005140:	4b26      	ldr	r3, [pc, #152]	@ (80051dc <HAL_PWREx_ConfigSupply+0xb0>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	429a      	cmp	r2, r3
 800514c:	d001      	beq.n	8005152 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e03f      	b.n	80051d2 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	e03d      	b.n	80051d2 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005156:	4b21      	ldr	r3, [pc, #132]	@ (80051dc <HAL_PWREx_ConfigSupply+0xb0>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800515e:	491f      	ldr	r1, [pc, #124]	@ (80051dc <HAL_PWREx_ConfigSupply+0xb0>)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4313      	orrs	r3, r2
 8005164:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005166:	f7fc ffc7 	bl	80020f8 <HAL_GetTick>
 800516a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800516c:	e009      	b.n	8005182 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800516e:	f7fc ffc3 	bl	80020f8 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800517c:	d901      	bls.n	8005182 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e027      	b.n	80051d2 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005182:	4b16      	ldr	r3, [pc, #88]	@ (80051dc <HAL_PWREx_ConfigSupply+0xb0>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800518a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800518e:	d1ee      	bne.n	800516e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b1e      	cmp	r3, #30
 8005194:	d008      	beq.n	80051a8 <HAL_PWREx_ConfigSupply+0x7c>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b2e      	cmp	r3, #46	@ 0x2e
 800519a:	d005      	beq.n	80051a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b1d      	cmp	r3, #29
 80051a0:	d002      	beq.n	80051a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b2d      	cmp	r3, #45	@ 0x2d
 80051a6:	d113      	bne.n	80051d0 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80051a8:	f7fc ffa6 	bl	80020f8 <HAL_GetTick>
 80051ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80051ae:	e009      	b.n	80051c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80051b0:	f7fc ffa2 	bl	80020f8 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051be:	d901      	bls.n	80051c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e006      	b.n	80051d2 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80051c4:	4b05      	ldr	r3, [pc, #20]	@ (80051dc <HAL_PWREx_ConfigSupply+0xb0>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0311 	and.w	r3, r3, #17
 80051cc:	2b11      	cmp	r3, #17
 80051ce:	d1ef      	bne.n	80051b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	58024800 	.word	0x58024800

080051e0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80051e4:	4b05      	ldr	r3, [pc, #20]	@ (80051fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	4a04      	ldr	r2, [pc, #16]	@ (80051fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80051ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ee:	60d3      	str	r3, [r2, #12]
}
 80051f0:	bf00      	nop
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	58024800 	.word	0x58024800

08005200 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08c      	sub	sp, #48	@ 0x30
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e3c8      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 8087 	beq.w	800532e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005220:	4b88      	ldr	r3, [pc, #544]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005228:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800522a:	4b86      	ldr	r3, [pc, #536]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 800522c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005232:	2b10      	cmp	r3, #16
 8005234:	d007      	beq.n	8005246 <HAL_RCC_OscConfig+0x46>
 8005236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005238:	2b18      	cmp	r3, #24
 800523a:	d110      	bne.n	800525e <HAL_RCC_OscConfig+0x5e>
 800523c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d10b      	bne.n	800525e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005246:	4b7f      	ldr	r3, [pc, #508]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d06c      	beq.n	800532c <HAL_RCC_OscConfig+0x12c>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d168      	bne.n	800532c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e3a2      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005266:	d106      	bne.n	8005276 <HAL_RCC_OscConfig+0x76>
 8005268:	4b76      	ldr	r3, [pc, #472]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a75      	ldr	r2, [pc, #468]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 800526e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005272:	6013      	str	r3, [r2, #0]
 8005274:	e02e      	b.n	80052d4 <HAL_RCC_OscConfig+0xd4>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10c      	bne.n	8005298 <HAL_RCC_OscConfig+0x98>
 800527e:	4b71      	ldr	r3, [pc, #452]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a70      	ldr	r2, [pc, #448]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 8005284:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	4b6e      	ldr	r3, [pc, #440]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a6d      	ldr	r2, [pc, #436]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 8005290:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	e01d      	b.n	80052d4 <HAL_RCC_OscConfig+0xd4>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052a0:	d10c      	bne.n	80052bc <HAL_RCC_OscConfig+0xbc>
 80052a2:	4b68      	ldr	r3, [pc, #416]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a67      	ldr	r2, [pc, #412]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 80052a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	4b65      	ldr	r3, [pc, #404]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a64      	ldr	r2, [pc, #400]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 80052b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	e00b      	b.n	80052d4 <HAL_RCC_OscConfig+0xd4>
 80052bc:	4b61      	ldr	r3, [pc, #388]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a60      	ldr	r2, [pc, #384]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 80052c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	4b5e      	ldr	r3, [pc, #376]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a5d      	ldr	r2, [pc, #372]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 80052ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d013      	beq.n	8005304 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052dc:	f7fc ff0c 	bl	80020f8 <HAL_GetTick>
 80052e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052e4:	f7fc ff08 	bl	80020f8 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b64      	cmp	r3, #100	@ 0x64
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e356      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052f6:	4b53      	ldr	r3, [pc, #332]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0f0      	beq.n	80052e4 <HAL_RCC_OscConfig+0xe4>
 8005302:	e014      	b.n	800532e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005304:	f7fc fef8 	bl	80020f8 <HAL_GetTick>
 8005308:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800530c:	f7fc fef4 	bl	80020f8 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b64      	cmp	r3, #100	@ 0x64
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e342      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800531e:	4b49      	ldr	r3, [pc, #292]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f0      	bne.n	800530c <HAL_RCC_OscConfig+0x10c>
 800532a:	e000      	b.n	800532e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800532c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 808c 	beq.w	8005454 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800533c:	4b41      	ldr	r3, [pc, #260]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005344:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005346:	4b3f      	ldr	r3, [pc, #252]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 8005348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <HAL_RCC_OscConfig+0x162>
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	2b18      	cmp	r3, #24
 8005356:	d137      	bne.n	80053c8 <HAL_RCC_OscConfig+0x1c8>
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f003 0303 	and.w	r3, r3, #3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d132      	bne.n	80053c8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005362:	4b38      	ldr	r3, [pc, #224]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <HAL_RCC_OscConfig+0x17a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e314      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800537a:	4b32      	ldr	r3, [pc, #200]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 0219 	bic.w	r2, r3, #25
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	492f      	ldr	r1, [pc, #188]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 8005388:	4313      	orrs	r3, r2
 800538a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538c:	f7fc feb4 	bl	80020f8 <HAL_GetTick>
 8005390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005394:	f7fc feb0 	bl	80020f8 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e2fe      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053a6:	4b27      	ldr	r3, [pc, #156]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b2:	4b24      	ldr	r3, [pc, #144]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	061b      	lsls	r3, r3, #24
 80053c0:	4920      	ldr	r1, [pc, #128]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053c6:	e045      	b.n	8005454 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d026      	beq.n	800541e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80053d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f023 0219 	bic.w	r2, r3, #25
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	4919      	ldr	r1, [pc, #100]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e2:	f7fc fe89 	bl	80020f8 <HAL_GetTick>
 80053e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ea:	f7fc fe85 	bl	80020f8 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e2d3      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053fc:	4b11      	ldr	r3, [pc, #68]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005408:	4b0e      	ldr	r3, [pc, #56]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	061b      	lsls	r3, r3, #24
 8005416:	490b      	ldr	r1, [pc, #44]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 8005418:	4313      	orrs	r3, r2
 800541a:	604b      	str	r3, [r1, #4]
 800541c:	e01a      	b.n	8005454 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800541e:	4b09      	ldr	r3, [pc, #36]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a08      	ldr	r2, [pc, #32]	@ (8005444 <HAL_RCC_OscConfig+0x244>)
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542a:	f7fc fe65 	bl	80020f8 <HAL_GetTick>
 800542e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005430:	e00a      	b.n	8005448 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005432:	f7fc fe61 	bl	80020f8 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d903      	bls.n	8005448 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e2af      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
 8005444:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005448:	4b96      	ldr	r3, [pc, #600]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1ee      	bne.n	8005432 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	2b00      	cmp	r3, #0
 800545e:	d06a      	beq.n	8005536 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005460:	4b90      	ldr	r3, [pc, #576]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005468:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800546a:	4b8e      	ldr	r3, [pc, #568]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 800546c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b08      	cmp	r3, #8
 8005474:	d007      	beq.n	8005486 <HAL_RCC_OscConfig+0x286>
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b18      	cmp	r3, #24
 800547a:	d11b      	bne.n	80054b4 <HAL_RCC_OscConfig+0x2b4>
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	2b01      	cmp	r3, #1
 8005484:	d116      	bne.n	80054b4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005486:	4b87      	ldr	r3, [pc, #540]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_RCC_OscConfig+0x29e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	2b80      	cmp	r3, #128	@ 0x80
 8005498:	d001      	beq.n	800549e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e282      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800549e:	4b81      	ldr	r3, [pc, #516]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	061b      	lsls	r3, r3, #24
 80054ac:	497d      	ldr	r1, [pc, #500]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054b2:	e040      	b.n	8005536 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d023      	beq.n	8005504 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80054bc:	4b79      	ldr	r3, [pc, #484]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a78      	ldr	r2, [pc, #480]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 80054c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c8:	f7fc fe16 	bl	80020f8 <HAL_GetTick>
 80054cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054d0:	f7fc fe12 	bl	80020f8 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e260      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054e2:	4b70      	ldr	r3, [pc, #448]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0f0      	beq.n	80054d0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054ee:	4b6d      	ldr	r3, [pc, #436]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	061b      	lsls	r3, r3, #24
 80054fc:	4969      	ldr	r1, [pc, #420]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	60cb      	str	r3, [r1, #12]
 8005502:	e018      	b.n	8005536 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005504:	4b67      	ldr	r3, [pc, #412]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a66      	ldr	r2, [pc, #408]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 800550a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800550e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005510:	f7fc fdf2 	bl	80020f8 <HAL_GetTick>
 8005514:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005518:	f7fc fdee 	bl	80020f8 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e23c      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800552a:	4b5e      	ldr	r3, [pc, #376]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f0      	bne.n	8005518 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d036      	beq.n	80055b0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d019      	beq.n	800557e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800554a:	4b56      	ldr	r3, [pc, #344]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 800554c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554e:	4a55      	ldr	r2, [pc, #340]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005556:	f7fc fdcf 	bl	80020f8 <HAL_GetTick>
 800555a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800555e:	f7fc fdcb 	bl	80020f8 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e219      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005570:	4b4c      	ldr	r3, [pc, #304]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 8005572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f0      	beq.n	800555e <HAL_RCC_OscConfig+0x35e>
 800557c:	e018      	b.n	80055b0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800557e:	4b49      	ldr	r3, [pc, #292]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 8005580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005582:	4a48      	ldr	r2, [pc, #288]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 8005584:	f023 0301 	bic.w	r3, r3, #1
 8005588:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558a:	f7fc fdb5 	bl	80020f8 <HAL_GetTick>
 800558e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005592:	f7fc fdb1 	bl	80020f8 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e1ff      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055a4:	4b3f      	ldr	r3, [pc, #252]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 80055a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1f0      	bne.n	8005592 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d036      	beq.n	800562a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d019      	beq.n	80055f8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055c4:	4b37      	ldr	r3, [pc, #220]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a36      	ldr	r2, [pc, #216]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 80055ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80055ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055d0:	f7fc fd92 	bl	80020f8 <HAL_GetTick>
 80055d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055d8:	f7fc fd8e 	bl	80020f8 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e1dc      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055ea:	4b2e      	ldr	r3, [pc, #184]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0f0      	beq.n	80055d8 <HAL_RCC_OscConfig+0x3d8>
 80055f6:	e018      	b.n	800562a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055f8:	4b2a      	ldr	r3, [pc, #168]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a29      	ldr	r2, [pc, #164]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 80055fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005602:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005604:	f7fc fd78 	bl	80020f8 <HAL_GetTick>
 8005608:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800560c:	f7fc fd74 	bl	80020f8 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e1c2      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800561e:	4b21      	ldr	r3, [pc, #132]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0304 	and.w	r3, r3, #4
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 8086 	beq.w	8005744 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005638:	4b1b      	ldr	r3, [pc, #108]	@ (80056a8 <HAL_RCC_OscConfig+0x4a8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a1a      	ldr	r2, [pc, #104]	@ (80056a8 <HAL_RCC_OscConfig+0x4a8>)
 800563e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005644:	f7fc fd58 	bl	80020f8 <HAL_GetTick>
 8005648:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800564c:	f7fc fd54 	bl	80020f8 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b64      	cmp	r3, #100	@ 0x64
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e1a2      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800565e:	4b12      	ldr	r3, [pc, #72]	@ (80056a8 <HAL_RCC_OscConfig+0x4a8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0f0      	beq.n	800564c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d106      	bne.n	8005680 <HAL_RCC_OscConfig+0x480>
 8005672:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005676:	4a0b      	ldr	r2, [pc, #44]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 8005678:	f043 0301 	orr.w	r3, r3, #1
 800567c:	6713      	str	r3, [r2, #112]	@ 0x70
 800567e:	e032      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e6>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d111      	bne.n	80056ac <HAL_RCC_OscConfig+0x4ac>
 8005688:	4b06      	ldr	r3, [pc, #24]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 800568a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800568c:	4a05      	ldr	r2, [pc, #20]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 800568e:	f023 0301 	bic.w	r3, r3, #1
 8005692:	6713      	str	r3, [r2, #112]	@ 0x70
 8005694:	4b03      	ldr	r3, [pc, #12]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 8005696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005698:	4a02      	ldr	r2, [pc, #8]	@ (80056a4 <HAL_RCC_OscConfig+0x4a4>)
 800569a:	f023 0304 	bic.w	r3, r3, #4
 800569e:	6713      	str	r3, [r2, #112]	@ 0x70
 80056a0:	e021      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e6>
 80056a2:	bf00      	nop
 80056a4:	58024400 	.word	0x58024400
 80056a8:	58024800 	.word	0x58024800
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b05      	cmp	r3, #5
 80056b2:	d10c      	bne.n	80056ce <HAL_RCC_OscConfig+0x4ce>
 80056b4:	4b83      	ldr	r3, [pc, #524]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 80056b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b8:	4a82      	ldr	r2, [pc, #520]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 80056ba:	f043 0304 	orr.w	r3, r3, #4
 80056be:	6713      	str	r3, [r2, #112]	@ 0x70
 80056c0:	4b80      	ldr	r3, [pc, #512]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 80056c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c4:	4a7f      	ldr	r2, [pc, #508]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 80056c6:	f043 0301 	orr.w	r3, r3, #1
 80056ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80056cc:	e00b      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e6>
 80056ce:	4b7d      	ldr	r3, [pc, #500]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 80056d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d2:	4a7c      	ldr	r2, [pc, #496]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 80056d4:	f023 0301 	bic.w	r3, r3, #1
 80056d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80056da:	4b7a      	ldr	r3, [pc, #488]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 80056dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056de:	4a79      	ldr	r2, [pc, #484]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 80056e0:	f023 0304 	bic.w	r3, r3, #4
 80056e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d015      	beq.n	800571a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ee:	f7fc fd03 	bl	80020f8 <HAL_GetTick>
 80056f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056f4:	e00a      	b.n	800570c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f6:	f7fc fcff 	bl	80020f8 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005704:	4293      	cmp	r3, r2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e14b      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800570c:	4b6d      	ldr	r3, [pc, #436]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 800570e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ee      	beq.n	80056f6 <HAL_RCC_OscConfig+0x4f6>
 8005718:	e014      	b.n	8005744 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571a:	f7fc fced 	bl	80020f8 <HAL_GetTick>
 800571e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005720:	e00a      	b.n	8005738 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005722:	f7fc fce9 	bl	80020f8 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005730:	4293      	cmp	r3, r2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e135      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005738:	4b62      	ldr	r3, [pc, #392]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 800573a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1ee      	bne.n	8005722 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 812a 	beq.w	80059a2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800574e:	4b5d      	ldr	r3, [pc, #372]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005756:	2b18      	cmp	r3, #24
 8005758:	f000 80ba 	beq.w	80058d0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005760:	2b02      	cmp	r3, #2
 8005762:	f040 8095 	bne.w	8005890 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005766:	4b57      	ldr	r3, [pc, #348]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a56      	ldr	r2, [pc, #344]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 800576c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005772:	f7fc fcc1 	bl	80020f8 <HAL_GetTick>
 8005776:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800577a:	f7fc fcbd 	bl	80020f8 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e10b      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800578c:	4b4d      	ldr	r3, [pc, #308]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f0      	bne.n	800577a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005798:	4b4a      	ldr	r3, [pc, #296]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 800579a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800579c:	4b4a      	ldr	r3, [pc, #296]	@ (80058c8 <HAL_RCC_OscConfig+0x6c8>)
 800579e:	4013      	ands	r3, r2
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80057a8:	0112      	lsls	r2, r2, #4
 80057aa:	430a      	orrs	r2, r1
 80057ac:	4945      	ldr	r1, [pc, #276]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	628b      	str	r3, [r1, #40]	@ 0x28
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b6:	3b01      	subs	r3, #1
 80057b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c0:	3b01      	subs	r3, #1
 80057c2:	025b      	lsls	r3, r3, #9
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057cc:	3b01      	subs	r3, #1
 80057ce:	041b      	lsls	r3, r3, #16
 80057d0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057da:	3b01      	subs	r3, #1
 80057dc:	061b      	lsls	r3, r3, #24
 80057de:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80057e2:	4938      	ldr	r1, [pc, #224]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80057e8:	4b36      	ldr	r3, [pc, #216]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 80057ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ec:	4a35      	ldr	r2, [pc, #212]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 80057ee:	f023 0301 	bic.w	r3, r3, #1
 80057f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057f4:	4b33      	ldr	r3, [pc, #204]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 80057f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057f8:	4b34      	ldr	r3, [pc, #208]	@ (80058cc <HAL_RCC_OscConfig+0x6cc>)
 80057fa:	4013      	ands	r3, r2
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005800:	00d2      	lsls	r2, r2, #3
 8005802:	4930      	ldr	r1, [pc, #192]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 8005804:	4313      	orrs	r3, r2
 8005806:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005808:	4b2e      	ldr	r3, [pc, #184]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 800580a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580c:	f023 020c 	bic.w	r2, r3, #12
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005814:	492b      	ldr	r1, [pc, #172]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 8005816:	4313      	orrs	r3, r2
 8005818:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800581a:	4b2a      	ldr	r3, [pc, #168]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 800581c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581e:	f023 0202 	bic.w	r2, r3, #2
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005826:	4927      	ldr	r1, [pc, #156]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 8005828:	4313      	orrs	r3, r2
 800582a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800582c:	4b25      	ldr	r3, [pc, #148]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 800582e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005830:	4a24      	ldr	r2, [pc, #144]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 8005832:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005836:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005838:	4b22      	ldr	r3, [pc, #136]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 800583a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583c:	4a21      	ldr	r2, [pc, #132]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 800583e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005844:	4b1f      	ldr	r3, [pc, #124]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 8005846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005848:	4a1e      	ldr	r2, [pc, #120]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 800584a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800584e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005850:	4b1c      	ldr	r3, [pc, #112]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 8005852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005854:	4a1b      	ldr	r2, [pc, #108]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 8005856:	f043 0301 	orr.w	r3, r3, #1
 800585a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800585c:	4b19      	ldr	r3, [pc, #100]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a18      	ldr	r2, [pc, #96]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 8005862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fc fc46 	bl	80020f8 <HAL_GetTick>
 800586c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005870:	f7fc fc42 	bl	80020f8 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e090      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005882:	4b10      	ldr	r3, [pc, #64]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCC_OscConfig+0x670>
 800588e:	e088      	b.n	80059a2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005890:	4b0c      	ldr	r3, [pc, #48]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a0b      	ldr	r2, [pc, #44]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 8005896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800589a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589c:	f7fc fc2c 	bl	80020f8 <HAL_GetTick>
 80058a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a4:	f7fc fc28 	bl	80020f8 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e076      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058b6:	4b03      	ldr	r3, [pc, #12]	@ (80058c4 <HAL_RCC_OscConfig+0x6c4>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0x6a4>
 80058c2:	e06e      	b.n	80059a2 <HAL_RCC_OscConfig+0x7a2>
 80058c4:	58024400 	.word	0x58024400
 80058c8:	fffffc0c 	.word	0xfffffc0c
 80058cc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80058d0:	4b36      	ldr	r3, [pc, #216]	@ (80059ac <HAL_RCC_OscConfig+0x7ac>)
 80058d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80058d6:	4b35      	ldr	r3, [pc, #212]	@ (80059ac <HAL_RCC_OscConfig+0x7ac>)
 80058d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d031      	beq.n	8005948 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f003 0203 	and.w	r2, r3, #3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d12a      	bne.n	8005948 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	091b      	lsrs	r3, r3, #4
 80058f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fe:	429a      	cmp	r2, r3
 8005900:	d122      	bne.n	8005948 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800590e:	429a      	cmp	r2, r3
 8005910:	d11a      	bne.n	8005948 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	0a5b      	lsrs	r3, r3, #9
 8005916:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800591e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005920:	429a      	cmp	r2, r3
 8005922:	d111      	bne.n	8005948 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	0c1b      	lsrs	r3, r3, #16
 8005928:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005930:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005932:	429a      	cmp	r2, r3
 8005934:	d108      	bne.n	8005948 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	0e1b      	lsrs	r3, r3, #24
 800593a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005942:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005944:	429a      	cmp	r2, r3
 8005946:	d001      	beq.n	800594c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e02b      	b.n	80059a4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800594c:	4b17      	ldr	r3, [pc, #92]	@ (80059ac <HAL_RCC_OscConfig+0x7ac>)
 800594e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005950:	08db      	lsrs	r3, r3, #3
 8005952:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005956:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	429a      	cmp	r2, r3
 8005960:	d01f      	beq.n	80059a2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005962:	4b12      	ldr	r3, [pc, #72]	@ (80059ac <HAL_RCC_OscConfig+0x7ac>)
 8005964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005966:	4a11      	ldr	r2, [pc, #68]	@ (80059ac <HAL_RCC_OscConfig+0x7ac>)
 8005968:	f023 0301 	bic.w	r3, r3, #1
 800596c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800596e:	f7fc fbc3 	bl	80020f8 <HAL_GetTick>
 8005972:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005974:	bf00      	nop
 8005976:	f7fc fbbf 	bl	80020f8 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	4293      	cmp	r3, r2
 8005980:	d0f9      	beq.n	8005976 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005982:	4b0a      	ldr	r3, [pc, #40]	@ (80059ac <HAL_RCC_OscConfig+0x7ac>)
 8005984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005986:	4b0a      	ldr	r3, [pc, #40]	@ (80059b0 <HAL_RCC_OscConfig+0x7b0>)
 8005988:	4013      	ands	r3, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800598e:	00d2      	lsls	r2, r2, #3
 8005990:	4906      	ldr	r1, [pc, #24]	@ (80059ac <HAL_RCC_OscConfig+0x7ac>)
 8005992:	4313      	orrs	r3, r2
 8005994:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005996:	4b05      	ldr	r3, [pc, #20]	@ (80059ac <HAL_RCC_OscConfig+0x7ac>)
 8005998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599a:	4a04      	ldr	r2, [pc, #16]	@ (80059ac <HAL_RCC_OscConfig+0x7ac>)
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3730      	adds	r7, #48	@ 0x30
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	58024400 	.word	0x58024400
 80059b0:	ffff0007 	.word	0xffff0007

080059b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e19c      	b.n	8005d02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059c8:	4b8a      	ldr	r3, [pc, #552]	@ (8005bf4 <HAL_RCC_ClockConfig+0x240>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d910      	bls.n	80059f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d6:	4b87      	ldr	r3, [pc, #540]	@ (8005bf4 <HAL_RCC_ClockConfig+0x240>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f023 020f 	bic.w	r2, r3, #15
 80059de:	4985      	ldr	r1, [pc, #532]	@ (8005bf4 <HAL_RCC_ClockConfig+0x240>)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e6:	4b83      	ldr	r3, [pc, #524]	@ (8005bf4 <HAL_RCC_ClockConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d001      	beq.n	80059f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e184      	b.n	8005d02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d010      	beq.n	8005a26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	4b7b      	ldr	r3, [pc, #492]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d908      	bls.n	8005a26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a14:	4b78      	ldr	r3, [pc, #480]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	4975      	ldr	r1, [pc, #468]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d010      	beq.n	8005a54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695a      	ldr	r2, [r3, #20]
 8005a36:	4b70      	ldr	r3, [pc, #448]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d908      	bls.n	8005a54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a42:	4b6d      	ldr	r3, [pc, #436]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	496a      	ldr	r1, [pc, #424]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d010      	beq.n	8005a82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699a      	ldr	r2, [r3, #24]
 8005a64:	4b64      	ldr	r3, [pc, #400]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d908      	bls.n	8005a82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a70:	4b61      	ldr	r3, [pc, #388]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	495e      	ldr	r1, [pc, #376]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d010      	beq.n	8005ab0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69da      	ldr	r2, [r3, #28]
 8005a92:	4b59      	ldr	r3, [pc, #356]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d908      	bls.n	8005ab0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a9e:	4b56      	ldr	r3, [pc, #344]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	4953      	ldr	r1, [pc, #332]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d010      	beq.n	8005ade <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d908      	bls.n	8005ade <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005acc:	4b4a      	ldr	r3, [pc, #296]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	f023 020f 	bic.w	r2, r3, #15
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	4947      	ldr	r1, [pc, #284]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d055      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005aea:	4b43      	ldr	r3, [pc, #268]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	4940      	ldr	r1, [pc, #256]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d107      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b04:	4b3c      	ldr	r3, [pc, #240]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d121      	bne.n	8005b54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0f6      	b.n	8005d02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d107      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b1c:	4b36      	ldr	r3, [pc, #216]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d115      	bne.n	8005b54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e0ea      	b.n	8005d02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d107      	bne.n	8005b44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b34:	4b30      	ldr	r3, [pc, #192]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d109      	bne.n	8005b54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e0de      	b.n	8005d02 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b44:	4b2c      	ldr	r3, [pc, #176]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e0d6      	b.n	8005d02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b54:	4b28      	ldr	r3, [pc, #160]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f023 0207 	bic.w	r2, r3, #7
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	4925      	ldr	r1, [pc, #148]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b66:	f7fc fac7 	bl	80020f8 <HAL_GetTick>
 8005b6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b6e:	f7fc fac3 	bl	80020f8 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e0be      	b.n	8005d02 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b84:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d1eb      	bne.n	8005b6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d010      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	4b14      	ldr	r3, [pc, #80]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d208      	bcs.n	8005bc4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bb2:	4b11      	ldr	r3, [pc, #68]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	f023 020f 	bic.w	r2, r3, #15
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	490e      	ldr	r1, [pc, #56]	@ (8005bf8 <HAL_RCC_ClockConfig+0x244>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf4 <HAL_RCC_ClockConfig+0x240>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d214      	bcs.n	8005bfc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd2:	4b08      	ldr	r3, [pc, #32]	@ (8005bf4 <HAL_RCC_ClockConfig+0x240>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f023 020f 	bic.w	r2, r3, #15
 8005bda:	4906      	ldr	r1, [pc, #24]	@ (8005bf4 <HAL_RCC_ClockConfig+0x240>)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005be2:	4b04      	ldr	r3, [pc, #16]	@ (8005bf4 <HAL_RCC_ClockConfig+0x240>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d005      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e086      	b.n	8005d02 <HAL_RCC_ClockConfig+0x34e>
 8005bf4:	52002000 	.word	0x52002000
 8005bf8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d010      	beq.n	8005c2a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691a      	ldr	r2, [r3, #16]
 8005c0c:	4b3f      	ldr	r3, [pc, #252]	@ (8005d0c <HAL_RCC_ClockConfig+0x358>)
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d208      	bcs.n	8005c2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c18:	4b3c      	ldr	r3, [pc, #240]	@ (8005d0c <HAL_RCC_ClockConfig+0x358>)
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	4939      	ldr	r1, [pc, #228]	@ (8005d0c <HAL_RCC_ClockConfig+0x358>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d010      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695a      	ldr	r2, [r3, #20]
 8005c3a:	4b34      	ldr	r3, [pc, #208]	@ (8005d0c <HAL_RCC_ClockConfig+0x358>)
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d208      	bcs.n	8005c58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c46:	4b31      	ldr	r3, [pc, #196]	@ (8005d0c <HAL_RCC_ClockConfig+0x358>)
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	492e      	ldr	r1, [pc, #184]	@ (8005d0c <HAL_RCC_ClockConfig+0x358>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d010      	beq.n	8005c86 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699a      	ldr	r2, [r3, #24]
 8005c68:	4b28      	ldr	r3, [pc, #160]	@ (8005d0c <HAL_RCC_ClockConfig+0x358>)
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d208      	bcs.n	8005c86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c74:	4b25      	ldr	r3, [pc, #148]	@ (8005d0c <HAL_RCC_ClockConfig+0x358>)
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	4922      	ldr	r1, [pc, #136]	@ (8005d0c <HAL_RCC_ClockConfig+0x358>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d010      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69da      	ldr	r2, [r3, #28]
 8005c96:	4b1d      	ldr	r3, [pc, #116]	@ (8005d0c <HAL_RCC_ClockConfig+0x358>)
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d208      	bcs.n	8005cb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8005d0c <HAL_RCC_ClockConfig+0x358>)
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	4917      	ldr	r1, [pc, #92]	@ (8005d0c <HAL_RCC_ClockConfig+0x358>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cb4:	f000 f834 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	4b14      	ldr	r3, [pc, #80]	@ (8005d0c <HAL_RCC_ClockConfig+0x358>)
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	0a1b      	lsrs	r3, r3, #8
 8005cc0:	f003 030f 	and.w	r3, r3, #15
 8005cc4:	4912      	ldr	r1, [pc, #72]	@ (8005d10 <HAL_RCC_ClockConfig+0x35c>)
 8005cc6:	5ccb      	ldrb	r3, [r1, r3]
 8005cc8:	f003 031f 	and.w	r3, r3, #31
 8005ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8005d0c <HAL_RCC_ClockConfig+0x358>)
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	4a0d      	ldr	r2, [pc, #52]	@ (8005d10 <HAL_RCC_ClockConfig+0x35c>)
 8005cdc:	5cd3      	ldrb	r3, [r2, r3]
 8005cde:	f003 031f 	and.w	r3, r3, #31
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8005d14 <HAL_RCC_ClockConfig+0x360>)
 8005cea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cec:	4a0a      	ldr	r2, [pc, #40]	@ (8005d18 <HAL_RCC_ClockConfig+0x364>)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8005d1c <HAL_RCC_ClockConfig+0x368>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fc f9b4 	bl	8002064 <HAL_InitTick>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	58024400 	.word	0x58024400
 8005d10:	0800a63c 	.word	0x0800a63c
 8005d14:	24000004 	.word	0x24000004
 8005d18:	24000000 	.word	0x24000000
 8005d1c:	24000008 	.word	0x24000008

08005d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b089      	sub	sp, #36	@ 0x24
 8005d24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d26:	4bb3      	ldr	r3, [pc, #716]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d2e:	2b18      	cmp	r3, #24
 8005d30:	f200 8155 	bhi.w	8005fde <HAL_RCC_GetSysClockFreq+0x2be>
 8005d34:	a201      	add	r2, pc, #4	@ (adr r2, 8005d3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005da1 	.word	0x08005da1
 8005d40:	08005fdf 	.word	0x08005fdf
 8005d44:	08005fdf 	.word	0x08005fdf
 8005d48:	08005fdf 	.word	0x08005fdf
 8005d4c:	08005fdf 	.word	0x08005fdf
 8005d50:	08005fdf 	.word	0x08005fdf
 8005d54:	08005fdf 	.word	0x08005fdf
 8005d58:	08005fdf 	.word	0x08005fdf
 8005d5c:	08005dc7 	.word	0x08005dc7
 8005d60:	08005fdf 	.word	0x08005fdf
 8005d64:	08005fdf 	.word	0x08005fdf
 8005d68:	08005fdf 	.word	0x08005fdf
 8005d6c:	08005fdf 	.word	0x08005fdf
 8005d70:	08005fdf 	.word	0x08005fdf
 8005d74:	08005fdf 	.word	0x08005fdf
 8005d78:	08005fdf 	.word	0x08005fdf
 8005d7c:	08005dcd 	.word	0x08005dcd
 8005d80:	08005fdf 	.word	0x08005fdf
 8005d84:	08005fdf 	.word	0x08005fdf
 8005d88:	08005fdf 	.word	0x08005fdf
 8005d8c:	08005fdf 	.word	0x08005fdf
 8005d90:	08005fdf 	.word	0x08005fdf
 8005d94:	08005fdf 	.word	0x08005fdf
 8005d98:	08005fdf 	.word	0x08005fdf
 8005d9c:	08005dd3 	.word	0x08005dd3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005da0:	4b94      	ldr	r3, [pc, #592]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d009      	beq.n	8005dc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dac:	4b91      	ldr	r3, [pc, #580]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	08db      	lsrs	r3, r3, #3
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	4a90      	ldr	r2, [pc, #576]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005db8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005dbe:	e111      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005dc0:	4b8d      	ldr	r3, [pc, #564]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005dc2:	61bb      	str	r3, [r7, #24]
      break;
 8005dc4:	e10e      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005dc6:	4b8d      	ldr	r3, [pc, #564]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005dc8:	61bb      	str	r3, [r7, #24]
      break;
 8005dca:	e10b      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8006000 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005dce:	61bb      	str	r3, [r7, #24]
      break;
 8005dd0:	e108      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dd2:	4b88      	ldr	r3, [pc, #544]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005ddc:	4b85      	ldr	r3, [pc, #532]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de0:	091b      	lsrs	r3, r3, #4
 8005de2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005de6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005de8:	4b82      	ldr	r3, [pc, #520]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005df2:	4b80      	ldr	r3, [pc, #512]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005df6:	08db      	lsrs	r3, r3, #3
 8005df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	fb02 f303 	mul.w	r3, r2, r3
 8005e02:	ee07 3a90 	vmov	s15, r3
 8005e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 80e1 	beq.w	8005fd8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	f000 8083 	beq.w	8005f24 <HAL_RCC_GetSysClockFreq+0x204>
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	f200 80a1 	bhi.w	8005f68 <HAL_RCC_GetSysClockFreq+0x248>
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <HAL_RCC_GetSysClockFreq+0x114>
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d056      	beq.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005e32:	e099      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e34:	4b6f      	ldr	r3, [pc, #444]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d02d      	beq.n	8005e9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e40:	4b6c      	ldr	r3, [pc, #432]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	08db      	lsrs	r3, r3, #3
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	4a6b      	ldr	r2, [pc, #428]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	ee07 3a90 	vmov	s15, r3
 8005e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	ee07 3a90 	vmov	s15, r3
 8005e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e6a:	4b62      	ldr	r3, [pc, #392]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e7e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e9a:	e087      	b.n	8005fac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006008 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eae:	4b51      	ldr	r3, [pc, #324]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ec2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ede:	e065      	b.n	8005fac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800600c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef2:	4b40      	ldr	r3, [pc, #256]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f06:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f22:	e043      	b.n	8005fac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006010 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f36:	4b2f      	ldr	r3, [pc, #188]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f4a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f66:	e021      	b.n	8005fac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f72:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800600c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f8e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005faa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005fac:	4b11      	ldr	r3, [pc, #68]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb0:	0a5b      	lsrs	r3, r3, #9
 8005fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	ee07 3a90 	vmov	s15, r3
 8005fc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005fc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fd0:	ee17 3a90 	vmov	r3, s15
 8005fd4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005fd6:	e005      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	61bb      	str	r3, [r7, #24]
      break;
 8005fdc:	e002      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005fde:	4b07      	ldr	r3, [pc, #28]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fe0:	61bb      	str	r3, [r7, #24]
      break;
 8005fe2:	bf00      	nop
  }

  return sysclockfreq;
 8005fe4:	69bb      	ldr	r3, [r7, #24]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3724      	adds	r7, #36	@ 0x24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	58024400 	.word	0x58024400
 8005ff8:	03d09000 	.word	0x03d09000
 8005ffc:	003d0900 	.word	0x003d0900
 8006000:	017d7840 	.word	0x017d7840
 8006004:	46000000 	.word	0x46000000
 8006008:	4c742400 	.word	0x4c742400
 800600c:	4a742400 	.word	0x4a742400
 8006010:	4bbebc20 	.word	0x4bbebc20

08006014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800601a:	f7ff fe81 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 800601e:	4602      	mov	r2, r0
 8006020:	4b10      	ldr	r3, [pc, #64]	@ (8006064 <HAL_RCC_GetHCLKFreq+0x50>)
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	0a1b      	lsrs	r3, r3, #8
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	490f      	ldr	r1, [pc, #60]	@ (8006068 <HAL_RCC_GetHCLKFreq+0x54>)
 800602c:	5ccb      	ldrb	r3, [r1, r3]
 800602e:	f003 031f 	and.w	r3, r3, #31
 8006032:	fa22 f303 	lsr.w	r3, r2, r3
 8006036:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006038:	4b0a      	ldr	r3, [pc, #40]	@ (8006064 <HAL_RCC_GetHCLKFreq+0x50>)
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	f003 030f 	and.w	r3, r3, #15
 8006040:	4a09      	ldr	r2, [pc, #36]	@ (8006068 <HAL_RCC_GetHCLKFreq+0x54>)
 8006042:	5cd3      	ldrb	r3, [r2, r3]
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	fa22 f303 	lsr.w	r3, r2, r3
 800604e:	4a07      	ldr	r2, [pc, #28]	@ (800606c <HAL_RCC_GetHCLKFreq+0x58>)
 8006050:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006052:	4a07      	ldr	r2, [pc, #28]	@ (8006070 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006058:	4b04      	ldr	r3, [pc, #16]	@ (800606c <HAL_RCC_GetHCLKFreq+0x58>)
 800605a:	681b      	ldr	r3, [r3, #0]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	58024400 	.word	0x58024400
 8006068:	0800a63c 	.word	0x0800a63c
 800606c:	24000004 	.word	0x24000004
 8006070:	24000000 	.word	0x24000000

08006074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006078:	f7ff ffcc 	bl	8006014 <HAL_RCC_GetHCLKFreq>
 800607c:	4602      	mov	r2, r0
 800607e:	4b06      	ldr	r3, [pc, #24]	@ (8006098 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	091b      	lsrs	r3, r3, #4
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	4904      	ldr	r1, [pc, #16]	@ (800609c <HAL_RCC_GetPCLK1Freq+0x28>)
 800608a:	5ccb      	ldrb	r3, [r1, r3]
 800608c:	f003 031f 	and.w	r3, r3, #31
 8006090:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006094:	4618      	mov	r0, r3
 8006096:	bd80      	pop	{r7, pc}
 8006098:	58024400 	.word	0x58024400
 800609c:	0800a63c 	.word	0x0800a63c

080060a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80060a4:	f7ff ffb6 	bl	8006014 <HAL_RCC_GetHCLKFreq>
 80060a8:	4602      	mov	r2, r0
 80060aa:	4b06      	ldr	r3, [pc, #24]	@ (80060c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	0a1b      	lsrs	r3, r3, #8
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	4904      	ldr	r1, [pc, #16]	@ (80060c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060b6:	5ccb      	ldrb	r3, [r1, r3]
 80060b8:	f003 031f 	and.w	r3, r3, #31
 80060bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	58024400 	.word	0x58024400
 80060c8:	0800a63c 	.word	0x0800a63c

080060cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060d0:	b0c6      	sub	sp, #280	@ 0x118
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060d8:	2300      	movs	r3, #0
 80060da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060de:	2300      	movs	r3, #0
 80060e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80060f0:	2500      	movs	r5, #0
 80060f2:	ea54 0305 	orrs.w	r3, r4, r5
 80060f6:	d049      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006102:	d02f      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006104:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006108:	d828      	bhi.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800610a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800610e:	d01a      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006110:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006114:	d822      	bhi.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800611a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800611e:	d007      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006120:	e01c      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006122:	4bab      	ldr	r3, [pc, #684]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006126:	4aaa      	ldr	r2, [pc, #680]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800612c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800612e:	e01a      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006134:	3308      	adds	r3, #8
 8006136:	2102      	movs	r1, #2
 8006138:	4618      	mov	r0, r3
 800613a:	f001 fc25 	bl	8007988 <RCCEx_PLL2_Config>
 800613e:	4603      	mov	r3, r0
 8006140:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006144:	e00f      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614a:	3328      	adds	r3, #40	@ 0x28
 800614c:	2102      	movs	r1, #2
 800614e:	4618      	mov	r0, r3
 8006150:	f001 fccc 	bl	8007aec <RCCEx_PLL3_Config>
 8006154:	4603      	mov	r3, r0
 8006156:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800615a:	e004      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006162:	e000      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006166:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10a      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800616e:	4b98      	ldr	r3, [pc, #608]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006172:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800617c:	4a94      	ldr	r2, [pc, #592]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800617e:	430b      	orrs	r3, r1
 8006180:	6513      	str	r3, [r2, #80]	@ 0x50
 8006182:	e003      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006184:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006188:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800618c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006194:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006198:	f04f 0900 	mov.w	r9, #0
 800619c:	ea58 0309 	orrs.w	r3, r8, r9
 80061a0:	d047      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80061a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d82a      	bhi.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80061ac:	a201      	add	r2, pc, #4	@ (adr r2, 80061b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	080061c9 	.word	0x080061c9
 80061b8:	080061d7 	.word	0x080061d7
 80061bc:	080061ed 	.word	0x080061ed
 80061c0:	0800620b 	.word	0x0800620b
 80061c4:	0800620b 	.word	0x0800620b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061c8:	4b81      	ldr	r3, [pc, #516]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061cc:	4a80      	ldr	r2, [pc, #512]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061d4:	e01a      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061da:	3308      	adds	r3, #8
 80061dc:	2100      	movs	r1, #0
 80061de:	4618      	mov	r0, r3
 80061e0:	f001 fbd2 	bl	8007988 <RCCEx_PLL2_Config>
 80061e4:	4603      	mov	r3, r0
 80061e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061ea:	e00f      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f0:	3328      	adds	r3, #40	@ 0x28
 80061f2:	2100      	movs	r1, #0
 80061f4:	4618      	mov	r0, r3
 80061f6:	f001 fc79 	bl	8007aec <RCCEx_PLL3_Config>
 80061fa:	4603      	mov	r3, r0
 80061fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006200:	e004      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006208:	e000      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800620a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800620c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10a      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006214:	4b6e      	ldr	r3, [pc, #440]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006218:	f023 0107 	bic.w	r1, r3, #7
 800621c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006222:	4a6b      	ldr	r2, [pc, #428]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006224:	430b      	orrs	r3, r1
 8006226:	6513      	str	r3, [r2, #80]	@ 0x50
 8006228:	e003      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800622e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800623e:	f04f 0b00 	mov.w	fp, #0
 8006242:	ea5a 030b 	orrs.w	r3, sl, fp
 8006246:	d05b      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800624c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006250:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006254:	d03b      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006256:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800625a:	d834      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800625c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006260:	d037      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006262:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006266:	d82e      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006268:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800626c:	d033      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800626e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006272:	d828      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006274:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006278:	d01a      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800627a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800627e:	d822      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006284:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006288:	d007      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800628a:	e01c      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800628c:	4b50      	ldr	r3, [pc, #320]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800628e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006290:	4a4f      	ldr	r2, [pc, #316]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006296:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006298:	e01e      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800629a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629e:	3308      	adds	r3, #8
 80062a0:	2100      	movs	r1, #0
 80062a2:	4618      	mov	r0, r3
 80062a4:	f001 fb70 	bl	8007988 <RCCEx_PLL2_Config>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80062ae:	e013      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b4:	3328      	adds	r3, #40	@ 0x28
 80062b6:	2100      	movs	r1, #0
 80062b8:	4618      	mov	r0, r3
 80062ba:	f001 fc17 	bl	8007aec <RCCEx_PLL3_Config>
 80062be:	4603      	mov	r3, r0
 80062c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062c4:	e008      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062cc:	e004      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80062ce:	bf00      	nop
 80062d0:	e002      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80062d2:	bf00      	nop
 80062d4:	e000      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80062d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10b      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80062e0:	4b3b      	ldr	r3, [pc, #236]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80062e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80062f0:	4a37      	ldr	r2, [pc, #220]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062f2:	430b      	orrs	r3, r1
 80062f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80062f6:	e003      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800630c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006310:	2300      	movs	r3, #0
 8006312:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006316:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800631a:	460b      	mov	r3, r1
 800631c:	4313      	orrs	r3, r2
 800631e:	d05d      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006324:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006328:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800632c:	d03b      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800632e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006332:	d834      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006334:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006338:	d037      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800633a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800633e:	d82e      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006340:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006344:	d033      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006346:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800634a:	d828      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800634c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006350:	d01a      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006352:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006356:	d822      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800635c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006360:	d007      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006362:	e01c      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006364:	4b1a      	ldr	r3, [pc, #104]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	4a19      	ldr	r2, [pc, #100]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800636a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800636e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006370:	e01e      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006376:	3308      	adds	r3, #8
 8006378:	2100      	movs	r1, #0
 800637a:	4618      	mov	r0, r3
 800637c:	f001 fb04 	bl	8007988 <RCCEx_PLL2_Config>
 8006380:	4603      	mov	r3, r0
 8006382:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006386:	e013      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638c:	3328      	adds	r3, #40	@ 0x28
 800638e:	2100      	movs	r1, #0
 8006390:	4618      	mov	r0, r3
 8006392:	f001 fbab 	bl	8007aec <RCCEx_PLL3_Config>
 8006396:	4603      	mov	r3, r0
 8006398:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800639c:	e008      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063a4:	e004      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80063a6:	bf00      	nop
 80063a8:	e002      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80063aa:	bf00      	nop
 80063ac:	e000      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80063ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10d      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80063b8:	4b05      	ldr	r3, [pc, #20]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80063c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80063c8:	4a01      	ldr	r2, [pc, #4]	@ (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063ca:	430b      	orrs	r3, r1
 80063cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80063ce:	e005      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80063d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80063dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80063e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80063ec:	2300      	movs	r3, #0
 80063ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80063f2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4313      	orrs	r3, r2
 80063fa:	d03a      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80063fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006402:	2b30      	cmp	r3, #48	@ 0x30
 8006404:	d01f      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006406:	2b30      	cmp	r3, #48	@ 0x30
 8006408:	d819      	bhi.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800640a:	2b20      	cmp	r3, #32
 800640c:	d00c      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800640e:	2b20      	cmp	r3, #32
 8006410:	d815      	bhi.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006412:	2b00      	cmp	r3, #0
 8006414:	d019      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006416:	2b10      	cmp	r3, #16
 8006418:	d111      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800641a:	4baa      	ldr	r3, [pc, #680]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800641c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641e:	4aa9      	ldr	r2, [pc, #676]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006424:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006426:	e011      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642c:	3308      	adds	r3, #8
 800642e:	2102      	movs	r1, #2
 8006430:	4618      	mov	r0, r3
 8006432:	f001 faa9 	bl	8007988 <RCCEx_PLL2_Config>
 8006436:	4603      	mov	r3, r0
 8006438:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800643c:	e006      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006444:	e002      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006446:	bf00      	nop
 8006448:	e000      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800644a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800644c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006454:	4b9b      	ldr	r3, [pc, #620]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006458:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800645c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006462:	4a98      	ldr	r2, [pc, #608]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006464:	430b      	orrs	r3, r1
 8006466:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006468:	e003      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800646e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800647e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006482:	2300      	movs	r3, #0
 8006484:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006488:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800648c:	460b      	mov	r3, r1
 800648e:	4313      	orrs	r3, r2
 8006490:	d051      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006498:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800649c:	d035      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800649e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064a2:	d82e      	bhi.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80064a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064a8:	d031      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80064aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064ae:	d828      	bhi.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80064b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064b4:	d01a      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x420>
 80064b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064ba:	d822      	bhi.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80064c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064c4:	d007      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80064c6:	e01c      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c8:	4b7e      	ldr	r3, [pc, #504]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064cc:	4a7d      	ldr	r2, [pc, #500]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064d4:	e01c      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064da:	3308      	adds	r3, #8
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f001 fa52 	bl	8007988 <RCCEx_PLL2_Config>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064ea:	e011      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f0:	3328      	adds	r3, #40	@ 0x28
 80064f2:	2100      	movs	r1, #0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 faf9 	bl	8007aec <RCCEx_PLL3_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006500:	e006      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006508:	e002      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800650a:	bf00      	nop
 800650c:	e000      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800650e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10a      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006518:	4b6a      	ldr	r3, [pc, #424]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800651a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800651c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006526:	4a67      	ldr	r2, [pc, #412]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006528:	430b      	orrs	r3, r1
 800652a:	6513      	str	r3, [r2, #80]	@ 0x50
 800652c:	e003      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006532:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006542:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006546:	2300      	movs	r3, #0
 8006548:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800654c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006550:	460b      	mov	r3, r1
 8006552:	4313      	orrs	r3, r2
 8006554:	d053      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800655c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006560:	d033      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006562:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006566:	d82c      	bhi.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006568:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800656c:	d02f      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x502>
 800656e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006572:	d826      	bhi.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006574:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006578:	d02b      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800657a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800657e:	d820      	bhi.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006584:	d012      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006586:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800658a:	d81a      	bhi.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800658c:	2b00      	cmp	r3, #0
 800658e:	d022      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006594:	d115      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659a:	3308      	adds	r3, #8
 800659c:	2101      	movs	r1, #1
 800659e:	4618      	mov	r0, r3
 80065a0:	f001 f9f2 	bl	8007988 <RCCEx_PLL2_Config>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80065aa:	e015      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b0:	3328      	adds	r3, #40	@ 0x28
 80065b2:	2101      	movs	r1, #1
 80065b4:	4618      	mov	r0, r3
 80065b6:	f001 fa99 	bl	8007aec <RCCEx_PLL3_Config>
 80065ba:	4603      	mov	r3, r0
 80065bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80065c0:	e00a      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065c8:	e006      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80065ca:	bf00      	nop
 80065cc:	e004      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80065ce:	bf00      	nop
 80065d0:	e002      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80065d2:	bf00      	nop
 80065d4:	e000      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80065d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80065e0:	4b38      	ldr	r3, [pc, #224]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065ee:	4a35      	ldr	r2, [pc, #212]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065f0:	430b      	orrs	r3, r1
 80065f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80065f4:	e003      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800660a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800660e:	2300      	movs	r3, #0
 8006610:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006614:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006618:	460b      	mov	r3, r1
 800661a:	4313      	orrs	r3, r2
 800661c:	d058      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800661e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006622:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006626:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800662a:	d033      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800662c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006630:	d82c      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006636:	d02f      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800663c:	d826      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800663e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006642:	d02b      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006644:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006648:	d820      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800664a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800664e:	d012      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006654:	d81a      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d022      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800665a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800665e:	d115      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006664:	3308      	adds	r3, #8
 8006666:	2101      	movs	r1, #1
 8006668:	4618      	mov	r0, r3
 800666a:	f001 f98d 	bl	8007988 <RCCEx_PLL2_Config>
 800666e:	4603      	mov	r3, r0
 8006670:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006674:	e015      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800667a:	3328      	adds	r3, #40	@ 0x28
 800667c:	2101      	movs	r1, #1
 800667e:	4618      	mov	r0, r3
 8006680:	f001 fa34 	bl	8007aec <RCCEx_PLL3_Config>
 8006684:	4603      	mov	r3, r0
 8006686:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800668a:	e00a      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006692:	e006      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006694:	bf00      	nop
 8006696:	e004      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006698:	bf00      	nop
 800669a:	e002      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80066a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10e      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80066aa:	4b06      	ldr	r3, [pc, #24]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80066b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80066ba:	4a02      	ldr	r2, [pc, #8]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066bc:	430b      	orrs	r3, r1
 80066be:	6593      	str	r3, [r2, #88]	@ 0x58
 80066c0:	e006      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80066c2:	bf00      	nop
 80066c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80066dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066e0:	2300      	movs	r3, #0
 80066e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80066e6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4313      	orrs	r3, r2
 80066ee:	d037      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80066f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066fa:	d00e      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80066fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006700:	d816      	bhi.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d018      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800670a:	d111      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800670c:	4bc4      	ldr	r3, [pc, #784]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800670e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006710:	4ac3      	ldr	r2, [pc, #780]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006716:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006718:	e00f      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800671a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671e:	3308      	adds	r3, #8
 8006720:	2101      	movs	r1, #1
 8006722:	4618      	mov	r0, r3
 8006724:	f001 f930 	bl	8007988 <RCCEx_PLL2_Config>
 8006728:	4603      	mov	r3, r0
 800672a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800672e:	e004      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006736:	e000      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800673a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10a      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006742:	4bb7      	ldr	r3, [pc, #732]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006746:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800674a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006750:	4ab3      	ldr	r2, [pc, #716]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006752:	430b      	orrs	r3, r1
 8006754:	6513      	str	r3, [r2, #80]	@ 0x50
 8006756:	e003      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800675c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800676c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006770:	2300      	movs	r3, #0
 8006772:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006776:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800677a:	460b      	mov	r3, r1
 800677c:	4313      	orrs	r3, r2
 800677e:	d039      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006786:	2b03      	cmp	r3, #3
 8006788:	d81c      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800678a:	a201      	add	r2, pc, #4	@ (adr r2, 8006790 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800678c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006790:	080067cd 	.word	0x080067cd
 8006794:	080067a1 	.word	0x080067a1
 8006798:	080067af 	.word	0x080067af
 800679c:	080067cd 	.word	0x080067cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067a0:	4b9f      	ldr	r3, [pc, #636]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a4:	4a9e      	ldr	r2, [pc, #632]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80067ac:	e00f      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b2:	3308      	adds	r3, #8
 80067b4:	2102      	movs	r1, #2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f001 f8e6 	bl	8007988 <RCCEx_PLL2_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80067c2:	e004      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067ca:	e000      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80067cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80067d6:	4b92      	ldr	r3, [pc, #584]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067da:	f023 0103 	bic.w	r1, r3, #3
 80067de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067e4:	4a8e      	ldr	r2, [pc, #568]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067e6:	430b      	orrs	r3, r1
 80067e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067ea:	e003      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006800:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006804:	2300      	movs	r3, #0
 8006806:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800680a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800680e:	460b      	mov	r3, r1
 8006810:	4313      	orrs	r3, r2
 8006812:	f000 8099 	beq.w	8006948 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006816:	4b83      	ldr	r3, [pc, #524]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a82      	ldr	r2, [pc, #520]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800681c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006820:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006822:	f7fb fc69 	bl	80020f8 <HAL_GetTick>
 8006826:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800682a:	e00b      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800682c:	f7fb fc64 	bl	80020f8 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	2b64      	cmp	r3, #100	@ 0x64
 800683a:	d903      	bls.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006842:	e005      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006844:	4b77      	ldr	r3, [pc, #476]	@ (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800684c:	2b00      	cmp	r3, #0
 800684e:	d0ed      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006850:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006854:	2b00      	cmp	r3, #0
 8006856:	d173      	bne.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006858:	4b71      	ldr	r3, [pc, #452]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800685a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800685c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006860:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006864:	4053      	eors	r3, r2
 8006866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800686a:	2b00      	cmp	r3, #0
 800686c:	d015      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800686e:	4b6c      	ldr	r3, [pc, #432]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006876:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800687a:	4b69      	ldr	r3, [pc, #420]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800687c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687e:	4a68      	ldr	r2, [pc, #416]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006884:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006886:	4b66      	ldr	r3, [pc, #408]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688a:	4a65      	ldr	r2, [pc, #404]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800688c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006890:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006892:	4a63      	ldr	r2, [pc, #396]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006894:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006898:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068a6:	d118      	bne.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a8:	f7fb fc26 	bl	80020f8 <HAL_GetTick>
 80068ac:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068b0:	e00d      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068b2:	f7fb fc21 	bl	80020f8 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80068bc:	1ad2      	subs	r2, r2, r3
 80068be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d903      	bls.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80068cc:	e005      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068ce:	4b54      	ldr	r3, [pc, #336]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0eb      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80068da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d129      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068f2:	d10e      	bne.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80068f4:	4b4a      	ldr	r3, [pc, #296]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80068fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006900:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006904:	091a      	lsrs	r2, r3, #4
 8006906:	4b48      	ldr	r3, [pc, #288]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006908:	4013      	ands	r3, r2
 800690a:	4a45      	ldr	r2, [pc, #276]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800690c:	430b      	orrs	r3, r1
 800690e:	6113      	str	r3, [r2, #16]
 8006910:	e005      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006912:	4b43      	ldr	r3, [pc, #268]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	4a42      	ldr	r2, [pc, #264]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006918:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800691c:	6113      	str	r3, [r2, #16]
 800691e:	4b40      	ldr	r3, [pc, #256]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006920:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800692a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800692e:	4a3c      	ldr	r2, [pc, #240]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006930:	430b      	orrs	r3, r1
 8006932:	6713      	str	r3, [r2, #112]	@ 0x70
 8006934:	e008      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006936:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800693a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800693e:	e003      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006940:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006944:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006950:	f002 0301 	and.w	r3, r2, #1
 8006954:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006958:	2300      	movs	r3, #0
 800695a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800695e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006962:	460b      	mov	r3, r1
 8006964:	4313      	orrs	r3, r2
 8006966:	f000 808f 	beq.w	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800696a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006970:	2b28      	cmp	r3, #40	@ 0x28
 8006972:	d871      	bhi.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006974:	a201      	add	r2, pc, #4	@ (adr r2, 800697c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697a:	bf00      	nop
 800697c:	08006a61 	.word	0x08006a61
 8006980:	08006a59 	.word	0x08006a59
 8006984:	08006a59 	.word	0x08006a59
 8006988:	08006a59 	.word	0x08006a59
 800698c:	08006a59 	.word	0x08006a59
 8006990:	08006a59 	.word	0x08006a59
 8006994:	08006a59 	.word	0x08006a59
 8006998:	08006a59 	.word	0x08006a59
 800699c:	08006a2d 	.word	0x08006a2d
 80069a0:	08006a59 	.word	0x08006a59
 80069a4:	08006a59 	.word	0x08006a59
 80069a8:	08006a59 	.word	0x08006a59
 80069ac:	08006a59 	.word	0x08006a59
 80069b0:	08006a59 	.word	0x08006a59
 80069b4:	08006a59 	.word	0x08006a59
 80069b8:	08006a59 	.word	0x08006a59
 80069bc:	08006a43 	.word	0x08006a43
 80069c0:	08006a59 	.word	0x08006a59
 80069c4:	08006a59 	.word	0x08006a59
 80069c8:	08006a59 	.word	0x08006a59
 80069cc:	08006a59 	.word	0x08006a59
 80069d0:	08006a59 	.word	0x08006a59
 80069d4:	08006a59 	.word	0x08006a59
 80069d8:	08006a59 	.word	0x08006a59
 80069dc:	08006a61 	.word	0x08006a61
 80069e0:	08006a59 	.word	0x08006a59
 80069e4:	08006a59 	.word	0x08006a59
 80069e8:	08006a59 	.word	0x08006a59
 80069ec:	08006a59 	.word	0x08006a59
 80069f0:	08006a59 	.word	0x08006a59
 80069f4:	08006a59 	.word	0x08006a59
 80069f8:	08006a59 	.word	0x08006a59
 80069fc:	08006a61 	.word	0x08006a61
 8006a00:	08006a59 	.word	0x08006a59
 8006a04:	08006a59 	.word	0x08006a59
 8006a08:	08006a59 	.word	0x08006a59
 8006a0c:	08006a59 	.word	0x08006a59
 8006a10:	08006a59 	.word	0x08006a59
 8006a14:	08006a59 	.word	0x08006a59
 8006a18:	08006a59 	.word	0x08006a59
 8006a1c:	08006a61 	.word	0x08006a61
 8006a20:	58024400 	.word	0x58024400
 8006a24:	58024800 	.word	0x58024800
 8006a28:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a30:	3308      	adds	r3, #8
 8006a32:	2101      	movs	r1, #1
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 ffa7 	bl	8007988 <RCCEx_PLL2_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a40:	e00f      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a46:	3328      	adds	r3, #40	@ 0x28
 8006a48:	2101      	movs	r1, #1
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f001 f84e 	bl	8007aec <RCCEx_PLL3_Config>
 8006a50:	4603      	mov	r3, r0
 8006a52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a56:	e004      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a5e:	e000      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a6a:	4bbf      	ldr	r3, [pc, #764]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a6e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a78:	4abb      	ldr	r2, [pc, #748]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a7a:	430b      	orrs	r3, r1
 8006a7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a7e:	e003      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f002 0302 	and.w	r3, r2, #2
 8006a94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a9e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	d041      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aae:	2b05      	cmp	r3, #5
 8006ab0:	d824      	bhi.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006b05 	.word	0x08006b05
 8006abc:	08006ad1 	.word	0x08006ad1
 8006ac0:	08006ae7 	.word	0x08006ae7
 8006ac4:	08006b05 	.word	0x08006b05
 8006ac8:	08006b05 	.word	0x08006b05
 8006acc:	08006b05 	.word	0x08006b05
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 ff55 	bl	8007988 <RCCEx_PLL2_Config>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ae4:	e00f      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aea:	3328      	adds	r3, #40	@ 0x28
 8006aec:	2101      	movs	r1, #1
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 fffc 	bl	8007aec <RCCEx_PLL3_Config>
 8006af4:	4603      	mov	r3, r0
 8006af6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006afa:	e004      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b02:	e000      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b0e:	4b96      	ldr	r3, [pc, #600]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b12:	f023 0107 	bic.w	r1, r3, #7
 8006b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b1c:	4a92      	ldr	r2, [pc, #584]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b1e:	430b      	orrs	r3, r1
 8006b20:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b22:	e003      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	f002 0304 	and.w	r3, r2, #4
 8006b38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b42:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b46:	460b      	mov	r3, r1
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	d044      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b54:	2b05      	cmp	r3, #5
 8006b56:	d825      	bhi.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006b58:	a201      	add	r2, pc, #4	@ (adr r2, 8006b60 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006bad 	.word	0x08006bad
 8006b64:	08006b79 	.word	0x08006b79
 8006b68:	08006b8f 	.word	0x08006b8f
 8006b6c:	08006bad 	.word	0x08006bad
 8006b70:	08006bad 	.word	0x08006bad
 8006b74:	08006bad 	.word	0x08006bad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	2101      	movs	r1, #1
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 ff01 	bl	8007988 <RCCEx_PLL2_Config>
 8006b86:	4603      	mov	r3, r0
 8006b88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b8c:	e00f      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b92:	3328      	adds	r3, #40	@ 0x28
 8006b94:	2101      	movs	r1, #1
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 ffa8 	bl	8007aec <RCCEx_PLL3_Config>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ba2:	e004      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006baa:	e000      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bb6:	4b6c      	ldr	r3, [pc, #432]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bba:	f023 0107 	bic.w	r1, r3, #7
 8006bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bc6:	4a68      	ldr	r2, [pc, #416]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bcc:	e003      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f002 0320 	and.w	r3, r2, #32
 8006be2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006be6:	2300      	movs	r3, #0
 8006be8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006bec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	d055      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c02:	d033      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c08:	d82c      	bhi.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c0e:	d02f      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c14:	d826      	bhi.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006c16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c1a:	d02b      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006c1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c20:	d820      	bhi.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006c22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c26:	d012      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c2c:	d81a      	bhi.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d022      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006c32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c36:	d115      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3c:	3308      	adds	r3, #8
 8006c3e:	2100      	movs	r1, #0
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fea1 	bl	8007988 <RCCEx_PLL2_Config>
 8006c46:	4603      	mov	r3, r0
 8006c48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c4c:	e015      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c52:	3328      	adds	r3, #40	@ 0x28
 8006c54:	2102      	movs	r1, #2
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 ff48 	bl	8007aec <RCCEx_PLL3_Config>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c62:	e00a      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c6a:	e006      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006c6c:	bf00      	nop
 8006c6e:	e004      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006c70:	bf00      	nop
 8006c72:	e002      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006c74:	bf00      	nop
 8006c76:	e000      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10b      	bne.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c82:	4b39      	ldr	r3, [pc, #228]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c86:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c92:	4a35      	ldr	r2, [pc, #212]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c94:	430b      	orrs	r3, r1
 8006c96:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c98:	e003      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006cae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006cb8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	d058      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006cce:	d033      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006cd0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006cd4:	d82c      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cda:	d02f      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ce0:	d826      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006ce2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ce6:	d02b      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006ce8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cec:	d820      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006cee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cf2:	d012      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cf8:	d81a      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d022      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d02:	d115      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d08:	3308      	adds	r3, #8
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 fe3b 	bl	8007988 <RCCEx_PLL2_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d18:	e015      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1e:	3328      	adds	r3, #40	@ 0x28
 8006d20:	2102      	movs	r1, #2
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 fee2 	bl	8007aec <RCCEx_PLL3_Config>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d2e:	e00a      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d36:	e006      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006d38:	bf00      	nop
 8006d3a:	e004      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006d3c:	bf00      	nop
 8006d3e:	e002      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006d40:	bf00      	nop
 8006d42:	e000      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10e      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d4e:	4b06      	ldr	r3, [pc, #24]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d52:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d5e:	4a02      	ldr	r2, [pc, #8]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d60:	430b      	orrs	r3, r1
 8006d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d64:	e006      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006d66:	bf00      	nop
 8006d68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006d80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d84:	2300      	movs	r3, #0
 8006d86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4313      	orrs	r3, r2
 8006d92:	d055      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d9c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006da0:	d033      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006da2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006da6:	d82c      	bhi.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006da8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dac:	d02f      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006dae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006db2:	d826      	bhi.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006db4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006db8:	d02b      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006dba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006dbe:	d820      	bhi.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006dc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dc4:	d012      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006dc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dca:	d81a      	bhi.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d022      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dd4:	d115      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dda:	3308      	adds	r3, #8
 8006ddc:	2100      	movs	r1, #0
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fdd2 	bl	8007988 <RCCEx_PLL2_Config>
 8006de4:	4603      	mov	r3, r0
 8006de6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006dea:	e015      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df0:	3328      	adds	r3, #40	@ 0x28
 8006df2:	2102      	movs	r1, #2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 fe79 	bl	8007aec <RCCEx_PLL3_Config>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e00:	e00a      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e08:	e006      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006e0a:	bf00      	nop
 8006e0c:	e004      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006e0e:	bf00      	nop
 8006e10:	e002      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006e12:	bf00      	nop
 8006e14:	e000      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10b      	bne.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006e20:	4ba0      	ldr	r3, [pc, #640]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e24:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e30:	4a9c      	ldr	r2, [pc, #624]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e32:	430b      	orrs	r3, r1
 8006e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e36:	e003      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	f002 0308 	and.w	r3, r2, #8
 8006e4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e50:	2300      	movs	r3, #0
 8006e52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e56:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	d01e      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e6c:	d10c      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e72:	3328      	adds	r3, #40	@ 0x28
 8006e74:	2102      	movs	r1, #2
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fe38 	bl	8007aec <RCCEx_PLL3_Config>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006e88:	4b86      	ldr	r3, [pc, #536]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e8c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e98:	4a82      	ldr	r2, [pc, #520]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e9a:	430b      	orrs	r3, r1
 8006e9c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	f002 0310 	and.w	r3, r2, #16
 8006eaa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006eb4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	d01e      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eca:	d10c      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed0:	3328      	adds	r3, #40	@ 0x28
 8006ed2:	2102      	movs	r1, #2
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 fe09 	bl	8007aec <RCCEx_PLL3_Config>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ee6:	4b6f      	ldr	r3, [pc, #444]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ef6:	4a6b      	ldr	r2, [pc, #428]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006f08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f0e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006f12:	460b      	mov	r3, r1
 8006f14:	4313      	orrs	r3, r2
 8006f16:	d03e      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f24:	d022      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006f26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f2a:	d81b      	bhi.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f34:	d00b      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006f36:	e015      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	2100      	movs	r1, #0
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fd21 	bl	8007988 <RCCEx_PLL2_Config>
 8006f46:	4603      	mov	r3, r0
 8006f48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f4c:	e00f      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f52:	3328      	adds	r3, #40	@ 0x28
 8006f54:	2102      	movs	r1, #2
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fdc8 	bl	8007aec <RCCEx_PLL3_Config>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f62:	e004      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f6a:	e000      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10b      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f76:	4b4b      	ldr	r3, [pc, #300]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f86:	4a47      	ldr	r2, [pc, #284]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f88:	430b      	orrs	r3, r1
 8006f8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f8c:	e003      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006fa2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fa8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006fac:	460b      	mov	r3, r1
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	d03b      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fbe:	d01f      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006fc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fc4:	d818      	bhi.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006fc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fca:	d003      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006fcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fd0:	d007      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006fd2:	e011      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fd4:	4b33      	ldr	r3, [pc, #204]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd8:	4a32      	ldr	r2, [pc, #200]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006fe0:	e00f      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe6:	3328      	adds	r3, #40	@ 0x28
 8006fe8:	2101      	movs	r1, #1
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fd7e 	bl	8007aec <RCCEx_PLL3_Config>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ff6:	e004      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ffe:	e000      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007002:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800700a:	4b26      	ldr	r3, [pc, #152]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800700c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800700e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800701a:	4a22      	ldr	r2, [pc, #136]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800701c:	430b      	orrs	r3, r1
 800701e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007020:	e003      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007022:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007026:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800702a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007036:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007038:	2300      	movs	r3, #0
 800703a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800703c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007040:	460b      	mov	r3, r1
 8007042:	4313      	orrs	r3, r2
 8007044:	d034      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800704a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007054:	d007      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007056:	e011      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007058:	4b12      	ldr	r3, [pc, #72]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800705a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705c:	4a11      	ldr	r2, [pc, #68]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800705e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007062:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007064:	e00e      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706a:	3308      	adds	r3, #8
 800706c:	2102      	movs	r1, #2
 800706e:	4618      	mov	r0, r3
 8007070:	f000 fc8a 	bl	8007988 <RCCEx_PLL2_Config>
 8007074:	4603      	mov	r3, r0
 8007076:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800707a:	e003      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10d      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800708c:	4b05      	ldr	r3, [pc, #20]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800708e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007090:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800709a:	4a02      	ldr	r2, [pc, #8]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800709c:	430b      	orrs	r3, r1
 800709e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80070a0:	e006      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80070a2:	bf00      	nop
 80070a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80070b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80070bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80070be:	2300      	movs	r3, #0
 80070c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80070c2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80070c6:	460b      	mov	r3, r1
 80070c8:	4313      	orrs	r3, r2
 80070ca:	d00c      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80070cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d0:	3328      	adds	r3, #40	@ 0x28
 80070d2:	2102      	movs	r1, #2
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 fd09 	bl	8007aec <RCCEx_PLL3_Config>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80070e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80070f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070f4:	2300      	movs	r3, #0
 80070f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070f8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80070fc:	460b      	mov	r3, r1
 80070fe:	4313      	orrs	r3, r2
 8007100:	d036      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007106:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007108:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800710c:	d018      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800710e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007112:	d811      	bhi.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007118:	d014      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800711a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800711e:	d80b      	bhi.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007120:	2b00      	cmp	r3, #0
 8007122:	d011      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007128:	d106      	bne.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800712a:	4bb7      	ldr	r3, [pc, #732]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800712c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712e:	4ab6      	ldr	r2, [pc, #728]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007134:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007136:	e008      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800713e:	e004      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007140:	bf00      	nop
 8007142:	e002      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007144:	bf00      	nop
 8007146:	e000      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800714a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10a      	bne.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007152:	4bad      	ldr	r3, [pc, #692]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007156:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800715a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007160:	4aa9      	ldr	r2, [pc, #676]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007162:	430b      	orrs	r3, r1
 8007164:	6553      	str	r3, [r2, #84]	@ 0x54
 8007166:	e003      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007168:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800716c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800717c:	653b      	str	r3, [r7, #80]	@ 0x50
 800717e:	2300      	movs	r3, #0
 8007180:	657b      	str	r3, [r7, #84]	@ 0x54
 8007182:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007186:	460b      	mov	r3, r1
 8007188:	4313      	orrs	r3, r2
 800718a:	d009      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800718c:	4b9e      	ldr	r3, [pc, #632]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800718e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007190:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800719a:	4a9b      	ldr	r2, [pc, #620]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800719c:	430b      	orrs	r3, r1
 800719e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80071a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80071ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071ae:	2300      	movs	r3, #0
 80071b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071b2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80071b6:	460b      	mov	r3, r1
 80071b8:	4313      	orrs	r3, r2
 80071ba:	d009      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80071bc:	4b92      	ldr	r3, [pc, #584]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071c0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071ca:	4a8f      	ldr	r2, [pc, #572]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071cc:	430b      	orrs	r3, r1
 80071ce:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80071d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80071dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80071de:	2300      	movs	r3, #0
 80071e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80071e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80071e6:	460b      	mov	r3, r1
 80071e8:	4313      	orrs	r3, r2
 80071ea:	d00e      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071ec:	4b86      	ldr	r3, [pc, #536]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	4a85      	ldr	r2, [pc, #532]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071f6:	6113      	str	r3, [r2, #16]
 80071f8:	4b83      	ldr	r3, [pc, #524]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071fa:	6919      	ldr	r1, [r3, #16]
 80071fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007200:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007204:	4a80      	ldr	r2, [pc, #512]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007206:	430b      	orrs	r3, r1
 8007208:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800720a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007216:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007218:	2300      	movs	r3, #0
 800721a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800721c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007220:	460b      	mov	r3, r1
 8007222:	4313      	orrs	r3, r2
 8007224:	d009      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007226:	4b78      	ldr	r3, [pc, #480]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800722a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800722e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007234:	4a74      	ldr	r2, [pc, #464]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007236:	430b      	orrs	r3, r1
 8007238:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800723a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007246:	633b      	str	r3, [r7, #48]	@ 0x30
 8007248:	2300      	movs	r3, #0
 800724a:	637b      	str	r3, [r7, #52]	@ 0x34
 800724c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007250:	460b      	mov	r3, r1
 8007252:	4313      	orrs	r3, r2
 8007254:	d00a      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007256:	4b6c      	ldr	r3, [pc, #432]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800725a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800725e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007266:	4a68      	ldr	r2, [pc, #416]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007268:	430b      	orrs	r3, r1
 800726a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800726c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	2100      	movs	r1, #0
 8007276:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800727e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007282:	460b      	mov	r3, r1
 8007284:	4313      	orrs	r3, r2
 8007286:	d011      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728c:	3308      	adds	r3, #8
 800728e:	2100      	movs	r1, #0
 8007290:	4618      	mov	r0, r3
 8007292:	f000 fb79 	bl	8007988 <RCCEx_PLL2_Config>
 8007296:	4603      	mov	r3, r0
 8007298:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800729c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d003      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80072ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	2100      	movs	r1, #0
 80072b6:	6239      	str	r1, [r7, #32]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80072be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80072c2:	460b      	mov	r3, r1
 80072c4:	4313      	orrs	r3, r2
 80072c6:	d011      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072cc:	3308      	adds	r3, #8
 80072ce:	2101      	movs	r1, #1
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fb59 	bl	8007988 <RCCEx_PLL2_Config>
 80072d6:	4603      	mov	r3, r0
 80072d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80072dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d003      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	2100      	movs	r1, #0
 80072f6:	61b9      	str	r1, [r7, #24]
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	61fb      	str	r3, [r7, #28]
 80072fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007302:	460b      	mov	r3, r1
 8007304:	4313      	orrs	r3, r2
 8007306:	d011      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800730c:	3308      	adds	r3, #8
 800730e:	2102      	movs	r1, #2
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fb39 	bl	8007988 <RCCEx_PLL2_Config>
 8007316:	4603      	mov	r3, r0
 8007318:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800731c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007328:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800732c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	2100      	movs	r1, #0
 8007336:	6139      	str	r1, [r7, #16]
 8007338:	f003 0308 	and.w	r3, r3, #8
 800733c:	617b      	str	r3, [r7, #20]
 800733e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007342:	460b      	mov	r3, r1
 8007344:	4313      	orrs	r3, r2
 8007346:	d011      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734c:	3328      	adds	r3, #40	@ 0x28
 800734e:	2100      	movs	r1, #0
 8007350:	4618      	mov	r0, r3
 8007352:	f000 fbcb 	bl	8007aec <RCCEx_PLL3_Config>
 8007356:	4603      	mov	r3, r0
 8007358:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800735c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007368:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800736c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007374:	2100      	movs	r1, #0
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	f003 0310 	and.w	r3, r3, #16
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007382:	460b      	mov	r3, r1
 8007384:	4313      	orrs	r3, r2
 8007386:	d011      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738c:	3328      	adds	r3, #40	@ 0x28
 800738e:	2101      	movs	r1, #1
 8007390:	4618      	mov	r0, r3
 8007392:	f000 fbab 	bl	8007aec <RCCEx_PLL3_Config>
 8007396:	4603      	mov	r3, r0
 8007398:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800739c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80073ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	2100      	movs	r1, #0
 80073b6:	6039      	str	r1, [r7, #0]
 80073b8:	f003 0320 	and.w	r3, r3, #32
 80073bc:	607b      	str	r3, [r7, #4]
 80073be:	e9d7 1200 	ldrd	r1, r2, [r7]
 80073c2:	460b      	mov	r3, r1
 80073c4:	4313      	orrs	r3, r2
 80073c6:	d011      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073cc:	3328      	adds	r3, #40	@ 0x28
 80073ce:	2102      	movs	r1, #2
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 fb8b 	bl	8007aec <RCCEx_PLL3_Config>
 80073d6:	4603      	mov	r3, r0
 80073d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80073dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80073ec:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	e000      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007400:	46bd      	mov	sp, r7
 8007402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007406:	bf00      	nop
 8007408:	58024400 	.word	0x58024400

0800740c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007410:	f7fe fe00 	bl	8006014 <HAL_RCC_GetHCLKFreq>
 8007414:	4602      	mov	r2, r0
 8007416:	4b06      	ldr	r3, [pc, #24]	@ (8007430 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	091b      	lsrs	r3, r3, #4
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	4904      	ldr	r1, [pc, #16]	@ (8007434 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007422:	5ccb      	ldrb	r3, [r1, r3]
 8007424:	f003 031f 	and.w	r3, r3, #31
 8007428:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800742c:	4618      	mov	r0, r3
 800742e:	bd80      	pop	{r7, pc}
 8007430:	58024400 	.word	0x58024400
 8007434:	0800a63c 	.word	0x0800a63c

08007438 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007438:	b480      	push	{r7}
 800743a:	b089      	sub	sp, #36	@ 0x24
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007440:	4ba1      	ldr	r3, [pc, #644]	@ (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007444:	f003 0303 	and.w	r3, r3, #3
 8007448:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800744a:	4b9f      	ldr	r3, [pc, #636]	@ (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800744c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800744e:	0b1b      	lsrs	r3, r3, #12
 8007450:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007454:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007456:	4b9c      	ldr	r3, [pc, #624]	@ (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745a:	091b      	lsrs	r3, r3, #4
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007462:	4b99      	ldr	r3, [pc, #612]	@ (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007466:	08db      	lsrs	r3, r3, #3
 8007468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	fb02 f303 	mul.w	r3, r2, r3
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 8111 	beq.w	80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b02      	cmp	r3, #2
 800748a:	f000 8083 	beq.w	8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b02      	cmp	r3, #2
 8007492:	f200 80a1 	bhi.w	80075d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d056      	beq.n	8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80074a2:	e099      	b.n	80075d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074a4:	4b88      	ldr	r3, [pc, #544]	@ (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d02d      	beq.n	800750c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074b0:	4b85      	ldr	r3, [pc, #532]	@ (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	08db      	lsrs	r3, r3, #3
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	4a84      	ldr	r2, [pc, #528]	@ (80076cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80074bc:	fa22 f303 	lsr.w	r3, r2, r3
 80074c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	ee07 3a90 	vmov	s15, r3
 80074c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074da:	4b7b      	ldr	r3, [pc, #492]	@ (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007506:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800750a:	e087      	b.n	800761c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007516:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80076d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800751a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751e:	4b6a      	ldr	r3, [pc, #424]	@ (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007532:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800754e:	e065      	b.n	800761c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80076d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800755e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007562:	4b59      	ldr	r3, [pc, #356]	@ (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007572:	ed97 6a03 	vldr	s12, [r7, #12]
 8007576:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800757a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800757e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007592:	e043      	b.n	800761c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80076dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80075a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a6:	4b48      	ldr	r3, [pc, #288]	@ (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075d6:	e021      	b.n	800761c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80076d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ea:	4b37      	ldr	r3, [pc, #220]	@ (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80075fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800760e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800761a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800761c:	4b2a      	ldr	r3, [pc, #168]	@ (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800761e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007620:	0a5b      	lsrs	r3, r3, #9
 8007622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007632:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007636:	edd7 6a07 	vldr	s13, [r7, #28]
 800763a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800763e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007642:	ee17 2a90 	vmov	r2, s15
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800764a:	4b1f      	ldr	r3, [pc, #124]	@ (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800764c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800764e:	0c1b      	lsrs	r3, r3, #16
 8007650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007654:	ee07 3a90 	vmov	s15, r3
 8007658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007660:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007664:	edd7 6a07 	vldr	s13, [r7, #28]
 8007668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800766c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007670:	ee17 2a90 	vmov	r2, s15
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007678:	4b13      	ldr	r3, [pc, #76]	@ (80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800767a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767c:	0e1b      	lsrs	r3, r3, #24
 800767e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800768e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007692:	edd7 6a07 	vldr	s13, [r7, #28]
 8007696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800769a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800769e:	ee17 2a90 	vmov	r2, s15
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80076a6:	e008      	b.n	80076ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	609a      	str	r2, [r3, #8]
}
 80076ba:	bf00      	nop
 80076bc:	3724      	adds	r7, #36	@ 0x24
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	58024400 	.word	0x58024400
 80076cc:	03d09000 	.word	0x03d09000
 80076d0:	46000000 	.word	0x46000000
 80076d4:	4c742400 	.word	0x4c742400
 80076d8:	4a742400 	.word	0x4a742400
 80076dc:	4bbebc20 	.word	0x4bbebc20

080076e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b089      	sub	sp, #36	@ 0x24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076e8:	4ba1      	ldr	r3, [pc, #644]	@ (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ec:	f003 0303 	and.w	r3, r3, #3
 80076f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80076f2:	4b9f      	ldr	r3, [pc, #636]	@ (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f6:	0d1b      	lsrs	r3, r3, #20
 80076f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076fe:	4b9c      	ldr	r3, [pc, #624]	@ (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007702:	0a1b      	lsrs	r3, r3, #8
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800770a:	4b99      	ldr	r3, [pc, #612]	@ (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800770c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800770e:	08db      	lsrs	r3, r3, #3
 8007710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	fb02 f303 	mul.w	r3, r2, r3
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007722:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 8111 	beq.w	8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	2b02      	cmp	r3, #2
 8007732:	f000 8083 	beq.w	800783c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	2b02      	cmp	r3, #2
 800773a:	f200 80a1 	bhi.w	8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d056      	beq.n	80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800774a:	e099      	b.n	8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800774c:	4b88      	ldr	r3, [pc, #544]	@ (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d02d      	beq.n	80077b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007758:	4b85      	ldr	r3, [pc, #532]	@ (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	08db      	lsrs	r3, r3, #3
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	4a84      	ldr	r2, [pc, #528]	@ (8007974 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007764:	fa22 f303 	lsr.w	r3, r2, r3
 8007768:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	ee07 3a90 	vmov	s15, r3
 8007770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007782:	4b7b      	ldr	r3, [pc, #492]	@ (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007792:	ed97 6a03 	vldr	s12, [r7, #12]
 8007796:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800779a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80077b2:	e087      	b.n	80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800797c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80077c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c6:	4b6a      	ldr	r3, [pc, #424]	@ (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077f6:	e065      	b.n	80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	ee07 3a90 	vmov	s15, r3
 80077fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007802:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007980 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800780a:	4b59      	ldr	r3, [pc, #356]	@ (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800780c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781a:	ed97 6a03 	vldr	s12, [r7, #12]
 800781e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800782a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800782e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800783a:	e043      	b.n	80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007846:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007984 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800784a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784e:	4b48      	ldr	r3, [pc, #288]	@ (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007862:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800786a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800787e:	e021      	b.n	80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007980 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800788e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007892:	4b37      	ldr	r3, [pc, #220]	@ (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80078c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c8:	0a5b      	lsrs	r3, r3, #9
 80078ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078de:	edd7 6a07 	vldr	s13, [r7, #28]
 80078e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ea:	ee17 2a90 	vmov	r2, s15
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80078f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f6:	0c1b      	lsrs	r3, r3, #16
 80078f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078fc:	ee07 3a90 	vmov	s15, r3
 8007900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007904:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800790c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007918:	ee17 2a90 	vmov	r2, s15
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007920:	4b13      	ldr	r3, [pc, #76]	@ (8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007924:	0e1b      	lsrs	r3, r3, #24
 8007926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800792a:	ee07 3a90 	vmov	s15, r3
 800792e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007932:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800793a:	edd7 6a07 	vldr	s13, [r7, #28]
 800793e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007946:	ee17 2a90 	vmov	r2, s15
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800794e:	e008      	b.n	8007962 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	609a      	str	r2, [r3, #8]
}
 8007962:	bf00      	nop
 8007964:	3724      	adds	r7, #36	@ 0x24
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	58024400 	.word	0x58024400
 8007974:	03d09000 	.word	0x03d09000
 8007978:	46000000 	.word	0x46000000
 800797c:	4c742400 	.word	0x4c742400
 8007980:	4a742400 	.word	0x4a742400
 8007984:	4bbebc20 	.word	0x4bbebc20

08007988 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007996:	4b53      	ldr	r3, [pc, #332]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799a:	f003 0303 	and.w	r3, r3, #3
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d101      	bne.n	80079a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e099      	b.n	8007ada <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80079a6:	4b4f      	ldr	r3, [pc, #316]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a4e      	ldr	r2, [pc, #312]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 80079ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079b2:	f7fa fba1 	bl	80020f8 <HAL_GetTick>
 80079b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079b8:	e008      	b.n	80079cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079ba:	f7fa fb9d 	bl	80020f8 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d901      	bls.n	80079cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e086      	b.n	8007ada <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079cc:	4b45      	ldr	r3, [pc, #276]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1f0      	bne.n	80079ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80079d8:	4b42      	ldr	r3, [pc, #264]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 80079da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	031b      	lsls	r3, r3, #12
 80079e6:	493f      	ldr	r1, [pc, #252]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	3b01      	subs	r3, #1
 80079fc:	025b      	lsls	r3, r3, #9
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	431a      	orrs	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	041b      	lsls	r3, r3, #16
 8007a0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	061b      	lsls	r3, r3, #24
 8007a18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007a1c:	4931      	ldr	r1, [pc, #196]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a22:	4b30      	ldr	r3, [pc, #192]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	492d      	ldr	r1, [pc, #180]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a34:	4b2b      	ldr	r3, [pc, #172]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a38:	f023 0220 	bic.w	r2, r3, #32
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	4928      	ldr	r1, [pc, #160]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a46:	4b27      	ldr	r3, [pc, #156]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4a:	4a26      	ldr	r2, [pc, #152]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a4c:	f023 0310 	bic.w	r3, r3, #16
 8007a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a52:	4b24      	ldr	r3, [pc, #144]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a56:	4b24      	ldr	r3, [pc, #144]	@ (8007ae8 <RCCEx_PLL2_Config+0x160>)
 8007a58:	4013      	ands	r3, r2
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	69d2      	ldr	r2, [r2, #28]
 8007a5e:	00d2      	lsls	r2, r2, #3
 8007a60:	4920      	ldr	r1, [pc, #128]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a66:	4b1f      	ldr	r3, [pc, #124]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a6c:	f043 0310 	orr.w	r3, r3, #16
 8007a70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d106      	bne.n	8007a86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a78:	4b1a      	ldr	r3, [pc, #104]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7c:	4a19      	ldr	r2, [pc, #100]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a84:	e00f      	b.n	8007aa6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d106      	bne.n	8007a9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a8c:	4b15      	ldr	r3, [pc, #84]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a90:	4a14      	ldr	r2, [pc, #80]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a98:	e005      	b.n	8007aa6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a9a:	4b12      	ldr	r3, [pc, #72]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9e:	4a11      	ldr	r2, [pc, #68]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007aa0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007aac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ab2:	f7fa fb21 	bl	80020f8 <HAL_GetTick>
 8007ab6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ab8:	e008      	b.n	8007acc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007aba:	f7fa fb1d 	bl	80020f8 <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d901      	bls.n	8007acc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e006      	b.n	8007ada <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007acc:	4b05      	ldr	r3, [pc, #20]	@ (8007ae4 <RCCEx_PLL2_Config+0x15c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d0f0      	beq.n	8007aba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	58024400 	.word	0x58024400
 8007ae8:	ffff0007 	.word	0xffff0007

08007aec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007afa:	4b53      	ldr	r3, [pc, #332]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d101      	bne.n	8007b0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e099      	b.n	8007c3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b0a:	4b4f      	ldr	r3, [pc, #316]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a4e      	ldr	r2, [pc, #312]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b16:	f7fa faef 	bl	80020f8 <HAL_GetTick>
 8007b1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b1c:	e008      	b.n	8007b30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b1e:	f7fa faeb 	bl	80020f8 <HAL_GetTick>
 8007b22:	4602      	mov	r2, r0
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d901      	bls.n	8007b30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e086      	b.n	8007c3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b30:	4b45      	ldr	r3, [pc, #276]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1f0      	bne.n	8007b1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b3c:	4b42      	ldr	r3, [pc, #264]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b40:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	051b      	lsls	r3, r3, #20
 8007b4a:	493f      	ldr	r1, [pc, #252]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	025b      	lsls	r3, r3, #9
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	431a      	orrs	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	041b      	lsls	r3, r3, #16
 8007b6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b72:	431a      	orrs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	061b      	lsls	r3, r3, #24
 8007b7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b80:	4931      	ldr	r1, [pc, #196]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b86:	4b30      	ldr	r3, [pc, #192]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	492d      	ldr	r1, [pc, #180]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b98:	4b2b      	ldr	r3, [pc, #172]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b9c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	4928      	ldr	r1, [pc, #160]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007baa:	4b27      	ldr	r3, [pc, #156]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bae:	4a26      	ldr	r2, [pc, #152]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007bb6:	4b24      	ldr	r3, [pc, #144]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bba:	4b24      	ldr	r3, [pc, #144]	@ (8007c4c <RCCEx_PLL3_Config+0x160>)
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	69d2      	ldr	r2, [r2, #28]
 8007bc2:	00d2      	lsls	r2, r2, #3
 8007bc4:	4920      	ldr	r1, [pc, #128]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007bca:	4b1f      	ldr	r3, [pc, #124]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bce:	4a1e      	ldr	r2, [pc, #120]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d106      	bne.n	8007bea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be0:	4a19      	ldr	r2, [pc, #100]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007be2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007be6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007be8:	e00f      	b.n	8007c0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d106      	bne.n	8007bfe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007bf0:	4b15      	ldr	r3, [pc, #84]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf4:	4a14      	ldr	r2, [pc, #80]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007bf6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bfc:	e005      	b.n	8007c0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007bfe:	4b12      	ldr	r3, [pc, #72]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c02:	4a11      	ldr	r2, [pc, #68]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007c04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c08:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c16:	f7fa fa6f 	bl	80020f8 <HAL_GetTick>
 8007c1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c1c:	e008      	b.n	8007c30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c1e:	f7fa fa6b 	bl	80020f8 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d901      	bls.n	8007c30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e006      	b.n	8007c3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c30:	4b05      	ldr	r3, [pc, #20]	@ (8007c48 <RCCEx_PLL3_Config+0x15c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0f0      	beq.n	8007c1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	58024400 	.word	0x58024400
 8007c4c:	ffff0007 	.word	0xffff0007

08007c50 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e10f      	b.n	8007e82 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a87      	ldr	r2, [pc, #540]	@ (8007e8c <HAL_SPI_Init+0x23c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d00f      	beq.n	8007c92 <HAL_SPI_Init+0x42>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a86      	ldr	r2, [pc, #536]	@ (8007e90 <HAL_SPI_Init+0x240>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d00a      	beq.n	8007c92 <HAL_SPI_Init+0x42>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a84      	ldr	r2, [pc, #528]	@ (8007e94 <HAL_SPI_Init+0x244>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d005      	beq.n	8007c92 <HAL_SPI_Init+0x42>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	2b0f      	cmp	r3, #15
 8007c8c:	d901      	bls.n	8007c92 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e0f7      	b.n	8007e82 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f900 	bl	8007e98 <SPI_GetPacketSize>
 8007c98:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a7b      	ldr	r2, [pc, #492]	@ (8007e8c <HAL_SPI_Init+0x23c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d00c      	beq.n	8007cbe <HAL_SPI_Init+0x6e>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a79      	ldr	r2, [pc, #484]	@ (8007e90 <HAL_SPI_Init+0x240>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d007      	beq.n	8007cbe <HAL_SPI_Init+0x6e>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a78      	ldr	r2, [pc, #480]	@ (8007e94 <HAL_SPI_Init+0x244>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d002      	beq.n	8007cbe <HAL_SPI_Init+0x6e>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	d811      	bhi.n	8007ce2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007cc2:	4a72      	ldr	r2, [pc, #456]	@ (8007e8c <HAL_SPI_Init+0x23c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d009      	beq.n	8007cdc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a70      	ldr	r2, [pc, #448]	@ (8007e90 <HAL_SPI_Init+0x240>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d004      	beq.n	8007cdc <HAL_SPI_Init+0x8c>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a6f      	ldr	r2, [pc, #444]	@ (8007e94 <HAL_SPI_Init+0x244>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d104      	bne.n	8007ce6 <HAL_SPI_Init+0x96>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b10      	cmp	r3, #16
 8007ce0:	d901      	bls.n	8007ce6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e0cd      	b.n	8007e82 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d106      	bne.n	8007d00 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7f9 fbd2 	bl	80014a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0201 	bic.w	r2, r2, #1
 8007d16:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007d22:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d2c:	d119      	bne.n	8007d62 <HAL_SPI_Init+0x112>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d36:	d103      	bne.n	8007d40 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d008      	beq.n	8007d52 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10c      	bne.n	8007d62 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007d4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d50:	d107      	bne.n	8007d62 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d60:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00f      	beq.n	8007d8e <HAL_SPI_Init+0x13e>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	2b06      	cmp	r3, #6
 8007d74:	d90b      	bls.n	8007d8e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	e007      	b.n	8007d9e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d9c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	69da      	ldr	r2, [r3, #28]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da6:	431a      	orrs	r2, r3
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	431a      	orrs	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db0:	ea42 0103 	orr.w	r1, r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68da      	ldr	r2, [r3, #12]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc8:	431a      	orrs	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	695b      	ldr	r3, [r3, #20]
 8007de0:	431a      	orrs	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	431a      	orrs	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	431a      	orrs	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007df2:	431a      	orrs	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dfe:	ea42 0103 	orr.w	r1, r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d113      	bne.n	8007e3e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e28:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007e3c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 0201 	bic.w	r2, r2, #1
 8007e4c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00a      	beq.n	8007e70 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	40013000 	.word	0x40013000
 8007e90:	40003800 	.word	0x40003800
 8007e94:	40003c00 	.word	0x40003c00

08007e98 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea4:	095b      	lsrs	r3, r3, #5
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	3307      	adds	r3, #7
 8007eb6:	08db      	lsrs	r3, r3, #3
 8007eb8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	fb02 f303 	mul.w	r3, r2, r3
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e049      	b.n	8007f74 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d106      	bne.n	8007efa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7f9 fd6f 	bl	80019d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2202      	movs	r2, #2
 8007efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3304      	adds	r3, #4
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	f000 faa3 	bl	8008458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e049      	b.n	8008022 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f841 	bl	800802a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4610      	mov	r0, r2
 8007fbc:	f000 fa4c 	bl	8008458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
	...

08008040 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008056:	2b01      	cmp	r3, #1
 8008058:	d101      	bne.n	800805e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800805a:	2302      	movs	r3, #2
 800805c:	e0ff      	b.n	800825e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b14      	cmp	r3, #20
 800806a:	f200 80f0 	bhi.w	800824e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800806e:	a201      	add	r2, pc, #4	@ (adr r2, 8008074 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008074:	080080c9 	.word	0x080080c9
 8008078:	0800824f 	.word	0x0800824f
 800807c:	0800824f 	.word	0x0800824f
 8008080:	0800824f 	.word	0x0800824f
 8008084:	08008109 	.word	0x08008109
 8008088:	0800824f 	.word	0x0800824f
 800808c:	0800824f 	.word	0x0800824f
 8008090:	0800824f 	.word	0x0800824f
 8008094:	0800814b 	.word	0x0800814b
 8008098:	0800824f 	.word	0x0800824f
 800809c:	0800824f 	.word	0x0800824f
 80080a0:	0800824f 	.word	0x0800824f
 80080a4:	0800818b 	.word	0x0800818b
 80080a8:	0800824f 	.word	0x0800824f
 80080ac:	0800824f 	.word	0x0800824f
 80080b0:	0800824f 	.word	0x0800824f
 80080b4:	080081cd 	.word	0x080081cd
 80080b8:	0800824f 	.word	0x0800824f
 80080bc:	0800824f 	.word	0x0800824f
 80080c0:	0800824f 	.word	0x0800824f
 80080c4:	0800820d 	.word	0x0800820d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68b9      	ldr	r1, [r7, #8]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 fa74 	bl	80085bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	699a      	ldr	r2, [r3, #24]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f042 0208 	orr.w	r2, r2, #8
 80080e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	699a      	ldr	r2, [r3, #24]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f022 0204 	bic.w	r2, r2, #4
 80080f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6999      	ldr	r1, [r3, #24]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	691a      	ldr	r2, [r3, #16]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	430a      	orrs	r2, r1
 8008104:	619a      	str	r2, [r3, #24]
      break;
 8008106:	e0a5      	b.n	8008254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68b9      	ldr	r1, [r7, #8]
 800810e:	4618      	mov	r0, r3
 8008110:	f000 fae4 	bl	80086dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	699a      	ldr	r2, [r3, #24]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	699a      	ldr	r2, [r3, #24]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6999      	ldr	r1, [r3, #24]
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	021a      	lsls	r2, r3, #8
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	430a      	orrs	r2, r1
 8008146:	619a      	str	r2, [r3, #24]
      break;
 8008148:	e084      	b.n	8008254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68b9      	ldr	r1, [r7, #8]
 8008150:	4618      	mov	r0, r3
 8008152:	f000 fb4d 	bl	80087f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	69da      	ldr	r2, [r3, #28]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f042 0208 	orr.w	r2, r2, #8
 8008164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69da      	ldr	r2, [r3, #28]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 0204 	bic.w	r2, r2, #4
 8008174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	69d9      	ldr	r1, [r3, #28]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	691a      	ldr	r2, [r3, #16]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	61da      	str	r2, [r3, #28]
      break;
 8008188:	e064      	b.n	8008254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68b9      	ldr	r1, [r7, #8]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 fbb5 	bl	8008900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	69da      	ldr	r2, [r3, #28]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	69da      	ldr	r2, [r3, #28]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	69d9      	ldr	r1, [r3, #28]
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	021a      	lsls	r2, r3, #8
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	61da      	str	r2, [r3, #28]
      break;
 80081ca:	e043      	b.n	8008254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fbfe 	bl	80089d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f042 0208 	orr.w	r2, r2, #8
 80081e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 0204 	bic.w	r2, r2, #4
 80081f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	691a      	ldr	r2, [r3, #16]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800820a:	e023      	b.n	8008254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68b9      	ldr	r1, [r7, #8]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 fc42 	bl	8008a9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008226:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008236:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	021a      	lsls	r2, r3, #8
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800824c:	e002      	b.n	8008254 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	75fb      	strb	r3, [r7, #23]
      break;
 8008252:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800825c:	7dfb      	ldrb	r3, [r7, #23]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop

08008268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_TIM_ConfigClockSource+0x1c>
 8008280:	2302      	movs	r3, #2
 8008282:	e0dc      	b.n	800843e <HAL_TIM_ConfigClockSource+0x1d6>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	4b6a      	ldr	r3, [pc, #424]	@ (8008448 <HAL_TIM_ConfigClockSource+0x1e0>)
 80082a0:	4013      	ands	r3, r2
 80082a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a64      	ldr	r2, [pc, #400]	@ (800844c <HAL_TIM_ConfigClockSource+0x1e4>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	f000 80a9 	beq.w	8008412 <HAL_TIM_ConfigClockSource+0x1aa>
 80082c0:	4a62      	ldr	r2, [pc, #392]	@ (800844c <HAL_TIM_ConfigClockSource+0x1e4>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	f200 80ae 	bhi.w	8008424 <HAL_TIM_ConfigClockSource+0x1bc>
 80082c8:	4a61      	ldr	r2, [pc, #388]	@ (8008450 <HAL_TIM_ConfigClockSource+0x1e8>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	f000 80a1 	beq.w	8008412 <HAL_TIM_ConfigClockSource+0x1aa>
 80082d0:	4a5f      	ldr	r2, [pc, #380]	@ (8008450 <HAL_TIM_ConfigClockSource+0x1e8>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	f200 80a6 	bhi.w	8008424 <HAL_TIM_ConfigClockSource+0x1bc>
 80082d8:	4a5e      	ldr	r2, [pc, #376]	@ (8008454 <HAL_TIM_ConfigClockSource+0x1ec>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	f000 8099 	beq.w	8008412 <HAL_TIM_ConfigClockSource+0x1aa>
 80082e0:	4a5c      	ldr	r2, [pc, #368]	@ (8008454 <HAL_TIM_ConfigClockSource+0x1ec>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	f200 809e 	bhi.w	8008424 <HAL_TIM_ConfigClockSource+0x1bc>
 80082e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80082ec:	f000 8091 	beq.w	8008412 <HAL_TIM_ConfigClockSource+0x1aa>
 80082f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80082f4:	f200 8096 	bhi.w	8008424 <HAL_TIM_ConfigClockSource+0x1bc>
 80082f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082fc:	f000 8089 	beq.w	8008412 <HAL_TIM_ConfigClockSource+0x1aa>
 8008300:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008304:	f200 808e 	bhi.w	8008424 <HAL_TIM_ConfigClockSource+0x1bc>
 8008308:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800830c:	d03e      	beq.n	800838c <HAL_TIM_ConfigClockSource+0x124>
 800830e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008312:	f200 8087 	bhi.w	8008424 <HAL_TIM_ConfigClockSource+0x1bc>
 8008316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800831a:	f000 8086 	beq.w	800842a <HAL_TIM_ConfigClockSource+0x1c2>
 800831e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008322:	d87f      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x1bc>
 8008324:	2b70      	cmp	r3, #112	@ 0x70
 8008326:	d01a      	beq.n	800835e <HAL_TIM_ConfigClockSource+0xf6>
 8008328:	2b70      	cmp	r3, #112	@ 0x70
 800832a:	d87b      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x1bc>
 800832c:	2b60      	cmp	r3, #96	@ 0x60
 800832e:	d050      	beq.n	80083d2 <HAL_TIM_ConfigClockSource+0x16a>
 8008330:	2b60      	cmp	r3, #96	@ 0x60
 8008332:	d877      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x1bc>
 8008334:	2b50      	cmp	r3, #80	@ 0x50
 8008336:	d03c      	beq.n	80083b2 <HAL_TIM_ConfigClockSource+0x14a>
 8008338:	2b50      	cmp	r3, #80	@ 0x50
 800833a:	d873      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x1bc>
 800833c:	2b40      	cmp	r3, #64	@ 0x40
 800833e:	d058      	beq.n	80083f2 <HAL_TIM_ConfigClockSource+0x18a>
 8008340:	2b40      	cmp	r3, #64	@ 0x40
 8008342:	d86f      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x1bc>
 8008344:	2b30      	cmp	r3, #48	@ 0x30
 8008346:	d064      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0x1aa>
 8008348:	2b30      	cmp	r3, #48	@ 0x30
 800834a:	d86b      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x1bc>
 800834c:	2b20      	cmp	r3, #32
 800834e:	d060      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0x1aa>
 8008350:	2b20      	cmp	r3, #32
 8008352:	d867      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x1bc>
 8008354:	2b00      	cmp	r3, #0
 8008356:	d05c      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0x1aa>
 8008358:	2b10      	cmp	r3, #16
 800835a:	d05a      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0x1aa>
 800835c:	e062      	b.n	8008424 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800836e:	f000 fc79 	bl	8008c64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008380:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	609a      	str	r2, [r3, #8]
      break;
 800838a:	e04f      	b.n	800842c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800839c:	f000 fc62 	bl	8008c64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689a      	ldr	r2, [r3, #8]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083ae:	609a      	str	r2, [r3, #8]
      break;
 80083b0:	e03c      	b.n	800842c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083be:	461a      	mov	r2, r3
 80083c0:	f000 fbd2 	bl	8008b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2150      	movs	r1, #80	@ 0x50
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 fc2c 	bl	8008c28 <TIM_ITRx_SetConfig>
      break;
 80083d0:	e02c      	b.n	800842c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083de:	461a      	mov	r2, r3
 80083e0:	f000 fbf1 	bl	8008bc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2160      	movs	r1, #96	@ 0x60
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 fc1c 	bl	8008c28 <TIM_ITRx_SetConfig>
      break;
 80083f0:	e01c      	b.n	800842c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083fe:	461a      	mov	r2, r3
 8008400:	f000 fbb2 	bl	8008b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2140      	movs	r1, #64	@ 0x40
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fc0c 	bl	8008c28 <TIM_ITRx_SetConfig>
      break;
 8008410:	e00c      	b.n	800842c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4619      	mov	r1, r3
 800841c:	4610      	mov	r0, r2
 800841e:	f000 fc03 	bl	8008c28 <TIM_ITRx_SetConfig>
      break;
 8008422:	e003      	b.n	800842c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	73fb      	strb	r3, [r7, #15]
      break;
 8008428:	e000      	b.n	800842c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800842a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800843c:	7bfb      	ldrb	r3, [r7, #15]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	ffceff88 	.word	0xffceff88
 800844c:	00100040 	.word	0x00100040
 8008450:	00100030 	.word	0x00100030
 8008454:	00100020 	.word	0x00100020

08008458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a4a      	ldr	r2, [pc, #296]	@ (8008594 <TIM_Base_SetConfig+0x13c>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d013      	beq.n	8008498 <TIM_Base_SetConfig+0x40>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008476:	d00f      	beq.n	8008498 <TIM_Base_SetConfig+0x40>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a47      	ldr	r2, [pc, #284]	@ (8008598 <TIM_Base_SetConfig+0x140>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00b      	beq.n	8008498 <TIM_Base_SetConfig+0x40>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a46      	ldr	r2, [pc, #280]	@ (800859c <TIM_Base_SetConfig+0x144>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d007      	beq.n	8008498 <TIM_Base_SetConfig+0x40>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a45      	ldr	r2, [pc, #276]	@ (80085a0 <TIM_Base_SetConfig+0x148>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d003      	beq.n	8008498 <TIM_Base_SetConfig+0x40>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a44      	ldr	r2, [pc, #272]	@ (80085a4 <TIM_Base_SetConfig+0x14c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d108      	bne.n	80084aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800849e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a39      	ldr	r2, [pc, #228]	@ (8008594 <TIM_Base_SetConfig+0x13c>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d027      	beq.n	8008502 <TIM_Base_SetConfig+0xaa>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084b8:	d023      	beq.n	8008502 <TIM_Base_SetConfig+0xaa>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a36      	ldr	r2, [pc, #216]	@ (8008598 <TIM_Base_SetConfig+0x140>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d01f      	beq.n	8008502 <TIM_Base_SetConfig+0xaa>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a35      	ldr	r2, [pc, #212]	@ (800859c <TIM_Base_SetConfig+0x144>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d01b      	beq.n	8008502 <TIM_Base_SetConfig+0xaa>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a34      	ldr	r2, [pc, #208]	@ (80085a0 <TIM_Base_SetConfig+0x148>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d017      	beq.n	8008502 <TIM_Base_SetConfig+0xaa>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a33      	ldr	r2, [pc, #204]	@ (80085a4 <TIM_Base_SetConfig+0x14c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d013      	beq.n	8008502 <TIM_Base_SetConfig+0xaa>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a32      	ldr	r2, [pc, #200]	@ (80085a8 <TIM_Base_SetConfig+0x150>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d00f      	beq.n	8008502 <TIM_Base_SetConfig+0xaa>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a31      	ldr	r2, [pc, #196]	@ (80085ac <TIM_Base_SetConfig+0x154>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d00b      	beq.n	8008502 <TIM_Base_SetConfig+0xaa>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a30      	ldr	r2, [pc, #192]	@ (80085b0 <TIM_Base_SetConfig+0x158>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d007      	beq.n	8008502 <TIM_Base_SetConfig+0xaa>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a2f      	ldr	r2, [pc, #188]	@ (80085b4 <TIM_Base_SetConfig+0x15c>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d003      	beq.n	8008502 <TIM_Base_SetConfig+0xaa>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a2e      	ldr	r2, [pc, #184]	@ (80085b8 <TIM_Base_SetConfig+0x160>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d108      	bne.n	8008514 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	4313      	orrs	r3, r2
 8008512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	4313      	orrs	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a16      	ldr	r2, [pc, #88]	@ (8008594 <TIM_Base_SetConfig+0x13c>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d00f      	beq.n	8008560 <TIM_Base_SetConfig+0x108>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a18      	ldr	r2, [pc, #96]	@ (80085a4 <TIM_Base_SetConfig+0x14c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d00b      	beq.n	8008560 <TIM_Base_SetConfig+0x108>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a17      	ldr	r2, [pc, #92]	@ (80085a8 <TIM_Base_SetConfig+0x150>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d007      	beq.n	8008560 <TIM_Base_SetConfig+0x108>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a16      	ldr	r2, [pc, #88]	@ (80085ac <TIM_Base_SetConfig+0x154>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d003      	beq.n	8008560 <TIM_Base_SetConfig+0x108>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a15      	ldr	r2, [pc, #84]	@ (80085b0 <TIM_Base_SetConfig+0x158>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d103      	bne.n	8008568 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	691a      	ldr	r2, [r3, #16]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b01      	cmp	r3, #1
 8008578:	d105      	bne.n	8008586 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	f023 0201 	bic.w	r2, r3, #1
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	611a      	str	r2, [r3, #16]
  }
}
 8008586:	bf00      	nop
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	40010000 	.word	0x40010000
 8008598:	40000400 	.word	0x40000400
 800859c:	40000800 	.word	0x40000800
 80085a0:	40000c00 	.word	0x40000c00
 80085a4:	40010400 	.word	0x40010400
 80085a8:	40014000 	.word	0x40014000
 80085ac:	40014400 	.word	0x40014400
 80085b0:	40014800 	.word	0x40014800
 80085b4:	4000e000 	.word	0x4000e000
 80085b8:	4000e400 	.word	0x4000e400

080085bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a1b      	ldr	r3, [r3, #32]
 80085d0:	f023 0201 	bic.w	r2, r3, #1
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	4b37      	ldr	r3, [pc, #220]	@ (80086c4 <TIM_OC1_SetConfig+0x108>)
 80085e8:	4013      	ands	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f023 0303 	bic.w	r3, r3, #3
 80085f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f023 0302 	bic.w	r3, r3, #2
 8008604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a2d      	ldr	r2, [pc, #180]	@ (80086c8 <TIM_OC1_SetConfig+0x10c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d00f      	beq.n	8008638 <TIM_OC1_SetConfig+0x7c>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a2c      	ldr	r2, [pc, #176]	@ (80086cc <TIM_OC1_SetConfig+0x110>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d00b      	beq.n	8008638 <TIM_OC1_SetConfig+0x7c>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a2b      	ldr	r2, [pc, #172]	@ (80086d0 <TIM_OC1_SetConfig+0x114>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d007      	beq.n	8008638 <TIM_OC1_SetConfig+0x7c>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a2a      	ldr	r2, [pc, #168]	@ (80086d4 <TIM_OC1_SetConfig+0x118>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d003      	beq.n	8008638 <TIM_OC1_SetConfig+0x7c>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a29      	ldr	r2, [pc, #164]	@ (80086d8 <TIM_OC1_SetConfig+0x11c>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d10c      	bne.n	8008652 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f023 0308 	bic.w	r3, r3, #8
 800863e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	4313      	orrs	r3, r2
 8008648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f023 0304 	bic.w	r3, r3, #4
 8008650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a1c      	ldr	r2, [pc, #112]	@ (80086c8 <TIM_OC1_SetConfig+0x10c>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d00f      	beq.n	800867a <TIM_OC1_SetConfig+0xbe>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a1b      	ldr	r2, [pc, #108]	@ (80086cc <TIM_OC1_SetConfig+0x110>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d00b      	beq.n	800867a <TIM_OC1_SetConfig+0xbe>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a1a      	ldr	r2, [pc, #104]	@ (80086d0 <TIM_OC1_SetConfig+0x114>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d007      	beq.n	800867a <TIM_OC1_SetConfig+0xbe>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a19      	ldr	r2, [pc, #100]	@ (80086d4 <TIM_OC1_SetConfig+0x118>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d003      	beq.n	800867a <TIM_OC1_SetConfig+0xbe>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a18      	ldr	r2, [pc, #96]	@ (80086d8 <TIM_OC1_SetConfig+0x11c>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d111      	bne.n	800869e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	4313      	orrs	r3, r2
 8008692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	4313      	orrs	r3, r2
 800869c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	621a      	str	r2, [r3, #32]
}
 80086b8:	bf00      	nop
 80086ba:	371c      	adds	r7, #28
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	fffeff8f 	.word	0xfffeff8f
 80086c8:	40010000 	.word	0x40010000
 80086cc:	40010400 	.word	0x40010400
 80086d0:	40014000 	.word	0x40014000
 80086d4:	40014400 	.word	0x40014400
 80086d8:	40014800 	.word	0x40014800

080086dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	f023 0210 	bic.w	r2, r3, #16
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	4b34      	ldr	r3, [pc, #208]	@ (80087d8 <TIM_OC2_SetConfig+0xfc>)
 8008708:	4013      	ands	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	021b      	lsls	r3, r3, #8
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	4313      	orrs	r3, r2
 800871e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	f023 0320 	bic.w	r3, r3, #32
 8008726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	011b      	lsls	r3, r3, #4
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	4313      	orrs	r3, r2
 8008732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a29      	ldr	r2, [pc, #164]	@ (80087dc <TIM_OC2_SetConfig+0x100>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d003      	beq.n	8008744 <TIM_OC2_SetConfig+0x68>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a28      	ldr	r2, [pc, #160]	@ (80087e0 <TIM_OC2_SetConfig+0x104>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d10d      	bne.n	8008760 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800874a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	011b      	lsls	r3, r3, #4
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	4313      	orrs	r3, r2
 8008756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800875e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a1e      	ldr	r2, [pc, #120]	@ (80087dc <TIM_OC2_SetConfig+0x100>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00f      	beq.n	8008788 <TIM_OC2_SetConfig+0xac>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a1d      	ldr	r2, [pc, #116]	@ (80087e0 <TIM_OC2_SetConfig+0x104>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d00b      	beq.n	8008788 <TIM_OC2_SetConfig+0xac>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a1c      	ldr	r2, [pc, #112]	@ (80087e4 <TIM_OC2_SetConfig+0x108>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d007      	beq.n	8008788 <TIM_OC2_SetConfig+0xac>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a1b      	ldr	r2, [pc, #108]	@ (80087e8 <TIM_OC2_SetConfig+0x10c>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d003      	beq.n	8008788 <TIM_OC2_SetConfig+0xac>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a1a      	ldr	r2, [pc, #104]	@ (80087ec <TIM_OC2_SetConfig+0x110>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d113      	bne.n	80087b0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800878e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	621a      	str	r2, [r3, #32]
}
 80087ca:	bf00      	nop
 80087cc:	371c      	adds	r7, #28
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	feff8fff 	.word	0xfeff8fff
 80087dc:	40010000 	.word	0x40010000
 80087e0:	40010400 	.word	0x40010400
 80087e4:	40014000 	.word	0x40014000
 80087e8:	40014400 	.word	0x40014400
 80087ec:	40014800 	.word	0x40014800

080087f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	4b33      	ldr	r3, [pc, #204]	@ (80088e8 <TIM_OC3_SetConfig+0xf8>)
 800881c:	4013      	ands	r3, r2
 800881e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f023 0303 	bic.w	r3, r3, #3
 8008826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	4313      	orrs	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	021b      	lsls	r3, r3, #8
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	4313      	orrs	r3, r2
 8008844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a28      	ldr	r2, [pc, #160]	@ (80088ec <TIM_OC3_SetConfig+0xfc>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d003      	beq.n	8008856 <TIM_OC3_SetConfig+0x66>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a27      	ldr	r2, [pc, #156]	@ (80088f0 <TIM_OC3_SetConfig+0x100>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d10d      	bne.n	8008872 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800885c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	021b      	lsls	r3, r3, #8
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	4313      	orrs	r3, r2
 8008868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a1d      	ldr	r2, [pc, #116]	@ (80088ec <TIM_OC3_SetConfig+0xfc>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00f      	beq.n	800889a <TIM_OC3_SetConfig+0xaa>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a1c      	ldr	r2, [pc, #112]	@ (80088f0 <TIM_OC3_SetConfig+0x100>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d00b      	beq.n	800889a <TIM_OC3_SetConfig+0xaa>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a1b      	ldr	r2, [pc, #108]	@ (80088f4 <TIM_OC3_SetConfig+0x104>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d007      	beq.n	800889a <TIM_OC3_SetConfig+0xaa>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a1a      	ldr	r2, [pc, #104]	@ (80088f8 <TIM_OC3_SetConfig+0x108>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d003      	beq.n	800889a <TIM_OC3_SetConfig+0xaa>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a19      	ldr	r2, [pc, #100]	@ (80088fc <TIM_OC3_SetConfig+0x10c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d113      	bne.n	80088c2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	011b      	lsls	r3, r3, #4
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	011b      	lsls	r3, r3, #4
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	4313      	orrs	r3, r2
 80088c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	621a      	str	r2, [r3, #32]
}
 80088dc:	bf00      	nop
 80088de:	371c      	adds	r7, #28
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	fffeff8f 	.word	0xfffeff8f
 80088ec:	40010000 	.word	0x40010000
 80088f0:	40010400 	.word	0x40010400
 80088f4:	40014000 	.word	0x40014000
 80088f8:	40014400 	.word	0x40014400
 80088fc:	40014800 	.word	0x40014800

08008900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	4b24      	ldr	r3, [pc, #144]	@ (80089bc <TIM_OC4_SetConfig+0xbc>)
 800892c:	4013      	ands	r3, r2
 800892e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	021b      	lsls	r3, r3, #8
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	4313      	orrs	r3, r2
 8008942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800894a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	031b      	lsls	r3, r3, #12
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	4313      	orrs	r3, r2
 8008956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a19      	ldr	r2, [pc, #100]	@ (80089c0 <TIM_OC4_SetConfig+0xc0>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d00f      	beq.n	8008980 <TIM_OC4_SetConfig+0x80>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a18      	ldr	r2, [pc, #96]	@ (80089c4 <TIM_OC4_SetConfig+0xc4>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d00b      	beq.n	8008980 <TIM_OC4_SetConfig+0x80>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a17      	ldr	r2, [pc, #92]	@ (80089c8 <TIM_OC4_SetConfig+0xc8>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d007      	beq.n	8008980 <TIM_OC4_SetConfig+0x80>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a16      	ldr	r2, [pc, #88]	@ (80089cc <TIM_OC4_SetConfig+0xcc>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d003      	beq.n	8008980 <TIM_OC4_SetConfig+0x80>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a15      	ldr	r2, [pc, #84]	@ (80089d0 <TIM_OC4_SetConfig+0xd0>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d109      	bne.n	8008994 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008986:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	019b      	lsls	r3, r3, #6
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	4313      	orrs	r3, r2
 8008992:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	621a      	str	r2, [r3, #32]
}
 80089ae:	bf00      	nop
 80089b0:	371c      	adds	r7, #28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	feff8fff 	.word	0xfeff8fff
 80089c0:	40010000 	.word	0x40010000
 80089c4:	40010400 	.word	0x40010400
 80089c8:	40014000 	.word	0x40014000
 80089cc:	40014400 	.word	0x40014400
 80089d0:	40014800 	.word	0x40014800

080089d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	4b21      	ldr	r3, [pc, #132]	@ (8008a84 <TIM_OC5_SetConfig+0xb0>)
 8008a00:	4013      	ands	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008a14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	041b      	lsls	r3, r3, #16
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a18      	ldr	r2, [pc, #96]	@ (8008a88 <TIM_OC5_SetConfig+0xb4>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d00f      	beq.n	8008a4a <TIM_OC5_SetConfig+0x76>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a17      	ldr	r2, [pc, #92]	@ (8008a8c <TIM_OC5_SetConfig+0xb8>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d00b      	beq.n	8008a4a <TIM_OC5_SetConfig+0x76>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a16      	ldr	r2, [pc, #88]	@ (8008a90 <TIM_OC5_SetConfig+0xbc>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d007      	beq.n	8008a4a <TIM_OC5_SetConfig+0x76>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a15      	ldr	r2, [pc, #84]	@ (8008a94 <TIM_OC5_SetConfig+0xc0>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d003      	beq.n	8008a4a <TIM_OC5_SetConfig+0x76>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a14      	ldr	r2, [pc, #80]	@ (8008a98 <TIM_OC5_SetConfig+0xc4>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d109      	bne.n	8008a5e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	021b      	lsls	r3, r3, #8
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	621a      	str	r2, [r3, #32]
}
 8008a78:	bf00      	nop
 8008a7a:	371c      	adds	r7, #28
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	fffeff8f 	.word	0xfffeff8f
 8008a88:	40010000 	.word	0x40010000
 8008a8c:	40010400 	.word	0x40010400
 8008a90:	40014000 	.word	0x40014000
 8008a94:	40014400 	.word	0x40014400
 8008a98:	40014800 	.word	0x40014800

08008a9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a1b      	ldr	r3, [r3, #32]
 8008ab0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	4b22      	ldr	r3, [pc, #136]	@ (8008b50 <TIM_OC6_SetConfig+0xb4>)
 8008ac8:	4013      	ands	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	021b      	lsls	r3, r3, #8
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	051b      	lsls	r3, r3, #20
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a19      	ldr	r2, [pc, #100]	@ (8008b54 <TIM_OC6_SetConfig+0xb8>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d00f      	beq.n	8008b14 <TIM_OC6_SetConfig+0x78>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a18      	ldr	r2, [pc, #96]	@ (8008b58 <TIM_OC6_SetConfig+0xbc>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d00b      	beq.n	8008b14 <TIM_OC6_SetConfig+0x78>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a17      	ldr	r2, [pc, #92]	@ (8008b5c <TIM_OC6_SetConfig+0xc0>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d007      	beq.n	8008b14 <TIM_OC6_SetConfig+0x78>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a16      	ldr	r2, [pc, #88]	@ (8008b60 <TIM_OC6_SetConfig+0xc4>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d003      	beq.n	8008b14 <TIM_OC6_SetConfig+0x78>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a15      	ldr	r2, [pc, #84]	@ (8008b64 <TIM_OC6_SetConfig+0xc8>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d109      	bne.n	8008b28 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	029b      	lsls	r3, r3, #10
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	621a      	str	r2, [r3, #32]
}
 8008b42:	bf00      	nop
 8008b44:	371c      	adds	r7, #28
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	feff8fff 	.word	0xfeff8fff
 8008b54:	40010000 	.word	0x40010000
 8008b58:	40010400 	.word	0x40010400
 8008b5c:	40014000 	.word	0x40014000
 8008b60:	40014400 	.word	0x40014400
 8008b64:	40014800 	.word	0x40014800

08008b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	f023 0201 	bic.w	r2, r3, #1
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	011b      	lsls	r3, r3, #4
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f023 030a 	bic.w	r3, r3, #10
 8008ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	621a      	str	r2, [r3, #32]
}
 8008bba:	bf00      	nop
 8008bbc:	371c      	adds	r7, #28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b087      	sub	sp, #28
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	60b9      	str	r1, [r7, #8]
 8008bd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6a1b      	ldr	r3, [r3, #32]
 8008bdc:	f023 0210 	bic.w	r2, r3, #16
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	031b      	lsls	r3, r3, #12
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	011b      	lsls	r3, r3, #4
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	621a      	str	r2, [r3, #32]
}
 8008c1a:	bf00      	nop
 8008c1c:	371c      	adds	r7, #28
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
	...

08008c28 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	4b09      	ldr	r3, [pc, #36]	@ (8008c60 <TIM_ITRx_SetConfig+0x38>)
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	f043 0307 	orr.w	r3, r3, #7
 8008c4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	609a      	str	r2, [r3, #8]
}
 8008c52:	bf00      	nop
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	ffcfff8f 	.word	0xffcfff8f

08008c64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b087      	sub	sp, #28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
 8008c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	021a      	lsls	r2, r3, #8
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	431a      	orrs	r2, r3
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	609a      	str	r2, [r3, #8]
}
 8008c98:	bf00      	nop
 8008c9a:	371c      	adds	r7, #28
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d101      	bne.n	8008cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cb8:	2302      	movs	r3, #2
 8008cba:	e077      	b.n	8008dac <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a35      	ldr	r2, [pc, #212]	@ (8008db8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d004      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a34      	ldr	r2, [pc, #208]	@ (8008dbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d108      	bne.n	8008d02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008cf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a25      	ldr	r2, [pc, #148]	@ (8008db8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d02c      	beq.n	8008d80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d2e:	d027      	beq.n	8008d80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a22      	ldr	r2, [pc, #136]	@ (8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d022      	beq.n	8008d80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a21      	ldr	r2, [pc, #132]	@ (8008dc4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d01d      	beq.n	8008d80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a1f      	ldr	r2, [pc, #124]	@ (8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d018      	beq.n	8008d80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a1a      	ldr	r2, [pc, #104]	@ (8008dbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d013      	beq.n	8008d80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8008dcc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d00e      	beq.n	8008d80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a1a      	ldr	r2, [pc, #104]	@ (8008dd0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d009      	beq.n	8008d80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a18      	ldr	r2, [pc, #96]	@ (8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d004      	beq.n	8008d80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a17      	ldr	r2, [pc, #92]	@ (8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d10c      	bne.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	40010000 	.word	0x40010000
 8008dbc:	40010400 	.word	0x40010400
 8008dc0:	40000400 	.word	0x40000400
 8008dc4:	40000800 	.word	0x40000800
 8008dc8:	40000c00 	.word	0x40000c00
 8008dcc:	40001800 	.word	0x40001800
 8008dd0:	40014000 	.word	0x40014000
 8008dd4:	4000e000 	.word	0x4000e000
 8008dd8:	4000e400 	.word	0x4000e400

08008ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e042      	b.n	8008e74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d106      	bne.n	8008e06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7f8 ff5b 	bl	8001cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2224      	movs	r2, #36	@ 0x24
 8008e0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f022 0201 	bic.w	r2, r2, #1
 8008e1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d002      	beq.n	8008e2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fe94 	bl	8009b54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f825 	bl	8008e7c <UART_SetConfig>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d101      	bne.n	8008e3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e01b      	b.n	8008e74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	685a      	ldr	r2, [r3, #4]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	689a      	ldr	r2, [r3, #8]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f042 0201 	orr.w	r2, r2, #1
 8008e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 ff13 	bl	8009c98 <UART_CheckIdleState>
 8008e72:	4603      	mov	r3, r0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e80:	b092      	sub	sp, #72	@ 0x48
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	431a      	orrs	r2, r3
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	431a      	orrs	r2, r3
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	69db      	ldr	r3, [r3, #28]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	4bbe      	ldr	r3, [pc, #760]	@ (80091a4 <UART_SetConfig+0x328>)
 8008eac:	4013      	ands	r3, r2
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	6812      	ldr	r2, [r2, #0]
 8008eb2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008eb4:	430b      	orrs	r3, r1
 8008eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	68da      	ldr	r2, [r3, #12]
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4ab3      	ldr	r2, [pc, #716]	@ (80091a8 <UART_SetConfig+0x32c>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d004      	beq.n	8008ee8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	689a      	ldr	r2, [r3, #8]
 8008eee:	4baf      	ldr	r3, [pc, #700]	@ (80091ac <UART_SetConfig+0x330>)
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	6812      	ldr	r2, [r2, #0]
 8008ef6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ef8:	430b      	orrs	r3, r1
 8008efa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f02:	f023 010f 	bic.w	r1, r3, #15
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4aa6      	ldr	r2, [pc, #664]	@ (80091b0 <UART_SetConfig+0x334>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d177      	bne.n	800900c <UART_SetConfig+0x190>
 8008f1c:	4ba5      	ldr	r3, [pc, #660]	@ (80091b4 <UART_SetConfig+0x338>)
 8008f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f24:	2b28      	cmp	r3, #40	@ 0x28
 8008f26:	d86d      	bhi.n	8009004 <UART_SetConfig+0x188>
 8008f28:	a201      	add	r2, pc, #4	@ (adr r2, 8008f30 <UART_SetConfig+0xb4>)
 8008f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2e:	bf00      	nop
 8008f30:	08008fd5 	.word	0x08008fd5
 8008f34:	08009005 	.word	0x08009005
 8008f38:	08009005 	.word	0x08009005
 8008f3c:	08009005 	.word	0x08009005
 8008f40:	08009005 	.word	0x08009005
 8008f44:	08009005 	.word	0x08009005
 8008f48:	08009005 	.word	0x08009005
 8008f4c:	08009005 	.word	0x08009005
 8008f50:	08008fdd 	.word	0x08008fdd
 8008f54:	08009005 	.word	0x08009005
 8008f58:	08009005 	.word	0x08009005
 8008f5c:	08009005 	.word	0x08009005
 8008f60:	08009005 	.word	0x08009005
 8008f64:	08009005 	.word	0x08009005
 8008f68:	08009005 	.word	0x08009005
 8008f6c:	08009005 	.word	0x08009005
 8008f70:	08008fe5 	.word	0x08008fe5
 8008f74:	08009005 	.word	0x08009005
 8008f78:	08009005 	.word	0x08009005
 8008f7c:	08009005 	.word	0x08009005
 8008f80:	08009005 	.word	0x08009005
 8008f84:	08009005 	.word	0x08009005
 8008f88:	08009005 	.word	0x08009005
 8008f8c:	08009005 	.word	0x08009005
 8008f90:	08008fed 	.word	0x08008fed
 8008f94:	08009005 	.word	0x08009005
 8008f98:	08009005 	.word	0x08009005
 8008f9c:	08009005 	.word	0x08009005
 8008fa0:	08009005 	.word	0x08009005
 8008fa4:	08009005 	.word	0x08009005
 8008fa8:	08009005 	.word	0x08009005
 8008fac:	08009005 	.word	0x08009005
 8008fb0:	08008ff5 	.word	0x08008ff5
 8008fb4:	08009005 	.word	0x08009005
 8008fb8:	08009005 	.word	0x08009005
 8008fbc:	08009005 	.word	0x08009005
 8008fc0:	08009005 	.word	0x08009005
 8008fc4:	08009005 	.word	0x08009005
 8008fc8:	08009005 	.word	0x08009005
 8008fcc:	08009005 	.word	0x08009005
 8008fd0:	08008ffd 	.word	0x08008ffd
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fda:	e326      	b.n	800962a <UART_SetConfig+0x7ae>
 8008fdc:	2304      	movs	r3, #4
 8008fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe2:	e322      	b.n	800962a <UART_SetConfig+0x7ae>
 8008fe4:	2308      	movs	r3, #8
 8008fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fea:	e31e      	b.n	800962a <UART_SetConfig+0x7ae>
 8008fec:	2310      	movs	r3, #16
 8008fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff2:	e31a      	b.n	800962a <UART_SetConfig+0x7ae>
 8008ff4:	2320      	movs	r3, #32
 8008ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffa:	e316      	b.n	800962a <UART_SetConfig+0x7ae>
 8008ffc:	2340      	movs	r3, #64	@ 0x40
 8008ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009002:	e312      	b.n	800962a <UART_SetConfig+0x7ae>
 8009004:	2380      	movs	r3, #128	@ 0x80
 8009006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900a:	e30e      	b.n	800962a <UART_SetConfig+0x7ae>
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a69      	ldr	r2, [pc, #420]	@ (80091b8 <UART_SetConfig+0x33c>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d130      	bne.n	8009078 <UART_SetConfig+0x1fc>
 8009016:	4b67      	ldr	r3, [pc, #412]	@ (80091b4 <UART_SetConfig+0x338>)
 8009018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800901a:	f003 0307 	and.w	r3, r3, #7
 800901e:	2b05      	cmp	r3, #5
 8009020:	d826      	bhi.n	8009070 <UART_SetConfig+0x1f4>
 8009022:	a201      	add	r2, pc, #4	@ (adr r2, 8009028 <UART_SetConfig+0x1ac>)
 8009024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009028:	08009041 	.word	0x08009041
 800902c:	08009049 	.word	0x08009049
 8009030:	08009051 	.word	0x08009051
 8009034:	08009059 	.word	0x08009059
 8009038:	08009061 	.word	0x08009061
 800903c:	08009069 	.word	0x08009069
 8009040:	2300      	movs	r3, #0
 8009042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009046:	e2f0      	b.n	800962a <UART_SetConfig+0x7ae>
 8009048:	2304      	movs	r3, #4
 800904a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800904e:	e2ec      	b.n	800962a <UART_SetConfig+0x7ae>
 8009050:	2308      	movs	r3, #8
 8009052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009056:	e2e8      	b.n	800962a <UART_SetConfig+0x7ae>
 8009058:	2310      	movs	r3, #16
 800905a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800905e:	e2e4      	b.n	800962a <UART_SetConfig+0x7ae>
 8009060:	2320      	movs	r3, #32
 8009062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009066:	e2e0      	b.n	800962a <UART_SetConfig+0x7ae>
 8009068:	2340      	movs	r3, #64	@ 0x40
 800906a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906e:	e2dc      	b.n	800962a <UART_SetConfig+0x7ae>
 8009070:	2380      	movs	r3, #128	@ 0x80
 8009072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009076:	e2d8      	b.n	800962a <UART_SetConfig+0x7ae>
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a4f      	ldr	r2, [pc, #316]	@ (80091bc <UART_SetConfig+0x340>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d130      	bne.n	80090e4 <UART_SetConfig+0x268>
 8009082:	4b4c      	ldr	r3, [pc, #304]	@ (80091b4 <UART_SetConfig+0x338>)
 8009084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	2b05      	cmp	r3, #5
 800908c:	d826      	bhi.n	80090dc <UART_SetConfig+0x260>
 800908e:	a201      	add	r2, pc, #4	@ (adr r2, 8009094 <UART_SetConfig+0x218>)
 8009090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009094:	080090ad 	.word	0x080090ad
 8009098:	080090b5 	.word	0x080090b5
 800909c:	080090bd 	.word	0x080090bd
 80090a0:	080090c5 	.word	0x080090c5
 80090a4:	080090cd 	.word	0x080090cd
 80090a8:	080090d5 	.word	0x080090d5
 80090ac:	2300      	movs	r3, #0
 80090ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090b2:	e2ba      	b.n	800962a <UART_SetConfig+0x7ae>
 80090b4:	2304      	movs	r3, #4
 80090b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ba:	e2b6      	b.n	800962a <UART_SetConfig+0x7ae>
 80090bc:	2308      	movs	r3, #8
 80090be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c2:	e2b2      	b.n	800962a <UART_SetConfig+0x7ae>
 80090c4:	2310      	movs	r3, #16
 80090c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ca:	e2ae      	b.n	800962a <UART_SetConfig+0x7ae>
 80090cc:	2320      	movs	r3, #32
 80090ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d2:	e2aa      	b.n	800962a <UART_SetConfig+0x7ae>
 80090d4:	2340      	movs	r3, #64	@ 0x40
 80090d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090da:	e2a6      	b.n	800962a <UART_SetConfig+0x7ae>
 80090dc:	2380      	movs	r3, #128	@ 0x80
 80090de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e2:	e2a2      	b.n	800962a <UART_SetConfig+0x7ae>
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a35      	ldr	r2, [pc, #212]	@ (80091c0 <UART_SetConfig+0x344>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d130      	bne.n	8009150 <UART_SetConfig+0x2d4>
 80090ee:	4b31      	ldr	r3, [pc, #196]	@ (80091b4 <UART_SetConfig+0x338>)
 80090f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090f2:	f003 0307 	and.w	r3, r3, #7
 80090f6:	2b05      	cmp	r3, #5
 80090f8:	d826      	bhi.n	8009148 <UART_SetConfig+0x2cc>
 80090fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009100 <UART_SetConfig+0x284>)
 80090fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009100:	08009119 	.word	0x08009119
 8009104:	08009121 	.word	0x08009121
 8009108:	08009129 	.word	0x08009129
 800910c:	08009131 	.word	0x08009131
 8009110:	08009139 	.word	0x08009139
 8009114:	08009141 	.word	0x08009141
 8009118:	2300      	movs	r3, #0
 800911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911e:	e284      	b.n	800962a <UART_SetConfig+0x7ae>
 8009120:	2304      	movs	r3, #4
 8009122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009126:	e280      	b.n	800962a <UART_SetConfig+0x7ae>
 8009128:	2308      	movs	r3, #8
 800912a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912e:	e27c      	b.n	800962a <UART_SetConfig+0x7ae>
 8009130:	2310      	movs	r3, #16
 8009132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009136:	e278      	b.n	800962a <UART_SetConfig+0x7ae>
 8009138:	2320      	movs	r3, #32
 800913a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913e:	e274      	b.n	800962a <UART_SetConfig+0x7ae>
 8009140:	2340      	movs	r3, #64	@ 0x40
 8009142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009146:	e270      	b.n	800962a <UART_SetConfig+0x7ae>
 8009148:	2380      	movs	r3, #128	@ 0x80
 800914a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914e:	e26c      	b.n	800962a <UART_SetConfig+0x7ae>
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a1b      	ldr	r2, [pc, #108]	@ (80091c4 <UART_SetConfig+0x348>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d142      	bne.n	80091e0 <UART_SetConfig+0x364>
 800915a:	4b16      	ldr	r3, [pc, #88]	@ (80091b4 <UART_SetConfig+0x338>)
 800915c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800915e:	f003 0307 	and.w	r3, r3, #7
 8009162:	2b05      	cmp	r3, #5
 8009164:	d838      	bhi.n	80091d8 <UART_SetConfig+0x35c>
 8009166:	a201      	add	r2, pc, #4	@ (adr r2, 800916c <UART_SetConfig+0x2f0>)
 8009168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916c:	08009185 	.word	0x08009185
 8009170:	0800918d 	.word	0x0800918d
 8009174:	08009195 	.word	0x08009195
 8009178:	0800919d 	.word	0x0800919d
 800917c:	080091c9 	.word	0x080091c9
 8009180:	080091d1 	.word	0x080091d1
 8009184:	2300      	movs	r3, #0
 8009186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800918a:	e24e      	b.n	800962a <UART_SetConfig+0x7ae>
 800918c:	2304      	movs	r3, #4
 800918e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009192:	e24a      	b.n	800962a <UART_SetConfig+0x7ae>
 8009194:	2308      	movs	r3, #8
 8009196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800919a:	e246      	b.n	800962a <UART_SetConfig+0x7ae>
 800919c:	2310      	movs	r3, #16
 800919e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a2:	e242      	b.n	800962a <UART_SetConfig+0x7ae>
 80091a4:	cfff69f3 	.word	0xcfff69f3
 80091a8:	58000c00 	.word	0x58000c00
 80091ac:	11fff4ff 	.word	0x11fff4ff
 80091b0:	40011000 	.word	0x40011000
 80091b4:	58024400 	.word	0x58024400
 80091b8:	40004400 	.word	0x40004400
 80091bc:	40004800 	.word	0x40004800
 80091c0:	40004c00 	.word	0x40004c00
 80091c4:	40005000 	.word	0x40005000
 80091c8:	2320      	movs	r3, #32
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ce:	e22c      	b.n	800962a <UART_SetConfig+0x7ae>
 80091d0:	2340      	movs	r3, #64	@ 0x40
 80091d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091d6:	e228      	b.n	800962a <UART_SetConfig+0x7ae>
 80091d8:	2380      	movs	r3, #128	@ 0x80
 80091da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091de:	e224      	b.n	800962a <UART_SetConfig+0x7ae>
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4ab1      	ldr	r2, [pc, #708]	@ (80094ac <UART_SetConfig+0x630>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d176      	bne.n	80092d8 <UART_SetConfig+0x45c>
 80091ea:	4bb1      	ldr	r3, [pc, #708]	@ (80094b0 <UART_SetConfig+0x634>)
 80091ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091f2:	2b28      	cmp	r3, #40	@ 0x28
 80091f4:	d86c      	bhi.n	80092d0 <UART_SetConfig+0x454>
 80091f6:	a201      	add	r2, pc, #4	@ (adr r2, 80091fc <UART_SetConfig+0x380>)
 80091f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fc:	080092a1 	.word	0x080092a1
 8009200:	080092d1 	.word	0x080092d1
 8009204:	080092d1 	.word	0x080092d1
 8009208:	080092d1 	.word	0x080092d1
 800920c:	080092d1 	.word	0x080092d1
 8009210:	080092d1 	.word	0x080092d1
 8009214:	080092d1 	.word	0x080092d1
 8009218:	080092d1 	.word	0x080092d1
 800921c:	080092a9 	.word	0x080092a9
 8009220:	080092d1 	.word	0x080092d1
 8009224:	080092d1 	.word	0x080092d1
 8009228:	080092d1 	.word	0x080092d1
 800922c:	080092d1 	.word	0x080092d1
 8009230:	080092d1 	.word	0x080092d1
 8009234:	080092d1 	.word	0x080092d1
 8009238:	080092d1 	.word	0x080092d1
 800923c:	080092b1 	.word	0x080092b1
 8009240:	080092d1 	.word	0x080092d1
 8009244:	080092d1 	.word	0x080092d1
 8009248:	080092d1 	.word	0x080092d1
 800924c:	080092d1 	.word	0x080092d1
 8009250:	080092d1 	.word	0x080092d1
 8009254:	080092d1 	.word	0x080092d1
 8009258:	080092d1 	.word	0x080092d1
 800925c:	080092b9 	.word	0x080092b9
 8009260:	080092d1 	.word	0x080092d1
 8009264:	080092d1 	.word	0x080092d1
 8009268:	080092d1 	.word	0x080092d1
 800926c:	080092d1 	.word	0x080092d1
 8009270:	080092d1 	.word	0x080092d1
 8009274:	080092d1 	.word	0x080092d1
 8009278:	080092d1 	.word	0x080092d1
 800927c:	080092c1 	.word	0x080092c1
 8009280:	080092d1 	.word	0x080092d1
 8009284:	080092d1 	.word	0x080092d1
 8009288:	080092d1 	.word	0x080092d1
 800928c:	080092d1 	.word	0x080092d1
 8009290:	080092d1 	.word	0x080092d1
 8009294:	080092d1 	.word	0x080092d1
 8009298:	080092d1 	.word	0x080092d1
 800929c:	080092c9 	.word	0x080092c9
 80092a0:	2301      	movs	r3, #1
 80092a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a6:	e1c0      	b.n	800962a <UART_SetConfig+0x7ae>
 80092a8:	2304      	movs	r3, #4
 80092aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ae:	e1bc      	b.n	800962a <UART_SetConfig+0x7ae>
 80092b0:	2308      	movs	r3, #8
 80092b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092b6:	e1b8      	b.n	800962a <UART_SetConfig+0x7ae>
 80092b8:	2310      	movs	r3, #16
 80092ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092be:	e1b4      	b.n	800962a <UART_SetConfig+0x7ae>
 80092c0:	2320      	movs	r3, #32
 80092c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092c6:	e1b0      	b.n	800962a <UART_SetConfig+0x7ae>
 80092c8:	2340      	movs	r3, #64	@ 0x40
 80092ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ce:	e1ac      	b.n	800962a <UART_SetConfig+0x7ae>
 80092d0:	2380      	movs	r3, #128	@ 0x80
 80092d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092d6:	e1a8      	b.n	800962a <UART_SetConfig+0x7ae>
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a75      	ldr	r2, [pc, #468]	@ (80094b4 <UART_SetConfig+0x638>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d130      	bne.n	8009344 <UART_SetConfig+0x4c8>
 80092e2:	4b73      	ldr	r3, [pc, #460]	@ (80094b0 <UART_SetConfig+0x634>)
 80092e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092e6:	f003 0307 	and.w	r3, r3, #7
 80092ea:	2b05      	cmp	r3, #5
 80092ec:	d826      	bhi.n	800933c <UART_SetConfig+0x4c0>
 80092ee:	a201      	add	r2, pc, #4	@ (adr r2, 80092f4 <UART_SetConfig+0x478>)
 80092f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f4:	0800930d 	.word	0x0800930d
 80092f8:	08009315 	.word	0x08009315
 80092fc:	0800931d 	.word	0x0800931d
 8009300:	08009325 	.word	0x08009325
 8009304:	0800932d 	.word	0x0800932d
 8009308:	08009335 	.word	0x08009335
 800930c:	2300      	movs	r3, #0
 800930e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009312:	e18a      	b.n	800962a <UART_SetConfig+0x7ae>
 8009314:	2304      	movs	r3, #4
 8009316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800931a:	e186      	b.n	800962a <UART_SetConfig+0x7ae>
 800931c:	2308      	movs	r3, #8
 800931e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009322:	e182      	b.n	800962a <UART_SetConfig+0x7ae>
 8009324:	2310      	movs	r3, #16
 8009326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932a:	e17e      	b.n	800962a <UART_SetConfig+0x7ae>
 800932c:	2320      	movs	r3, #32
 800932e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009332:	e17a      	b.n	800962a <UART_SetConfig+0x7ae>
 8009334:	2340      	movs	r3, #64	@ 0x40
 8009336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800933a:	e176      	b.n	800962a <UART_SetConfig+0x7ae>
 800933c:	2380      	movs	r3, #128	@ 0x80
 800933e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009342:	e172      	b.n	800962a <UART_SetConfig+0x7ae>
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a5b      	ldr	r2, [pc, #364]	@ (80094b8 <UART_SetConfig+0x63c>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d130      	bne.n	80093b0 <UART_SetConfig+0x534>
 800934e:	4b58      	ldr	r3, [pc, #352]	@ (80094b0 <UART_SetConfig+0x634>)
 8009350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009352:	f003 0307 	and.w	r3, r3, #7
 8009356:	2b05      	cmp	r3, #5
 8009358:	d826      	bhi.n	80093a8 <UART_SetConfig+0x52c>
 800935a:	a201      	add	r2, pc, #4	@ (adr r2, 8009360 <UART_SetConfig+0x4e4>)
 800935c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009360:	08009379 	.word	0x08009379
 8009364:	08009381 	.word	0x08009381
 8009368:	08009389 	.word	0x08009389
 800936c:	08009391 	.word	0x08009391
 8009370:	08009399 	.word	0x08009399
 8009374:	080093a1 	.word	0x080093a1
 8009378:	2300      	movs	r3, #0
 800937a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937e:	e154      	b.n	800962a <UART_SetConfig+0x7ae>
 8009380:	2304      	movs	r3, #4
 8009382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009386:	e150      	b.n	800962a <UART_SetConfig+0x7ae>
 8009388:	2308      	movs	r3, #8
 800938a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938e:	e14c      	b.n	800962a <UART_SetConfig+0x7ae>
 8009390:	2310      	movs	r3, #16
 8009392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009396:	e148      	b.n	800962a <UART_SetConfig+0x7ae>
 8009398:	2320      	movs	r3, #32
 800939a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939e:	e144      	b.n	800962a <UART_SetConfig+0x7ae>
 80093a0:	2340      	movs	r3, #64	@ 0x40
 80093a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a6:	e140      	b.n	800962a <UART_SetConfig+0x7ae>
 80093a8:	2380      	movs	r3, #128	@ 0x80
 80093aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ae:	e13c      	b.n	800962a <UART_SetConfig+0x7ae>
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a41      	ldr	r2, [pc, #260]	@ (80094bc <UART_SetConfig+0x640>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	f040 8082 	bne.w	80094c0 <UART_SetConfig+0x644>
 80093bc:	4b3c      	ldr	r3, [pc, #240]	@ (80094b0 <UART_SetConfig+0x634>)
 80093be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093c4:	2b28      	cmp	r3, #40	@ 0x28
 80093c6:	d86d      	bhi.n	80094a4 <UART_SetConfig+0x628>
 80093c8:	a201      	add	r2, pc, #4	@ (adr r2, 80093d0 <UART_SetConfig+0x554>)
 80093ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ce:	bf00      	nop
 80093d0:	08009475 	.word	0x08009475
 80093d4:	080094a5 	.word	0x080094a5
 80093d8:	080094a5 	.word	0x080094a5
 80093dc:	080094a5 	.word	0x080094a5
 80093e0:	080094a5 	.word	0x080094a5
 80093e4:	080094a5 	.word	0x080094a5
 80093e8:	080094a5 	.word	0x080094a5
 80093ec:	080094a5 	.word	0x080094a5
 80093f0:	0800947d 	.word	0x0800947d
 80093f4:	080094a5 	.word	0x080094a5
 80093f8:	080094a5 	.word	0x080094a5
 80093fc:	080094a5 	.word	0x080094a5
 8009400:	080094a5 	.word	0x080094a5
 8009404:	080094a5 	.word	0x080094a5
 8009408:	080094a5 	.word	0x080094a5
 800940c:	080094a5 	.word	0x080094a5
 8009410:	08009485 	.word	0x08009485
 8009414:	080094a5 	.word	0x080094a5
 8009418:	080094a5 	.word	0x080094a5
 800941c:	080094a5 	.word	0x080094a5
 8009420:	080094a5 	.word	0x080094a5
 8009424:	080094a5 	.word	0x080094a5
 8009428:	080094a5 	.word	0x080094a5
 800942c:	080094a5 	.word	0x080094a5
 8009430:	0800948d 	.word	0x0800948d
 8009434:	080094a5 	.word	0x080094a5
 8009438:	080094a5 	.word	0x080094a5
 800943c:	080094a5 	.word	0x080094a5
 8009440:	080094a5 	.word	0x080094a5
 8009444:	080094a5 	.word	0x080094a5
 8009448:	080094a5 	.word	0x080094a5
 800944c:	080094a5 	.word	0x080094a5
 8009450:	08009495 	.word	0x08009495
 8009454:	080094a5 	.word	0x080094a5
 8009458:	080094a5 	.word	0x080094a5
 800945c:	080094a5 	.word	0x080094a5
 8009460:	080094a5 	.word	0x080094a5
 8009464:	080094a5 	.word	0x080094a5
 8009468:	080094a5 	.word	0x080094a5
 800946c:	080094a5 	.word	0x080094a5
 8009470:	0800949d 	.word	0x0800949d
 8009474:	2301      	movs	r3, #1
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e0d6      	b.n	800962a <UART_SetConfig+0x7ae>
 800947c:	2304      	movs	r3, #4
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e0d2      	b.n	800962a <UART_SetConfig+0x7ae>
 8009484:	2308      	movs	r3, #8
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948a:	e0ce      	b.n	800962a <UART_SetConfig+0x7ae>
 800948c:	2310      	movs	r3, #16
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009492:	e0ca      	b.n	800962a <UART_SetConfig+0x7ae>
 8009494:	2320      	movs	r3, #32
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949a:	e0c6      	b.n	800962a <UART_SetConfig+0x7ae>
 800949c:	2340      	movs	r3, #64	@ 0x40
 800949e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a2:	e0c2      	b.n	800962a <UART_SetConfig+0x7ae>
 80094a4:	2380      	movs	r3, #128	@ 0x80
 80094a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094aa:	e0be      	b.n	800962a <UART_SetConfig+0x7ae>
 80094ac:	40011400 	.word	0x40011400
 80094b0:	58024400 	.word	0x58024400
 80094b4:	40007800 	.word	0x40007800
 80094b8:	40007c00 	.word	0x40007c00
 80094bc:	40011800 	.word	0x40011800
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4aad      	ldr	r2, [pc, #692]	@ (800977c <UART_SetConfig+0x900>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d176      	bne.n	80095b8 <UART_SetConfig+0x73c>
 80094ca:	4bad      	ldr	r3, [pc, #692]	@ (8009780 <UART_SetConfig+0x904>)
 80094cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094d2:	2b28      	cmp	r3, #40	@ 0x28
 80094d4:	d86c      	bhi.n	80095b0 <UART_SetConfig+0x734>
 80094d6:	a201      	add	r2, pc, #4	@ (adr r2, 80094dc <UART_SetConfig+0x660>)
 80094d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094dc:	08009581 	.word	0x08009581
 80094e0:	080095b1 	.word	0x080095b1
 80094e4:	080095b1 	.word	0x080095b1
 80094e8:	080095b1 	.word	0x080095b1
 80094ec:	080095b1 	.word	0x080095b1
 80094f0:	080095b1 	.word	0x080095b1
 80094f4:	080095b1 	.word	0x080095b1
 80094f8:	080095b1 	.word	0x080095b1
 80094fc:	08009589 	.word	0x08009589
 8009500:	080095b1 	.word	0x080095b1
 8009504:	080095b1 	.word	0x080095b1
 8009508:	080095b1 	.word	0x080095b1
 800950c:	080095b1 	.word	0x080095b1
 8009510:	080095b1 	.word	0x080095b1
 8009514:	080095b1 	.word	0x080095b1
 8009518:	080095b1 	.word	0x080095b1
 800951c:	08009591 	.word	0x08009591
 8009520:	080095b1 	.word	0x080095b1
 8009524:	080095b1 	.word	0x080095b1
 8009528:	080095b1 	.word	0x080095b1
 800952c:	080095b1 	.word	0x080095b1
 8009530:	080095b1 	.word	0x080095b1
 8009534:	080095b1 	.word	0x080095b1
 8009538:	080095b1 	.word	0x080095b1
 800953c:	08009599 	.word	0x08009599
 8009540:	080095b1 	.word	0x080095b1
 8009544:	080095b1 	.word	0x080095b1
 8009548:	080095b1 	.word	0x080095b1
 800954c:	080095b1 	.word	0x080095b1
 8009550:	080095b1 	.word	0x080095b1
 8009554:	080095b1 	.word	0x080095b1
 8009558:	080095b1 	.word	0x080095b1
 800955c:	080095a1 	.word	0x080095a1
 8009560:	080095b1 	.word	0x080095b1
 8009564:	080095b1 	.word	0x080095b1
 8009568:	080095b1 	.word	0x080095b1
 800956c:	080095b1 	.word	0x080095b1
 8009570:	080095b1 	.word	0x080095b1
 8009574:	080095b1 	.word	0x080095b1
 8009578:	080095b1 	.word	0x080095b1
 800957c:	080095a9 	.word	0x080095a9
 8009580:	2301      	movs	r3, #1
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009586:	e050      	b.n	800962a <UART_SetConfig+0x7ae>
 8009588:	2304      	movs	r3, #4
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958e:	e04c      	b.n	800962a <UART_SetConfig+0x7ae>
 8009590:	2308      	movs	r3, #8
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009596:	e048      	b.n	800962a <UART_SetConfig+0x7ae>
 8009598:	2310      	movs	r3, #16
 800959a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959e:	e044      	b.n	800962a <UART_SetConfig+0x7ae>
 80095a0:	2320      	movs	r3, #32
 80095a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a6:	e040      	b.n	800962a <UART_SetConfig+0x7ae>
 80095a8:	2340      	movs	r3, #64	@ 0x40
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ae:	e03c      	b.n	800962a <UART_SetConfig+0x7ae>
 80095b0:	2380      	movs	r3, #128	@ 0x80
 80095b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b6:	e038      	b.n	800962a <UART_SetConfig+0x7ae>
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a71      	ldr	r2, [pc, #452]	@ (8009784 <UART_SetConfig+0x908>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d130      	bne.n	8009624 <UART_SetConfig+0x7a8>
 80095c2:	4b6f      	ldr	r3, [pc, #444]	@ (8009780 <UART_SetConfig+0x904>)
 80095c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095c6:	f003 0307 	and.w	r3, r3, #7
 80095ca:	2b05      	cmp	r3, #5
 80095cc:	d826      	bhi.n	800961c <UART_SetConfig+0x7a0>
 80095ce:	a201      	add	r2, pc, #4	@ (adr r2, 80095d4 <UART_SetConfig+0x758>)
 80095d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d4:	080095ed 	.word	0x080095ed
 80095d8:	080095f5 	.word	0x080095f5
 80095dc:	080095fd 	.word	0x080095fd
 80095e0:	08009605 	.word	0x08009605
 80095e4:	0800960d 	.word	0x0800960d
 80095e8:	08009615 	.word	0x08009615
 80095ec:	2302      	movs	r3, #2
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e01a      	b.n	800962a <UART_SetConfig+0x7ae>
 80095f4:	2304      	movs	r3, #4
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e016      	b.n	800962a <UART_SetConfig+0x7ae>
 80095fc:	2308      	movs	r3, #8
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e012      	b.n	800962a <UART_SetConfig+0x7ae>
 8009604:	2310      	movs	r3, #16
 8009606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960a:	e00e      	b.n	800962a <UART_SetConfig+0x7ae>
 800960c:	2320      	movs	r3, #32
 800960e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009612:	e00a      	b.n	800962a <UART_SetConfig+0x7ae>
 8009614:	2340      	movs	r3, #64	@ 0x40
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961a:	e006      	b.n	800962a <UART_SetConfig+0x7ae>
 800961c:	2380      	movs	r3, #128	@ 0x80
 800961e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009622:	e002      	b.n	800962a <UART_SetConfig+0x7ae>
 8009624:	2380      	movs	r3, #128	@ 0x80
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a55      	ldr	r2, [pc, #340]	@ (8009784 <UART_SetConfig+0x908>)
 8009630:	4293      	cmp	r3, r2
 8009632:	f040 80f8 	bne.w	8009826 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009636:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800963a:	2b20      	cmp	r3, #32
 800963c:	dc46      	bgt.n	80096cc <UART_SetConfig+0x850>
 800963e:	2b02      	cmp	r3, #2
 8009640:	db75      	blt.n	800972e <UART_SetConfig+0x8b2>
 8009642:	3b02      	subs	r3, #2
 8009644:	2b1e      	cmp	r3, #30
 8009646:	d872      	bhi.n	800972e <UART_SetConfig+0x8b2>
 8009648:	a201      	add	r2, pc, #4	@ (adr r2, 8009650 <UART_SetConfig+0x7d4>)
 800964a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964e:	bf00      	nop
 8009650:	080096d3 	.word	0x080096d3
 8009654:	0800972f 	.word	0x0800972f
 8009658:	080096db 	.word	0x080096db
 800965c:	0800972f 	.word	0x0800972f
 8009660:	0800972f 	.word	0x0800972f
 8009664:	0800972f 	.word	0x0800972f
 8009668:	080096eb 	.word	0x080096eb
 800966c:	0800972f 	.word	0x0800972f
 8009670:	0800972f 	.word	0x0800972f
 8009674:	0800972f 	.word	0x0800972f
 8009678:	0800972f 	.word	0x0800972f
 800967c:	0800972f 	.word	0x0800972f
 8009680:	0800972f 	.word	0x0800972f
 8009684:	0800972f 	.word	0x0800972f
 8009688:	080096fb 	.word	0x080096fb
 800968c:	0800972f 	.word	0x0800972f
 8009690:	0800972f 	.word	0x0800972f
 8009694:	0800972f 	.word	0x0800972f
 8009698:	0800972f 	.word	0x0800972f
 800969c:	0800972f 	.word	0x0800972f
 80096a0:	0800972f 	.word	0x0800972f
 80096a4:	0800972f 	.word	0x0800972f
 80096a8:	0800972f 	.word	0x0800972f
 80096ac:	0800972f 	.word	0x0800972f
 80096b0:	0800972f 	.word	0x0800972f
 80096b4:	0800972f 	.word	0x0800972f
 80096b8:	0800972f 	.word	0x0800972f
 80096bc:	0800972f 	.word	0x0800972f
 80096c0:	0800972f 	.word	0x0800972f
 80096c4:	0800972f 	.word	0x0800972f
 80096c8:	08009721 	.word	0x08009721
 80096cc:	2b40      	cmp	r3, #64	@ 0x40
 80096ce:	d02a      	beq.n	8009726 <UART_SetConfig+0x8aa>
 80096d0:	e02d      	b.n	800972e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80096d2:	f7fd fe9b 	bl	800740c <HAL_RCCEx_GetD3PCLK1Freq>
 80096d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096d8:	e02f      	b.n	800973a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fd feaa 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e8:	e027      	b.n	800973a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096ea:	f107 0318 	add.w	r3, r7, #24
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fd fff6 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096f8:	e01f      	b.n	800973a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096fa:	4b21      	ldr	r3, [pc, #132]	@ (8009780 <UART_SetConfig+0x904>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 0320 	and.w	r3, r3, #32
 8009702:	2b00      	cmp	r3, #0
 8009704:	d009      	beq.n	800971a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009706:	4b1e      	ldr	r3, [pc, #120]	@ (8009780 <UART_SetConfig+0x904>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	08db      	lsrs	r3, r3, #3
 800970c:	f003 0303 	and.w	r3, r3, #3
 8009710:	4a1d      	ldr	r2, [pc, #116]	@ (8009788 <UART_SetConfig+0x90c>)
 8009712:	fa22 f303 	lsr.w	r3, r2, r3
 8009716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009718:	e00f      	b.n	800973a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800971a:	4b1b      	ldr	r3, [pc, #108]	@ (8009788 <UART_SetConfig+0x90c>)
 800971c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800971e:	e00c      	b.n	800973a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009720:	4b1a      	ldr	r3, [pc, #104]	@ (800978c <UART_SetConfig+0x910>)
 8009722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009724:	e009      	b.n	800973a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800972a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800972c:	e005      	b.n	800973a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009738:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800973a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 81ee 	beq.w	8009b1e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009746:	4a12      	ldr	r2, [pc, #72]	@ (8009790 <UART_SetConfig+0x914>)
 8009748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800974c:	461a      	mov	r2, r3
 800974e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009750:	fbb3 f3f2 	udiv	r3, r3, r2
 8009754:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	4613      	mov	r3, r2
 800975c:	005b      	lsls	r3, r3, #1
 800975e:	4413      	add	r3, r2
 8009760:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009762:	429a      	cmp	r2, r3
 8009764:	d305      	bcc.n	8009772 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800976c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800976e:	429a      	cmp	r2, r3
 8009770:	d910      	bls.n	8009794 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009778:	e1d1      	b.n	8009b1e <UART_SetConfig+0xca2>
 800977a:	bf00      	nop
 800977c:	40011c00 	.word	0x40011c00
 8009780:	58024400 	.word	0x58024400
 8009784:	58000c00 	.word	0x58000c00
 8009788:	03d09000 	.word	0x03d09000
 800978c:	003d0900 	.word	0x003d0900
 8009790:	0800a654 	.word	0x0800a654
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009796:	2200      	movs	r2, #0
 8009798:	60bb      	str	r3, [r7, #8]
 800979a:	60fa      	str	r2, [r7, #12]
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a0:	4ac0      	ldr	r2, [pc, #768]	@ (8009aa4 <UART_SetConfig+0xc28>)
 80097a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	2200      	movs	r2, #0
 80097aa:	603b      	str	r3, [r7, #0]
 80097ac:	607a      	str	r2, [r7, #4]
 80097ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097b6:	f7f6 fda9 	bl	800030c <__aeabi_uldivmod>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	4610      	mov	r0, r2
 80097c0:	4619      	mov	r1, r3
 80097c2:	f04f 0200 	mov.w	r2, #0
 80097c6:	f04f 0300 	mov.w	r3, #0
 80097ca:	020b      	lsls	r3, r1, #8
 80097cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097d0:	0202      	lsls	r2, r0, #8
 80097d2:	6979      	ldr	r1, [r7, #20]
 80097d4:	6849      	ldr	r1, [r1, #4]
 80097d6:	0849      	lsrs	r1, r1, #1
 80097d8:	2000      	movs	r0, #0
 80097da:	460c      	mov	r4, r1
 80097dc:	4605      	mov	r5, r0
 80097de:	eb12 0804 	adds.w	r8, r2, r4
 80097e2:	eb43 0905 	adc.w	r9, r3, r5
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	469a      	mov	sl, r3
 80097ee:	4693      	mov	fp, r2
 80097f0:	4652      	mov	r2, sl
 80097f2:	465b      	mov	r3, fp
 80097f4:	4640      	mov	r0, r8
 80097f6:	4649      	mov	r1, r9
 80097f8:	f7f6 fd88 	bl	800030c <__aeabi_uldivmod>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	4613      	mov	r3, r2
 8009802:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009806:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800980a:	d308      	bcc.n	800981e <UART_SetConfig+0x9a2>
 800980c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009812:	d204      	bcs.n	800981e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800981a:	60da      	str	r2, [r3, #12]
 800981c:	e17f      	b.n	8009b1e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009824:	e17b      	b.n	8009b1e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800982e:	f040 80bd 	bne.w	80099ac <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009832:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009836:	2b20      	cmp	r3, #32
 8009838:	dc48      	bgt.n	80098cc <UART_SetConfig+0xa50>
 800983a:	2b00      	cmp	r3, #0
 800983c:	db7b      	blt.n	8009936 <UART_SetConfig+0xaba>
 800983e:	2b20      	cmp	r3, #32
 8009840:	d879      	bhi.n	8009936 <UART_SetConfig+0xaba>
 8009842:	a201      	add	r2, pc, #4	@ (adr r2, 8009848 <UART_SetConfig+0x9cc>)
 8009844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009848:	080098d3 	.word	0x080098d3
 800984c:	080098db 	.word	0x080098db
 8009850:	08009937 	.word	0x08009937
 8009854:	08009937 	.word	0x08009937
 8009858:	080098e3 	.word	0x080098e3
 800985c:	08009937 	.word	0x08009937
 8009860:	08009937 	.word	0x08009937
 8009864:	08009937 	.word	0x08009937
 8009868:	080098f3 	.word	0x080098f3
 800986c:	08009937 	.word	0x08009937
 8009870:	08009937 	.word	0x08009937
 8009874:	08009937 	.word	0x08009937
 8009878:	08009937 	.word	0x08009937
 800987c:	08009937 	.word	0x08009937
 8009880:	08009937 	.word	0x08009937
 8009884:	08009937 	.word	0x08009937
 8009888:	08009903 	.word	0x08009903
 800988c:	08009937 	.word	0x08009937
 8009890:	08009937 	.word	0x08009937
 8009894:	08009937 	.word	0x08009937
 8009898:	08009937 	.word	0x08009937
 800989c:	08009937 	.word	0x08009937
 80098a0:	08009937 	.word	0x08009937
 80098a4:	08009937 	.word	0x08009937
 80098a8:	08009937 	.word	0x08009937
 80098ac:	08009937 	.word	0x08009937
 80098b0:	08009937 	.word	0x08009937
 80098b4:	08009937 	.word	0x08009937
 80098b8:	08009937 	.word	0x08009937
 80098bc:	08009937 	.word	0x08009937
 80098c0:	08009937 	.word	0x08009937
 80098c4:	08009937 	.word	0x08009937
 80098c8:	08009929 	.word	0x08009929
 80098cc:	2b40      	cmp	r3, #64	@ 0x40
 80098ce:	d02e      	beq.n	800992e <UART_SetConfig+0xab2>
 80098d0:	e031      	b.n	8009936 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098d2:	f7fc fbcf 	bl	8006074 <HAL_RCC_GetPCLK1Freq>
 80098d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098d8:	e033      	b.n	8009942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098da:	f7fc fbe1 	bl	80060a0 <HAL_RCC_GetPCLK2Freq>
 80098de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098e0:	e02f      	b.n	8009942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fd fda6 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098f0:	e027      	b.n	8009942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098f2:	f107 0318 	add.w	r3, r7, #24
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fd fef2 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009900:	e01f      	b.n	8009942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009902:	4b69      	ldr	r3, [pc, #420]	@ (8009aa8 <UART_SetConfig+0xc2c>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 0320 	and.w	r3, r3, #32
 800990a:	2b00      	cmp	r3, #0
 800990c:	d009      	beq.n	8009922 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800990e:	4b66      	ldr	r3, [pc, #408]	@ (8009aa8 <UART_SetConfig+0xc2c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	08db      	lsrs	r3, r3, #3
 8009914:	f003 0303 	and.w	r3, r3, #3
 8009918:	4a64      	ldr	r2, [pc, #400]	@ (8009aac <UART_SetConfig+0xc30>)
 800991a:	fa22 f303 	lsr.w	r3, r2, r3
 800991e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009920:	e00f      	b.n	8009942 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009922:	4b62      	ldr	r3, [pc, #392]	@ (8009aac <UART_SetConfig+0xc30>)
 8009924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009926:	e00c      	b.n	8009942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009928:	4b61      	ldr	r3, [pc, #388]	@ (8009ab0 <UART_SetConfig+0xc34>)
 800992a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800992c:	e009      	b.n	8009942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800992e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009934:	e005      	b.n	8009942 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009936:	2300      	movs	r3, #0
 8009938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009940:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 80ea 	beq.w	8009b1e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800994e:	4a55      	ldr	r2, [pc, #340]	@ (8009aa4 <UART_SetConfig+0xc28>)
 8009950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009954:	461a      	mov	r2, r3
 8009956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009958:	fbb3 f3f2 	udiv	r3, r3, r2
 800995c:	005a      	lsls	r2, r3, #1
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	085b      	lsrs	r3, r3, #1
 8009964:	441a      	add	r2, r3
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	fbb2 f3f3 	udiv	r3, r2, r3
 800996e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009972:	2b0f      	cmp	r3, #15
 8009974:	d916      	bls.n	80099a4 <UART_SetConfig+0xb28>
 8009976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800997c:	d212      	bcs.n	80099a4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800997e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009980:	b29b      	uxth	r3, r3
 8009982:	f023 030f 	bic.w	r3, r3, #15
 8009986:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998a:	085b      	lsrs	r3, r3, #1
 800998c:	b29b      	uxth	r3, r3
 800998e:	f003 0307 	and.w	r3, r3, #7
 8009992:	b29a      	uxth	r2, r3
 8009994:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009996:	4313      	orrs	r3, r2
 8009998:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80099a0:	60da      	str	r2, [r3, #12]
 80099a2:	e0bc      	b.n	8009b1e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80099aa:	e0b8      	b.n	8009b1e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099b0:	2b20      	cmp	r3, #32
 80099b2:	dc4b      	bgt.n	8009a4c <UART_SetConfig+0xbd0>
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f2c0 8087 	blt.w	8009ac8 <UART_SetConfig+0xc4c>
 80099ba:	2b20      	cmp	r3, #32
 80099bc:	f200 8084 	bhi.w	8009ac8 <UART_SetConfig+0xc4c>
 80099c0:	a201      	add	r2, pc, #4	@ (adr r2, 80099c8 <UART_SetConfig+0xb4c>)
 80099c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c6:	bf00      	nop
 80099c8:	08009a53 	.word	0x08009a53
 80099cc:	08009a5b 	.word	0x08009a5b
 80099d0:	08009ac9 	.word	0x08009ac9
 80099d4:	08009ac9 	.word	0x08009ac9
 80099d8:	08009a63 	.word	0x08009a63
 80099dc:	08009ac9 	.word	0x08009ac9
 80099e0:	08009ac9 	.word	0x08009ac9
 80099e4:	08009ac9 	.word	0x08009ac9
 80099e8:	08009a73 	.word	0x08009a73
 80099ec:	08009ac9 	.word	0x08009ac9
 80099f0:	08009ac9 	.word	0x08009ac9
 80099f4:	08009ac9 	.word	0x08009ac9
 80099f8:	08009ac9 	.word	0x08009ac9
 80099fc:	08009ac9 	.word	0x08009ac9
 8009a00:	08009ac9 	.word	0x08009ac9
 8009a04:	08009ac9 	.word	0x08009ac9
 8009a08:	08009a83 	.word	0x08009a83
 8009a0c:	08009ac9 	.word	0x08009ac9
 8009a10:	08009ac9 	.word	0x08009ac9
 8009a14:	08009ac9 	.word	0x08009ac9
 8009a18:	08009ac9 	.word	0x08009ac9
 8009a1c:	08009ac9 	.word	0x08009ac9
 8009a20:	08009ac9 	.word	0x08009ac9
 8009a24:	08009ac9 	.word	0x08009ac9
 8009a28:	08009ac9 	.word	0x08009ac9
 8009a2c:	08009ac9 	.word	0x08009ac9
 8009a30:	08009ac9 	.word	0x08009ac9
 8009a34:	08009ac9 	.word	0x08009ac9
 8009a38:	08009ac9 	.word	0x08009ac9
 8009a3c:	08009ac9 	.word	0x08009ac9
 8009a40:	08009ac9 	.word	0x08009ac9
 8009a44:	08009ac9 	.word	0x08009ac9
 8009a48:	08009abb 	.word	0x08009abb
 8009a4c:	2b40      	cmp	r3, #64	@ 0x40
 8009a4e:	d037      	beq.n	8009ac0 <UART_SetConfig+0xc44>
 8009a50:	e03a      	b.n	8009ac8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a52:	f7fc fb0f 	bl	8006074 <HAL_RCC_GetPCLK1Freq>
 8009a56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a58:	e03c      	b.n	8009ad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a5a:	f7fc fb21 	bl	80060a0 <HAL_RCC_GetPCLK2Freq>
 8009a5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a60:	e038      	b.n	8009ad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fd fce6 	bl	8007438 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a70:	e030      	b.n	8009ad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a72:	f107 0318 	add.w	r3, r7, #24
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fd fe32 	bl	80076e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a80:	e028      	b.n	8009ad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a82:	4b09      	ldr	r3, [pc, #36]	@ (8009aa8 <UART_SetConfig+0xc2c>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0320 	and.w	r3, r3, #32
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d012      	beq.n	8009ab4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a8e:	4b06      	ldr	r3, [pc, #24]	@ (8009aa8 <UART_SetConfig+0xc2c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	08db      	lsrs	r3, r3, #3
 8009a94:	f003 0303 	and.w	r3, r3, #3
 8009a98:	4a04      	ldr	r2, [pc, #16]	@ (8009aac <UART_SetConfig+0xc30>)
 8009a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009aa0:	e018      	b.n	8009ad4 <UART_SetConfig+0xc58>
 8009aa2:	bf00      	nop
 8009aa4:	0800a654 	.word	0x0800a654
 8009aa8:	58024400 	.word	0x58024400
 8009aac:	03d09000 	.word	0x03d09000
 8009ab0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009ab4:	4b24      	ldr	r3, [pc, #144]	@ (8009b48 <UART_SetConfig+0xccc>)
 8009ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab8:	e00c      	b.n	8009ad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009aba:	4b24      	ldr	r3, [pc, #144]	@ (8009b4c <UART_SetConfig+0xcd0>)
 8009abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009abe:	e009      	b.n	8009ad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ac0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac6:	e005      	b.n	8009ad4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ad2:	bf00      	nop
    }

    if (pclk != 0U)
 8009ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d021      	beq.n	8009b1e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ade:	4a1c      	ldr	r2, [pc, #112]	@ (8009b50 <UART_SetConfig+0xcd4>)
 8009ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae8:	fbb3 f2f2 	udiv	r2, r3, r2
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	085b      	lsrs	r3, r3, #1
 8009af2:	441a      	add	r2, r3
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009afc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b00:	2b0f      	cmp	r3, #15
 8009b02:	d909      	bls.n	8009b18 <UART_SetConfig+0xc9c>
 8009b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b0a:	d205      	bcs.n	8009b18 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	60da      	str	r2, [r3, #12]
 8009b16:	e002      	b.n	8009b1e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	2200      	movs	r2, #0
 8009b32:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	2200      	movs	r2, #0
 8009b38:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009b3a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3748      	adds	r7, #72	@ 0x48
 8009b42:	46bd      	mov	sp, r7
 8009b44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b48:	03d09000 	.word	0x03d09000
 8009b4c:	003d0900 	.word	0x003d0900
 8009b50:	0800a654 	.word	0x0800a654

08009b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b60:	f003 0308 	and.w	r3, r3, #8
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00a      	beq.n	8009b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b82:	f003 0301 	and.w	r3, r3, #1
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00a      	beq.n	8009ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	430a      	orrs	r2, r1
 8009b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba4:	f003 0302 	and.w	r3, r3, #2
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00a      	beq.n	8009bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc6:	f003 0304 	and.w	r3, r3, #4
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00a      	beq.n	8009be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	430a      	orrs	r2, r1
 8009be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009be8:	f003 0310 	and.w	r3, r3, #16
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00a      	beq.n	8009c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	430a      	orrs	r2, r1
 8009c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0a:	f003 0320 	and.w	r3, r3, #32
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00a      	beq.n	8009c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d01a      	beq.n	8009c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	430a      	orrs	r2, r1
 8009c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c52:	d10a      	bne.n	8009c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	430a      	orrs	r2, r1
 8009c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00a      	beq.n	8009c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	605a      	str	r2, [r3, #4]
  }
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b098      	sub	sp, #96	@ 0x60
 8009c9c:	af02      	add	r7, sp, #8
 8009c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ca8:	f7f8 fa26 	bl	80020f8 <HAL_GetTick>
 8009cac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 0308 	and.w	r3, r3, #8
 8009cb8:	2b08      	cmp	r3, #8
 8009cba:	d12f      	bne.n	8009d1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f88e 	bl	8009dec <UART_WaitOnFlagUntilTimeout>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d022      	beq.n	8009d1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cde:	e853 3f00 	ldrex	r3, [r3]
 8009ce2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cea:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cf6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cfc:	e841 2300 	strex	r3, r2, [r1]
 8009d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1e6      	bne.n	8009cd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e063      	b.n	8009de4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 0304 	and.w	r3, r3, #4
 8009d26:	2b04      	cmp	r3, #4
 8009d28:	d149      	bne.n	8009dbe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d2a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d32:	2200      	movs	r2, #0
 8009d34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 f857 	bl	8009dec <UART_WaitOnFlagUntilTimeout>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d03c      	beq.n	8009dbe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4c:	e853 3f00 	ldrex	r3, [r3]
 8009d50:	623b      	str	r3, [r7, #32]
   return(result);
 8009d52:	6a3b      	ldr	r3, [r7, #32]
 8009d54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d62:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d64:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d6a:	e841 2300 	strex	r3, r2, [r1]
 8009d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1e6      	bne.n	8009d44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3308      	adds	r3, #8
 8009d7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f023 0301 	bic.w	r3, r3, #1
 8009d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3308      	adds	r3, #8
 8009d94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d96:	61fa      	str	r2, [r7, #28]
 8009d98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9a:	69b9      	ldr	r1, [r7, #24]
 8009d9c:	69fa      	ldr	r2, [r7, #28]
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	617b      	str	r3, [r7, #20]
   return(result);
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1e5      	bne.n	8009d76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2220      	movs	r2, #32
 8009dae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	e012      	b.n	8009de4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2220      	movs	r2, #32
 8009dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3758      	adds	r7, #88	@ 0x58
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	603b      	str	r3, [r7, #0]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dfc:	e04f      	b.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e04:	d04b      	beq.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e06:	f7f8 f977 	bl	80020f8 <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	69ba      	ldr	r2, [r7, #24]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d302      	bcc.n	8009e1c <UART_WaitOnFlagUntilTimeout+0x30>
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d101      	bne.n	8009e20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e04e      	b.n	8009ebe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f003 0304 	and.w	r3, r3, #4
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d037      	beq.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2b80      	cmp	r3, #128	@ 0x80
 8009e32:	d034      	beq.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b40      	cmp	r3, #64	@ 0x40
 8009e38:	d031      	beq.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	69db      	ldr	r3, [r3, #28]
 8009e40:	f003 0308 	and.w	r3, r3, #8
 8009e44:	2b08      	cmp	r3, #8
 8009e46:	d110      	bne.n	8009e6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2208      	movs	r2, #8
 8009e4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 f839 	bl	8009ec8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2208      	movs	r2, #8
 8009e5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e029      	b.n	8009ebe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	69db      	ldr	r3, [r3, #28]
 8009e70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e78:	d111      	bne.n	8009e9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 f81f 	bl	8009ec8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2220      	movs	r2, #32
 8009e8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e00f      	b.n	8009ebe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	69da      	ldr	r2, [r3, #28]
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	bf0c      	ite	eq
 8009eae:	2301      	moveq	r3, #1
 8009eb0:	2300      	movne	r3, #0
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	79fb      	ldrb	r3, [r7, #7]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d0a0      	beq.n	8009dfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
	...

08009ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b095      	sub	sp, #84	@ 0x54
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ed8:	e853 3f00 	ldrex	r3, [r3]
 8009edc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	461a      	mov	r2, r3
 8009eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009eee:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ef0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ef4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ef6:	e841 2300 	strex	r3, r2, [r1]
 8009efa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1e6      	bne.n	8009ed0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	3308      	adds	r3, #8
 8009f08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0a:	6a3b      	ldr	r3, [r7, #32]
 8009f0c:	e853 3f00 	ldrex	r3, [r3]
 8009f10:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f12:	69fa      	ldr	r2, [r7, #28]
 8009f14:	4b1e      	ldr	r3, [pc, #120]	@ (8009f90 <UART_EndRxTransfer+0xc8>)
 8009f16:	4013      	ands	r3, r2
 8009f18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3308      	adds	r3, #8
 8009f20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f2a:	e841 2300 	strex	r3, r2, [r1]
 8009f2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1e5      	bne.n	8009f02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d118      	bne.n	8009f70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	e853 3f00 	ldrex	r3, [r3]
 8009f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	f023 0310 	bic.w	r3, r3, #16
 8009f52:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	461a      	mov	r2, r3
 8009f5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f5c:	61bb      	str	r3, [r7, #24]
 8009f5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f60:	6979      	ldr	r1, [r7, #20]
 8009f62:	69ba      	ldr	r2, [r7, #24]
 8009f64:	e841 2300 	strex	r3, r2, [r1]
 8009f68:	613b      	str	r3, [r7, #16]
   return(result);
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1e6      	bne.n	8009f3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2220      	movs	r2, #32
 8009f74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009f84:	bf00      	nop
 8009f86:	3754      	adds	r7, #84	@ 0x54
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr
 8009f90:	effffffe 	.word	0xeffffffe

08009f94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d101      	bne.n	8009faa <HAL_UARTEx_DisableFifoMode+0x16>
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	e027      	b.n	8009ffa <HAL_UARTEx_DisableFifoMode+0x66>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2224      	movs	r2, #36	@ 0x24
 8009fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f022 0201 	bic.w	r2, r2, #1
 8009fd0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009fd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2220      	movs	r2, #32
 8009fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b084      	sub	sp, #16
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a016:	2b01      	cmp	r3, #1
 800a018:	d101      	bne.n	800a01e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a01a:	2302      	movs	r3, #2
 800a01c:	e02d      	b.n	800a07a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2224      	movs	r2, #36	@ 0x24
 800a02a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f022 0201 	bic.w	r2, r2, #1
 800a044:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	683a      	ldr	r2, [r7, #0]
 800a056:	430a      	orrs	r2, r1
 800a058:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f850 	bl	800a100 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2220      	movs	r2, #32
 800a06c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a092:	2b01      	cmp	r3, #1
 800a094:	d101      	bne.n	800a09a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a096:	2302      	movs	r3, #2
 800a098:	e02d      	b.n	800a0f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2224      	movs	r2, #36	@ 0x24
 800a0a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 0201 	bic.w	r2, r2, #1
 800a0c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f812 	bl	800a100 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2220      	movs	r2, #32
 800a0e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
	...

0800a100 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d108      	bne.n	800a122 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a120:	e031      	b.n	800a186 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a122:	2310      	movs	r3, #16
 800a124:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a126:	2310      	movs	r3, #16
 800a128:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	0e5b      	lsrs	r3, r3, #25
 800a132:	b2db      	uxtb	r3, r3
 800a134:	f003 0307 	and.w	r3, r3, #7
 800a138:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	0f5b      	lsrs	r3, r3, #29
 800a142:	b2db      	uxtb	r3, r3
 800a144:	f003 0307 	and.w	r3, r3, #7
 800a148:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a14a:	7bbb      	ldrb	r3, [r7, #14]
 800a14c:	7b3a      	ldrb	r2, [r7, #12]
 800a14e:	4911      	ldr	r1, [pc, #68]	@ (800a194 <UARTEx_SetNbDataToProcess+0x94>)
 800a150:	5c8a      	ldrb	r2, [r1, r2]
 800a152:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a156:	7b3a      	ldrb	r2, [r7, #12]
 800a158:	490f      	ldr	r1, [pc, #60]	@ (800a198 <UARTEx_SetNbDataToProcess+0x98>)
 800a15a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a15c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a160:	b29a      	uxth	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	7b7a      	ldrb	r2, [r7, #13]
 800a16c:	4909      	ldr	r1, [pc, #36]	@ (800a194 <UARTEx_SetNbDataToProcess+0x94>)
 800a16e:	5c8a      	ldrb	r2, [r1, r2]
 800a170:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a174:	7b7a      	ldrb	r2, [r7, #13]
 800a176:	4908      	ldr	r1, [pc, #32]	@ (800a198 <UARTEx_SetNbDataToProcess+0x98>)
 800a178:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a17a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a17e:	b29a      	uxth	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a186:	bf00      	nop
 800a188:	3714      	adds	r7, #20
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	0800a66c 	.word	0x0800a66c
 800a198:	0800a674 	.word	0x0800a674

0800a19c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a19c:	b084      	sub	sp, #16
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b084      	sub	sp, #16
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	f107 001c 	add.w	r0, r7, #28
 800a1aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a1ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d121      	bne.n	800a1fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68da      	ldr	r2, [r3, #12]
 800a1c6:	4b2c      	ldr	r3, [pc, #176]	@ (800a278 <USB_CoreInit+0xdc>)
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a1da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d105      	bne.n	800a1ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f911 	bl	800a416 <USB_CoreReset>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	73fb      	strb	r3, [r7, #15]
 800a1f8:	e01b      	b.n	800a232 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f905 	bl	800a416 <USB_CoreReset>
 800a20c:	4603      	mov	r3, r0
 800a20e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a210:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a214:	2b00      	cmp	r3, #0
 800a216:	d106      	bne.n	800a226 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a21c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	639a      	str	r2, [r3, #56]	@ 0x38
 800a224:	e005      	b.n	800a232 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a22a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a232:	7fbb      	ldrb	r3, [r7, #30]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d116      	bne.n	800a266 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a246:	4b0d      	ldr	r3, [pc, #52]	@ (800a27c <USB_CoreInit+0xe0>)
 800a248:	4313      	orrs	r3, r2
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	f043 0206 	orr.w	r2, r3, #6
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	f043 0220 	orr.w	r2, r3, #32
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a266:	7bfb      	ldrb	r3, [r7, #15]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a272:	b004      	add	sp, #16
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	ffbdffbf 	.word	0xffbdffbf
 800a27c:	03ee0000 	.word	0x03ee0000

0800a280 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	f023 0201 	bic.w	r2, r3, #1
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a2be:	78fb      	ldrb	r3, [r7, #3]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d115      	bne.n	800a2f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a2d0:	200a      	movs	r0, #10
 800a2d2:	f7f7 ff1d 	bl	8002110 <HAL_Delay>
      ms += 10U;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	330a      	adds	r3, #10
 800a2da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f88c 	bl	800a3fa <USB_GetMode>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d01e      	beq.n	800a326 <USB_SetCurrentMode+0x84>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2bc7      	cmp	r3, #199	@ 0xc7
 800a2ec:	d9f0      	bls.n	800a2d0 <USB_SetCurrentMode+0x2e>
 800a2ee:	e01a      	b.n	800a326 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a2f0:	78fb      	ldrb	r3, [r7, #3]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d115      	bne.n	800a322 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a302:	200a      	movs	r0, #10
 800a304:	f7f7 ff04 	bl	8002110 <HAL_Delay>
      ms += 10U;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	330a      	adds	r3, #10
 800a30c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f873 	bl	800a3fa <USB_GetMode>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d005      	beq.n	800a326 <USB_SetCurrentMode+0x84>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2bc7      	cmp	r3, #199	@ 0xc7
 800a31e:	d9f0      	bls.n	800a302 <USB_SetCurrentMode+0x60>
 800a320:	e001      	b.n	800a326 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e005      	b.n	800a332 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2bc8      	cmp	r3, #200	@ 0xc8
 800a32a:	d101      	bne.n	800a330 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	e000      	b.n	800a332 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b085      	sub	sp, #20
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a344:	2300      	movs	r3, #0
 800a346:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	3301      	adds	r3, #1
 800a34c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a354:	d901      	bls.n	800a35a <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a356:	2303      	movs	r3, #3
 800a358:	e01b      	b.n	800a392 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	daf2      	bge.n	800a348 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a362:	2300      	movs	r3, #0
 800a364:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	019b      	lsls	r3, r3, #6
 800a36a:	f043 0220 	orr.w	r2, r3, #32
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	3301      	adds	r3, #1
 800a376:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a37e:	d901      	bls.n	800a384 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a380:	2303      	movs	r3, #3
 800a382:	e006      	b.n	800a392 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	f003 0320 	and.w	r3, r3, #32
 800a38c:	2b20      	cmp	r3, #32
 800a38e:	d0f0      	beq.n	800a372 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr

0800a39e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b085      	sub	sp, #20
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3b6:	d901      	bls.n	800a3bc <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	e018      	b.n	800a3ee <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	daf2      	bge.n	800a3aa <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2210      	movs	r2, #16
 800a3cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3da:	d901      	bls.n	800a3e0 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	e006      	b.n	800a3ee <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	f003 0310 	and.w	r3, r3, #16
 800a3e8:	2b10      	cmp	r3, #16
 800a3ea:	d0f0      	beq.n	800a3ce <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3714      	adds	r7, #20
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b083      	sub	sp, #12
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	695b      	ldr	r3, [r3, #20]
 800a406:	f003 0301 	and.w	r3, r3, #1
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	370c      	adds	r7, #12
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a416:	b480      	push	{r7}
 800a418:	b085      	sub	sp, #20
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	3301      	adds	r3, #1
 800a426:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a42e:	d901      	bls.n	800a434 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a430:	2303      	movs	r3, #3
 800a432:	e01b      	b.n	800a46c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	daf2      	bge.n	800a422 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	f043 0201 	orr.w	r2, r3, #1
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	3301      	adds	r3, #1
 800a450:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a458:	d901      	bls.n	800a45e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a45a:	2303      	movs	r3, #3
 800a45c:	e006      	b.n	800a46c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	2b01      	cmp	r3, #1
 800a468:	d0f0      	beq.n	800a44c <USB_CoreReset+0x36>

  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a478:	b084      	sub	sp, #16
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b086      	sub	sp, #24
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a48a:	2300      	movs	r3, #0
 800a48c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a498:	461a      	mov	r2, r3
 800a49a:	2300      	movs	r3, #0
 800a49c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	639a      	str	r2, [r3, #56]	@ 0x38


  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d119      	bne.n	800a4f6 <USB_HostInit+0x7e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a4c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d10a      	bne.n	800a4e0 <USB_HostInit+0x68>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a4d8:	f043 0304 	orr.w	r3, r3, #4
 800a4dc:	6013      	str	r3, [r2, #0]
 800a4de:	e014      	b.n	800a50a <USB_HostInit+0x92>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a4ee:	f023 0304 	bic.w	r3, r3, #4
 800a4f2:	6013      	str	r3, [r2, #0]
 800a4f4:	e009      	b.n	800a50a <USB_HostInit+0x92>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a504:	f023 0304 	bic.w	r3, r3, #4
 800a508:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a50a:	2110      	movs	r1, #16
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7ff ff14 	bl	800a33a <USB_FlushTxFifo>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d001      	beq.n	800a51c <USB_HostInit+0xa4>
  {
    ret = HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff ff3e 	bl	800a39e <USB_FlushRxFifo>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <USB_HostInit+0xb4>
  {
    ret = HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a52c:	2300      	movs	r3, #0
 800a52e:	613b      	str	r3, [r7, #16]
 800a530:	e015      	b.n	800a55e <USB_HostInit+0xe6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	015a      	lsls	r2, r3, #5
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	4413      	add	r3, r2
 800a53a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a53e:	461a      	mov	r2, r3
 800a540:	f04f 33ff 	mov.w	r3, #4294967295
 800a544:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	015a      	lsls	r2, r3, #5
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	4413      	add	r3, r2
 800a54e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a552:	461a      	mov	r2, r3
 800a554:	2300      	movs	r3, #0
 800a556:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	3301      	adds	r3, #1
 800a55c:	613b      	str	r3, [r7, #16]
 800a55e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a562:	461a      	mov	r2, r3
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	4293      	cmp	r3, r2
 800a568:	d3e3      	bcc.n	800a532 <USB_HostInit+0xba>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f04f 32ff 	mov.w	r2, #4294967295
 800a576:	615a      	str	r2, [r3, #20]
  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x200U;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a57e:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a0f      	ldr	r2, [pc, #60]	@ (800a5c0 <USB_HostInit+0x148>)
 800a584:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a0e      	ldr	r2, [pc, #56]	@ (800a5c4 <USB_HostInit+0x14c>)
 800a58a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a58e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a592:	2b00      	cmp	r3, #0
 800a594:	d105      	bne.n	800a5a2 <USB_HostInit+0x12a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	f043 0210 	orr.w	r2, r3, #16
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	699a      	ldr	r2, [r3, #24]
 800a5a6:	4b08      	ldr	r3, [pc, #32]	@ (800a5c8 <USB_HostInit+0x150>)
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a5ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3718      	adds	r7, #24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5ba:	b004      	add	sp, #16
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	01000200 	.word	0x01000200
 800a5c4:	00e00300 	.word	0x00e00300
 800a5c8:	a3200008 	.word	0xa3200008

0800a5cc <memset>:
 800a5cc:	4402      	add	r2, r0
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d100      	bne.n	800a5d6 <memset+0xa>
 800a5d4:	4770      	bx	lr
 800a5d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5da:	e7f9      	b.n	800a5d0 <memset+0x4>

0800a5dc <__libc_init_array>:
 800a5dc:	b570      	push	{r4, r5, r6, lr}
 800a5de:	4d0d      	ldr	r5, [pc, #52]	@ (800a614 <__libc_init_array+0x38>)
 800a5e0:	4c0d      	ldr	r4, [pc, #52]	@ (800a618 <__libc_init_array+0x3c>)
 800a5e2:	1b64      	subs	r4, r4, r5
 800a5e4:	10a4      	asrs	r4, r4, #2
 800a5e6:	2600      	movs	r6, #0
 800a5e8:	42a6      	cmp	r6, r4
 800a5ea:	d109      	bne.n	800a600 <__libc_init_array+0x24>
 800a5ec:	4d0b      	ldr	r5, [pc, #44]	@ (800a61c <__libc_init_array+0x40>)
 800a5ee:	4c0c      	ldr	r4, [pc, #48]	@ (800a620 <__libc_init_array+0x44>)
 800a5f0:	f000 f818 	bl	800a624 <_init>
 800a5f4:	1b64      	subs	r4, r4, r5
 800a5f6:	10a4      	asrs	r4, r4, #2
 800a5f8:	2600      	movs	r6, #0
 800a5fa:	42a6      	cmp	r6, r4
 800a5fc:	d105      	bne.n	800a60a <__libc_init_array+0x2e>
 800a5fe:	bd70      	pop	{r4, r5, r6, pc}
 800a600:	f855 3b04 	ldr.w	r3, [r5], #4
 800a604:	4798      	blx	r3
 800a606:	3601      	adds	r6, #1
 800a608:	e7ee      	b.n	800a5e8 <__libc_init_array+0xc>
 800a60a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a60e:	4798      	blx	r3
 800a610:	3601      	adds	r6, #1
 800a612:	e7f2      	b.n	800a5fa <__libc_init_array+0x1e>
 800a614:	0800a684 	.word	0x0800a684
 800a618:	0800a684 	.word	0x0800a684
 800a61c:	0800a684 	.word	0x0800a684
 800a620:	0800a688 	.word	0x0800a688

0800a624 <_init>:
 800a624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a626:	bf00      	nop
 800a628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a62a:	bc08      	pop	{r3}
 800a62c:	469e      	mov	lr, r3
 800a62e:	4770      	bx	lr

0800a630 <_fini>:
 800a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a632:	bf00      	nop
 800a634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a636:	bc08      	pop	{r3}
 800a638:	469e      	mov	lr, r3
 800a63a:	4770      	bx	lr


C5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000792c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007bf8  08007bf8  00008bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007c30  08007c30  00008c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007c38  08007c38  00008c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007c3c  08007c3c  00008c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007c40  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009d4  24000010  08007c50  00009010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240009e4  08007c50  000099e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b7b2  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003666  00000000  00000000  000247f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013f8  00000000  00000000  00027e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f7c  00000000  00000000  00029250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003520a  00000000  00000000  0002a1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e24a  00000000  00000000  0005f3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014ed86  00000000  00000000  0007d620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cc3a6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005448  00000000  00000000  001cc3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000052  00000000  00000000  001d1834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08007be0 	.word	0x08007be0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08007be0 	.word	0x08007be0

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08e      	sub	sp, #56	@ 0x38
 8000600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000612:	4b87      	ldr	r3, [pc, #540]	@ (8000830 <MX_GPIO_Init+0x234>)
 8000614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000618:	4a85      	ldr	r2, [pc, #532]	@ (8000830 <MX_GPIO_Init+0x234>)
 800061a:	f043 0310 	orr.w	r3, r3, #16
 800061e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000622:	4b83      	ldr	r3, [pc, #524]	@ (8000830 <MX_GPIO_Init+0x234>)
 8000624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000628:	f003 0310 	and.w	r3, r3, #16
 800062c:	623b      	str	r3, [r7, #32]
 800062e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000630:	4b7f      	ldr	r3, [pc, #508]	@ (8000830 <MX_GPIO_Init+0x234>)
 8000632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000636:	4a7e      	ldr	r2, [pc, #504]	@ (8000830 <MX_GPIO_Init+0x234>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000640:	4b7b      	ldr	r3, [pc, #492]	@ (8000830 <MX_GPIO_Init+0x234>)
 8000642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	61fb      	str	r3, [r7, #28]
 800064c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064e:	4b78      	ldr	r3, [pc, #480]	@ (8000830 <MX_GPIO_Init+0x234>)
 8000650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000654:	4a76      	ldr	r2, [pc, #472]	@ (8000830 <MX_GPIO_Init+0x234>)
 8000656:	f043 0320 	orr.w	r3, r3, #32
 800065a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800065e:	4b74      	ldr	r3, [pc, #464]	@ (8000830 <MX_GPIO_Init+0x234>)
 8000660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000664:	f003 0320 	and.w	r3, r3, #32
 8000668:	61bb      	str	r3, [r7, #24]
 800066a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066c:	4b70      	ldr	r3, [pc, #448]	@ (8000830 <MX_GPIO_Init+0x234>)
 800066e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000672:	4a6f      	ldr	r2, [pc, #444]	@ (8000830 <MX_GPIO_Init+0x234>)
 8000674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000678:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800067c:	4b6c      	ldr	r3, [pc, #432]	@ (8000830 <MX_GPIO_Init+0x234>)
 800067e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b69      	ldr	r3, [pc, #420]	@ (8000830 <MX_GPIO_Init+0x234>)
 800068c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000690:	4a67      	ldr	r2, [pc, #412]	@ (8000830 <MX_GPIO_Init+0x234>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800069a:	4b65      	ldr	r3, [pc, #404]	@ (8000830 <MX_GPIO_Init+0x234>)
 800069c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a8:	4b61      	ldr	r3, [pc, #388]	@ (8000830 <MX_GPIO_Init+0x234>)
 80006aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ae:	4a60      	ldr	r2, [pc, #384]	@ (8000830 <MX_GPIO_Init+0x234>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006b8:	4b5d      	ldr	r3, [pc, #372]	@ (8000830 <MX_GPIO_Init+0x234>)
 80006ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c6:	4b5a      	ldr	r3, [pc, #360]	@ (8000830 <MX_GPIO_Init+0x234>)
 80006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006cc:	4a58      	ldr	r2, [pc, #352]	@ (8000830 <MX_GPIO_Init+0x234>)
 80006ce:	f043 0308 	orr.w	r3, r3, #8
 80006d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d6:	4b56      	ldr	r3, [pc, #344]	@ (8000830 <MX_GPIO_Init+0x234>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006dc:	f003 0308 	and.w	r3, r3, #8
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006e4:	4b52      	ldr	r3, [pc, #328]	@ (8000830 <MX_GPIO_Init+0x234>)
 80006e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ea:	4a51      	ldr	r2, [pc, #324]	@ (8000830 <MX_GPIO_Init+0x234>)
 80006ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f4:	4b4e      	ldr	r3, [pc, #312]	@ (8000830 <MX_GPIO_Init+0x234>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SSD1331_DC_Pin|SSD1331_RES_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2118      	movs	r1, #24
 8000706:	484b      	ldr	r0, [pc, #300]	@ (8000834 <MX_GPIO_Init+0x238>)
 8000708:	f001 ff24 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSD1331_CS_Pin|VL53_EN_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 8000712:	4849      	ldr	r0, [pc, #292]	@ (8000838 <MX_GPIO_Init+0x23c>)
 8000714:	f001 ff1e 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ESP_REST_Pin|STM32_ESP_PIN1_Pin|STM32_ESP_PIN2_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	211c      	movs	r1, #28
 800071c:	4847      	ldr	r0, [pc, #284]	@ (800083c <MX_GPIO_Init+0x240>)
 800071e:	f001 ff19 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BME688_CS_GPIO_Port, BME688_CS_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000728:	4845      	ldr	r0, [pc, #276]	@ (8000840 <MX_GPIO_Init+0x244>)
 800072a:	f001 ff13 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM330_CS_GPIO_Port, ISM330_CS_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2101      	movs	r1, #1
 8000732:	4844      	ldr	r0, [pc, #272]	@ (8000844 <MX_GPIO_Init+0x248>)
 8000734:	f001 ff0e 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAM_CS_GPIO_Port, FRAM_CS_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800073e:	4842      	ldr	r0, [pc, #264]	@ (8000848 <MX_GPIO_Init+0x24c>)
 8000740:	f001 ff08 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SSD1331_DC_Pin|SSD1331_RES_Pin;
 8000744:	2318      	movs	r3, #24
 8000746:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000758:	4619      	mov	r1, r3
 800075a:	4836      	ldr	r0, [pc, #216]	@ (8000834 <MX_GPIO_Init+0x238>)
 800075c:	f001 fd52 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SSD1331_CS_Pin|VL53_EN_Pin;
 8000760:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8000764:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	4619      	mov	r1, r3
 8000778:	482f      	ldr	r0, [pc, #188]	@ (8000838 <MX_GPIO_Init+0x23c>)
 800077a:	f001 fd43 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ESP_REST_Pin|STM32_ESP_PIN1_Pin|STM32_ESP_PIN2_Pin;
 800077e:	231c      	movs	r3, #28
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000792:	4619      	mov	r1, r3
 8000794:	4829      	ldr	r0, [pc, #164]	@ (800083c <MX_GPIO_Init+0x240>)
 8000796:	f001 fd35 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BME688_CS_Pin;
 800079a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800079e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BME688_CS_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b0:	4619      	mov	r1, r3
 80007b2:	4823      	ldr	r0, [pc, #140]	@ (8000840 <MX_GPIO_Init+0x244>)
 80007b4:	f001 fd26 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LSM303_INT_MAG_Pin|LSM303_INT1_Pin|LSM303_INT2_Pin|ISM330_INT1_Pin
 80007b8:	f64c 0306 	movw	r3, #51206	@ 0xc806
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |ISM330_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007cc:	4619      	mov	r1, r3
 80007ce:	481d      	ldr	r0, [pc, #116]	@ (8000844 <MX_GPIO_Init+0x248>)
 80007d0:	f001 fd18 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VL53_INT_Pin;
 80007d4:	2380      	movs	r3, #128	@ 0x80
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VL53_INT_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e6:	4619      	mov	r1, r3
 80007e8:	4813      	ldr	r0, [pc, #76]	@ (8000838 <MX_GPIO_Init+0x23c>)
 80007ea:	f001 fd0b 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISM330_CS_Pin;
 80007ee:	2301      	movs	r3, #1
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ISM330_CS_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000802:	4619      	mov	r1, r3
 8000804:	480f      	ldr	r0, [pc, #60]	@ (8000844 <MX_GPIO_Init+0x248>)
 8000806:	f001 fcfd 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FRAM_CS_Pin;
 800080a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FRAM_CS_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000820:	4619      	mov	r1, r3
 8000822:	4809      	ldr	r0, [pc, #36]	@ (8000848 <MX_GPIO_Init+0x24c>)
 8000824:	f001 fcee 	bl	8002204 <HAL_GPIO_Init>

}
 8000828:	bf00      	nop
 800082a:	3738      	adds	r7, #56	@ 0x38
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	58024400 	.word	0x58024400
 8000834:	58021000 	.word	0x58021000
 8000838:	58020800 	.word	0x58020800
 800083c:	58020000 	.word	0x58020000
 8000840:	58020400 	.word	0x58020400
 8000844:	58020c00 	.word	0x58020c00
 8000848:	58021800 	.word	0x58021800

0800084c <MX_I2C3_Init>:
I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef hi2c4;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <MX_I2C3_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	@ (80008c4 <MX_I2C3_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x60404E72;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_I2C3_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	@ (80008c8 <MX_I2C3_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_I2C3_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <MX_I2C3_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_I2C3_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_I2C3_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_I2C3_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_I2C3_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_I2C3_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	@ (80008c0 <MX_I2C3_Init+0x74>)
 8000888:	f001 feda 	bl	8002640 <HAL_I2C_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 f9d1 	bl	8000c38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4809      	ldr	r0, [pc, #36]	@ (80008c0 <MX_I2C3_Init+0x74>)
 800089a:	f001 ff6d 	bl	8002778 <HAL_I2CEx_ConfigAnalogFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 f9c8 	bl	8000c38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_I2C3_Init+0x74>)
 80008ac:	f001 ffaf 	bl	800280e <HAL_I2CEx_ConfigDigitalFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 f9bf 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2400002c 	.word	0x2400002c
 80008c4:	40005c00 	.word	0x40005c00
 80008c8:	60404e72 	.word	0x60404e72

080008cc <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <MX_I2C4_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000944 <MX_I2C4_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <MX_I2C4_Init+0x74>)
 80008d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000948 <MX_I2C4_Init+0x7c>)
 80008da:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80008dc:	4b18      	ldr	r3, [pc, #96]	@ (8000940 <MX_I2C4_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <MX_I2C4_Init+0x74>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <MX_I2C4_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80008ee:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <MX_I2C4_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_I2C4_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_I2C4_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_I2C4_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000906:	480e      	ldr	r0, [pc, #56]	@ (8000940 <MX_I2C4_Init+0x74>)
 8000908:	f001 fe9a 	bl	8002640 <HAL_I2C_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000912:	f000 f991 	bl	8000c38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4809      	ldr	r0, [pc, #36]	@ (8000940 <MX_I2C4_Init+0x74>)
 800091a:	f001 ff2d 	bl	8002778 <HAL_I2CEx_ConfigAnalogFilter>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000924:	f000 f988 	bl	8000c38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_I2C4_Init+0x74>)
 800092c:	f001 ff6f 	bl	800280e <HAL_I2CEx_ConfigDigitalFilter>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 f97f 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	24000080 	.word	0x24000080
 8000944:	58001c00 	.word	0x58001c00
 8000948:	60404e72 	.word	0x60404e72

0800094c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b0bc      	sub	sp, #240	@ 0xf0
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000964:	f107 0320 	add.w	r3, r7, #32
 8000968:	22b8      	movs	r2, #184	@ 0xb8
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f007 f90b 	bl	8007b88 <memset>
  if(i2cHandle->Instance==I2C3)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a60      	ldr	r2, [pc, #384]	@ (8000af8 <HAL_I2C_MspInit+0x1ac>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d16c      	bne.n	8000a56 <HAL_I2C_MspInit+0x10a>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800097c:	f04f 0208 	mov.w	r2, #8
 8000980:	f04f 0300 	mov.w	r3, #0
 8000984:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800098e:	f107 0320 	add.w	r3, r7, #32
 8000992:	4618      	mov	r0, r3
 8000994:	f003 fdfe 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800099e:	f000 f94b 	bl	8000c38 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b56      	ldr	r3, [pc, #344]	@ (8000afc <HAL_I2C_MspInit+0x1b0>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	4a54      	ldr	r2, [pc, #336]	@ (8000afc <HAL_I2C_MspInit+0x1b0>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b2:	4b52      	ldr	r3, [pc, #328]	@ (8000afc <HAL_I2C_MspInit+0x1b0>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	61fb      	str	r3, [r7, #28]
 80009be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b4e      	ldr	r3, [pc, #312]	@ (8000afc <HAL_I2C_MspInit+0x1b0>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c6:	4a4d      	ldr	r2, [pc, #308]	@ (8000afc <HAL_I2C_MspInit+0x1b0>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d0:	4b4a      	ldr	r3, [pc, #296]	@ (8000afc <HAL_I2C_MspInit+0x1b0>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	61bb      	str	r3, [r7, #24]
 80009dc:	69bb      	ldr	r3, [r7, #24]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e6:	2312      	movs	r3, #18
 80009e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009f8:	2304      	movs	r3, #4
 80009fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fe:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a02:	4619      	mov	r1, r3
 8000a04:	483e      	ldr	r0, [pc, #248]	@ (8000b00 <HAL_I2C_MspInit+0x1b4>)
 8000a06:	f001 fbfd 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a12:	2312      	movs	r3, #18
 8000a14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a24:	2304      	movs	r3, #4
 8000a26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4834      	ldr	r0, [pc, #208]	@ (8000b04 <HAL_I2C_MspInit+0x1b8>)
 8000a32:	f001 fbe7 	bl	8002204 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a36:	4b31      	ldr	r3, [pc, #196]	@ (8000afc <HAL_I2C_MspInit+0x1b0>)
 8000a38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a3c:	4a2f      	ldr	r2, [pc, #188]	@ (8000afc <HAL_I2C_MspInit+0x1b0>)
 8000a3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000a42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a46:	4b2d      	ldr	r3, [pc, #180]	@ (8000afc <HAL_I2C_MspInit+0x1b0>)
 8000a48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000a54:	e04b      	b.n	8000aee <HAL_I2C_MspInit+0x1a2>
  else if(i2cHandle->Instance==I2C4)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a2b      	ldr	r2, [pc, #172]	@ (8000b08 <HAL_I2C_MspInit+0x1bc>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d146      	bne.n	8000aee <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000a60:	f04f 0210 	mov.w	r2, #16
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a72:	f107 0320 	add.w	r3, r7, #32
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 fd8c 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_I2C_MspInit+0x13a>
      Error_Handler();
 8000a82:	f000 f8d9 	bl	8000c38 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a86:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <HAL_I2C_MspInit+0x1b0>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000afc <HAL_I2C_MspInit+0x1b0>)
 8000a8e:	f043 0308 	orr.w	r3, r3, #8
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a96:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <HAL_I2C_MspInit+0x1b0>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9c:	f003 0308 	and.w	r3, r3, #8
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000aa4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000aa8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aac:	2312      	movs	r3, #18
 8000aae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4810      	ldr	r0, [pc, #64]	@ (8000b0c <HAL_I2C_MspInit+0x1c0>)
 8000acc:	f001 fb9a 	bl	8002204 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <HAL_I2C_MspInit+0x1b0>)
 8000ad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ad6:	4a09      	ldr	r2, [pc, #36]	@ (8000afc <HAL_I2C_MspInit+0x1b0>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000adc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_I2C_MspInit+0x1b0>)
 8000ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
}
 8000aee:	bf00      	nop
 8000af0:	37f0      	adds	r7, #240	@ 0xf0
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40005c00 	.word	0x40005c00
 8000afc:	58024400 	.word	0x58024400
 8000b00:	58020800 	.word	0x58020800
 8000b04:	58020000 	.word	0x58020000
 8000b08:	58001c00 	.word	0x58001c00
 8000b0c:	58020c00 	.word	0x58020c00

08000b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b14:	f001 f9b8 	bl	8001e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b18:	f000 f81e 	bl	8000b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1c:	f7ff fd6e 	bl	80005fc <MX_GPIO_Init>
  MX_I2C3_Init();
 8000b20:	f7ff fe94 	bl	800084c <MX_I2C3_Init>
  MX_OCTOSPI1_Init();
 8000b24:	f000 f88e 	bl	8000c44 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8000b28:	f000 f8ea 	bl	8000d00 <MX_OCTOSPI2_Init>
  MX_SPI1_Init();
 8000b2c:	f000 fad2 	bl	80010d4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b30:	f000 fb26 	bl	8001180 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000b34:	f000 fb7a 	bl	800122c <MX_SPI3_Init>
  MX_SPI4_Init();
 8000b38:	f000 fbce 	bl	80012d8 <MX_SPI4_Init>
  MX_UART4_Init();
 8000b3c:	f000 fe8c 	bl	8001858 <MX_UART4_Init>
  MX_USB_OTG_HS_HCD_Init();
 8000b40:	f001 f912 	bl	8001d68 <MX_USB_OTG_HS_HCD_Init>
  MX_UART5_Init();
 8000b44:	f000 fed4 	bl	80018f0 <MX_UART5_Init>
  MX_UART7_Init();
 8000b48:	f000 ff1e 	bl	8001988 <MX_UART7_Init>
  MX_USART1_UART_Init();
 8000b4c:	f000 ff68 	bl	8001a20 <MX_USART1_UART_Init>
  MX_I2C4_Init();
 8000b50:	f7ff febc 	bl	80008cc <MX_I2C4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <main+0x44>

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09c      	sub	sp, #112	@ 0x70
 8000b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b62:	224c      	movs	r2, #76	@ 0x4c
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f007 f80e 	bl	8007b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2220      	movs	r2, #32
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f007 f808 	bl	8007b88 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b78:	2004      	movs	r0, #4
 8000b7a:	f002 fd3b 	bl	80035f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b2c      	ldr	r3, [pc, #176]	@ (8000c34 <SystemClock_Config+0xdc>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	4a2b      	ldr	r2, [pc, #172]	@ (8000c34 <SystemClock_Config+0xdc>)
 8000b88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b8c:	6193      	str	r3, [r2, #24]
 8000b8e:	4b29      	ldr	r3, [pc, #164]	@ (8000c34 <SystemClock_Config+0xdc>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b9a:	bf00      	nop
 8000b9c:	4b25      	ldr	r3, [pc, #148]	@ (8000c34 <SystemClock_Config+0xdc>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ba8:	d1f8      	bne.n	8000b9c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000baa:	2321      	movs	r3, #33	@ 0x21
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000bc4:	232c      	movs	r3, #44	@ 0x2c
 8000bc6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000bcc:	2305      	movs	r3, #5
 8000bce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be4:	4618      	mov	r0, r3
 8000be6:	f002 fd6f 	bl	80036c8 <HAL_RCC_OscConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000bf0:	f000 f822 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf4:	233f      	movs	r3, #63	@ 0x3f
 8000bf6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c00:	2308      	movs	r3, #8
 8000c02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c04:	2340      	movs	r3, #64	@ 0x40
 8000c06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c08:	2340      	movs	r3, #64	@ 0x40
 8000c0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c12:	2340      	movs	r3, #64	@ 0x40
 8000c14:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2103      	movs	r1, #3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f003 f92e 	bl	8003e7c <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c26:	f000 f807 	bl	8000c38 <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3770      	adds	r7, #112	@ 0x70
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	58024800 	.word	0x58024800

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <Error_Handler+0x8>

08000c44 <MX_OCTOSPI1_Init>:
OSPI_HandleTypeDef hospi1;
OSPI_HandleTypeDef hospi2;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8000c5a:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000c5c:	4a27      	ldr	r2, [pc, #156]	@ (8000cfc <MX_OCTOSPI1_Init+0xb8>)
 8000c5e:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000c60:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c66:	4b24      	ldr	r3, [pc, #144]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000c6c:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000c72:	4b21      	ldr	r3, [pc, #132]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000c74:	2220      	movs	r2, #32
 8000c76:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000c78:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000c84:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000c96:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000ca8:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000caa:	2208      	movs	r2, #8
 8000cac:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8000cae:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000cba:	480f      	ldr	r0, [pc, #60]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000cbc:	f001 fdf4 	bl	80028a8 <HAL_OSPI_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_OCTOSPI1_Init+0x86>
  {
    Error_Handler();
 8000cc6:	f7ff ffb7 	bl	8000c38 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000cd2:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000cd6:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cd8:	463b      	mov	r3, r7
 8000cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <MX_OCTOSPI1_Init+0xb4>)
 8000ce2:	f001 fead 	bl	8002a40 <HAL_OSPIM_Config>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_OCTOSPI1_Init+0xac>
  {
    Error_Handler();
 8000cec:	f7ff ffa4 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	240000d4 	.word	0x240000d4
 8000cfc:	52005000 	.word	0x52005000

08000d00 <MX_OCTOSPI2_Init>:
/* OCTOSPI2 init function */
void MX_OCTOSPI2_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  hospi2.Instance = OCTOSPI2;
 8000d16:	4b27      	ldr	r3, [pc, #156]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d18:	4a27      	ldr	r2, [pc, #156]	@ (8000db8 <MX_OCTOSPI2_Init+0xb8>)
 8000d1a:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8000d1c:	4b25      	ldr	r3, [pc, #148]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000d22:	4b24      	ldr	r3, [pc, #144]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000d28:	4b22      	ldr	r3, [pc, #136]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d30:	2220      	movs	r2, #32
 8000d32:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000d40:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000d46:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 8000d4c:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000d52:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d66:	2208      	movs	r2, #8
 8000d68:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 8000d6a:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 8000d70:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000d76:	480f      	ldr	r0, [pc, #60]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d78:	f001 fd96 	bl	80028a8 <HAL_OSPI_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_OCTOSPI2_Init+0x86>
  {
    Error_Handler();
 8000d82:	f7ff ff59 	bl	8000c38 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8000d86:	2302      	movs	r3, #2
 8000d88:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 2;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <MX_OCTOSPI2_Init+0xbc>)
 8000d90:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d92:	463b      	mov	r3, r7
 8000d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	@ (8000db4 <MX_OCTOSPI2_Init+0xb4>)
 8000d9c:	f001 fe50 	bl	8002a40 <HAL_OSPIM_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_OCTOSPI2_Init+0xaa>
  {
    Error_Handler();
 8000da6:	f7ff ff47 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	24000130 	.word	0x24000130
 8000db8:	5200a000 	.word	0x5200a000
 8000dbc:	00010002 	.word	0x00010002

08000dc0 <HAL_OSPI_MspInit>:

static uint32_t HAL_RCC_OCTOSPIM_CLK_ENABLED=0;

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b0c0      	sub	sp, #256	@ 0x100
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ddc:	22b8      	movs	r2, #184	@ 0xb8
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f006 fed1 	bl	8007b88 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4ab1      	ldr	r2, [pc, #708]	@ (80010b0 <HAL_OSPI_MspInit+0x2f0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	f040 80d1 	bne.w	8000f94 <HAL_OSPI_MspInit+0x1d4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000df2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e06:	4618      	mov	r0, r3
 8000e08:	f003 fbc4 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8000e12:	f7ff ff11 	bl	8000c38 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000e16:	4ba7      	ldr	r3, [pc, #668]	@ (80010b4 <HAL_OSPI_MspInit+0x2f4>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	4aa5      	ldr	r2, [pc, #660]	@ (80010b4 <HAL_OSPI_MspInit+0x2f4>)
 8000e1e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000e20:	4ba4      	ldr	r3, [pc, #656]	@ (80010b4 <HAL_OSPI_MspInit+0x2f4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d10e      	bne.n	8000e46 <HAL_OSPI_MspInit+0x86>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000e28:	4ba3      	ldr	r3, [pc, #652]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000e2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e2e:	4aa2      	ldr	r2, [pc, #648]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000e30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e34:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000e38:	4b9f      	ldr	r3, [pc, #636]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000e3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000e46:	4b9c      	ldr	r3, [pc, #624]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000e48:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e4c:	4a9a      	ldr	r2, [pc, #616]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000e4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e52:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000e56:	4b98      	ldr	r3, [pc, #608]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000e58:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b94      	ldr	r3, [pc, #592]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6a:	4a93      	ldr	r2, [pc, #588]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e74:	4b90      	ldr	r3, [pc, #576]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	4b8d      	ldr	r3, [pc, #564]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e88:	4a8b      	ldr	r2, [pc, #556]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000e8a:	f043 0302 	orr.w	r3, r3, #2
 8000e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e92:	4b89      	ldr	r3, [pc, #548]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	623b      	str	r3, [r7, #32]
 8000e9e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea0:	4b85      	ldr	r3, [pc, #532]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	4a84      	ldr	r2, [pc, #528]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000ea8:	f043 0310 	orr.w	r3, r3, #16
 8000eac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb0:	4b81      	ldr	r3, [pc, #516]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	61fb      	str	r3, [r7, #28]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
    PB0     ------> OCTOSPIM_P1_IO1
    PB1     ------> OCTOSPIM_P1_IO0
    PB2     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ebe:	2340      	movs	r3, #64	@ 0x40
 8000ec0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPIM_P1;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4876      	ldr	r0, [pc, #472]	@ (80010bc <HAL_OSPI_MspInit+0x2fc>)
 8000ee4:	f001 f98e 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ee8:	2380      	movs	r3, #128	@ 0x80
 8000eea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000f00:	230a      	movs	r3, #10
 8000f02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	486b      	ldr	r0, [pc, #428]	@ (80010bc <HAL_OSPI_MspInit+0x2fc>)
 8000f0e:	f001 f979 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f12:	2303      	movs	r3, #3
 8000f14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000f34:	4619      	mov	r1, r3
 8000f36:	4862      	ldr	r0, [pc, #392]	@ (80010c0 <HAL_OSPI_MspInit+0x300>)
 8000f38:	f001 f964 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000f54:	2309      	movs	r3, #9
 8000f56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4857      	ldr	r0, [pc, #348]	@ (80010c0 <HAL_OSPI_MspInit+0x300>)
 8000f62:	f001 f94f 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8000f80:	230b      	movs	r3, #11
 8000f82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f86:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	484d      	ldr	r0, [pc, #308]	@ (80010c4 <HAL_OSPI_MspInit+0x304>)
 8000f8e:	f001 f939 	bl	8002204 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }
}
 8000f92:	e087      	b.n	80010a4 <HAL_OSPI_MspInit+0x2e4>
  else if(ospiHandle->Instance==OCTOSPI2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a4b      	ldr	r2, [pc, #300]	@ (80010c8 <HAL_OSPI_MspInit+0x308>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	f040 8082 	bne.w	80010a4 <HAL_OSPI_MspInit+0x2e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000fa0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 faed 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_OSPI_MspInit+0x204>
      Error_Handler();
 8000fc0:	f7ff fe3a 	bl	8000c38 <Error_Handler>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80010b4 <HAL_OSPI_MspInit+0x2f4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a3a      	ldr	r2, [pc, #232]	@ (80010b4 <HAL_OSPI_MspInit+0x2f4>)
 8000fcc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000fce:	4b39      	ldr	r3, [pc, #228]	@ (80010b4 <HAL_OSPI_MspInit+0x2f4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d10e      	bne.n	8000ff4 <HAL_OSPI_MspInit+0x234>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000fd6:	4b38      	ldr	r3, [pc, #224]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000fd8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fdc:	4a36      	ldr	r2, [pc, #216]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000fde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fe2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000fe6:	4b34      	ldr	r3, [pc, #208]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000fe8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff0:	61bb      	str	r3, [r7, #24]
 8000ff2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8000ff4:	4b30      	ldr	r3, [pc, #192]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000ff6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8000ffc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001000:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001004:	4b2c      	ldr	r3, [pc, #176]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8001006:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800100a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001012:	4b29      	ldr	r3, [pc, #164]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001018:	4a27      	ldr	r2, [pc, #156]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 800101a:	f043 0320 	orr.w	r3, r3, #32
 800101e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001022:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001028:	f003 0320 	and.w	r3, r3, #32
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001030:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001036:	4a20      	ldr	r2, [pc, #128]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8001038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800103c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001040:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <HAL_OSPI_MspInit+0x2f8>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800104e:	231f      	movs	r3, #31
 8001050:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001066:	2309      	movs	r3, #9
 8001068:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800106c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001070:	4619      	mov	r1, r3
 8001072:	4816      	ldr	r0, [pc, #88]	@ (80010cc <HAL_OSPI_MspInit+0x30c>)
 8001074:	f001 f8c6 	bl	8002204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001078:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800107c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8001092:	2303      	movs	r3, #3
 8001094:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001098:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800109c:	4619      	mov	r1, r3
 800109e:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <HAL_OSPI_MspInit+0x310>)
 80010a0:	f001 f8b0 	bl	8002204 <HAL_GPIO_Init>
}
 80010a4:	bf00      	nop
 80010a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	52005000 	.word	0x52005000
 80010b4:	2400018c 	.word	0x2400018c
 80010b8:	58024400 	.word	0x58024400
 80010bc:	58020000 	.word	0x58020000
 80010c0:	58020400 	.word	0x58020400
 80010c4:	58021000 	.word	0x58021000
 80010c8:	5200a000 	.word	0x5200a000
 80010cc:	58021400 	.word	0x58021400
 80010d0:	58021800 	.word	0x58021800

080010d4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010d8:	4b27      	ldr	r3, [pc, #156]	@ (8001178 <MX_SPI1_Init+0xa4>)
 80010da:	4a28      	ldr	r2, [pc, #160]	@ (800117c <MX_SPI1_Init+0xa8>)
 80010dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010de:	4b26      	ldr	r3, [pc, #152]	@ (8001178 <MX_SPI1_Init+0xa4>)
 80010e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010e6:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <MX_SPI1_Init+0xa4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80010ec:	4b22      	ldr	r3, [pc, #136]	@ (8001178 <MX_SPI1_Init+0xa4>)
 80010ee:	2203      	movs	r2, #3
 80010f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f2:	4b21      	ldr	r3, [pc, #132]	@ (8001178 <MX_SPI1_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001178 <MX_SPI1_Init+0xa4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001178 <MX_SPI1_Init+0xa4>)
 8001100:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001104:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001106:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <MX_SPI1_Init+0xa4>)
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800110c:	4b1a      	ldr	r3, [pc, #104]	@ (8001178 <MX_SPI1_Init+0xa4>)
 800110e:	2200      	movs	r2, #0
 8001110:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001112:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <MX_SPI1_Init+0xa4>)
 8001114:	2200      	movs	r2, #0
 8001116:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001118:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <MX_SPI1_Init+0xa4>)
 800111a:	2200      	movs	r2, #0
 800111c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800111e:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <MX_SPI1_Init+0xa4>)
 8001120:	2200      	movs	r2, #0
 8001122:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001124:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <MX_SPI1_Init+0xa4>)
 8001126:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800112a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <MX_SPI1_Init+0xa4>)
 800112e:	2200      	movs	r2, #0
 8001130:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_SPI1_Init+0xa4>)
 8001134:	2200      	movs	r2, #0
 8001136:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_SPI1_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <MX_SPI1_Init+0xa4>)
 8001140:	2200      	movs	r2, #0
 8001142:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <MX_SPI1_Init+0xa4>)
 8001146:	2200      	movs	r2, #0
 8001148:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <MX_SPI1_Init+0xa4>)
 800114c:	2200      	movs	r2, #0
 800114e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_SPI1_Init+0xa4>)
 8001152:	2200      	movs	r2, #0
 8001154:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <MX_SPI1_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <MX_SPI1_Init+0xa4>)
 800115e:	2200      	movs	r2, #0
 8001160:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_SPI1_Init+0xa4>)
 8001164:	f004 ffd8 	bl	8006118 <HAL_SPI_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800116e:	f7ff fd63 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	24000190 	.word	0x24000190
 800117c:	40013000 	.word	0x40013000

08001180 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001184:	4b27      	ldr	r3, [pc, #156]	@ (8001224 <MX_SPI2_Init+0xa4>)
 8001186:	4a28      	ldr	r2, [pc, #160]	@ (8001228 <MX_SPI2_Init+0xa8>)
 8001188:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800118a:	4b26      	ldr	r3, [pc, #152]	@ (8001224 <MX_SPI2_Init+0xa4>)
 800118c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001190:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001192:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <MX_SPI2_Init+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001198:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <MX_SPI2_Init+0xa4>)
 800119a:	2203      	movs	r2, #3
 800119c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800119e:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <MX_SPI2_Init+0xa4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <MX_SPI2_Init+0xa4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <MX_SPI2_Init+0xa4>)
 80011ac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <MX_SPI2_Init+0xa4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <MX_SPI2_Init+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011be:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <MX_SPI2_Init+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c4:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <MX_SPI2_Init+0xa4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <MX_SPI2_Init+0xa4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011d0:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <MX_SPI2_Init+0xa4>)
 80011d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <MX_SPI2_Init+0xa4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <MX_SPI2_Init+0xa4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <MX_SPI2_Init+0xa4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <MX_SPI2_Init+0xa4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <MX_SPI2_Init+0xa4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <MX_SPI2_Init+0xa4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011fc:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <MX_SPI2_Init+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <MX_SPI2_Init+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <MX_SPI2_Init+0xa4>)
 800120a:	2200      	movs	r2, #0
 800120c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_SPI2_Init+0xa4>)
 8001210:	f004 ff82 	bl	8006118 <HAL_SPI_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800121a:	f7ff fd0d 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	24000218 	.word	0x24000218
 8001228:	40003800 	.word	0x40003800

0800122c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001230:	4b27      	ldr	r3, [pc, #156]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 8001232:	4a28      	ldr	r2, [pc, #160]	@ (80012d4 <MX_SPI3_Init+0xa8>)
 8001234:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001236:	4b26      	ldr	r3, [pc, #152]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 8001238:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800123c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001244:	4b22      	ldr	r3, [pc, #136]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 8001246:	2203      	movs	r2, #3
 8001248:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124a:	4b21      	ldr	r3, [pc, #132]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001250:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001256:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 8001258:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800125c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800125e:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 8001260:	2200      	movs	r2, #0
 8001262:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001264:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800126a:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 800126c:	2200      	movs	r2, #0
 800126e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001270:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 8001272:	2200      	movs	r2, #0
 8001274:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001276:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 8001278:	2200      	movs	r2, #0
 800127a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800127c:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 800127e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001282:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001284:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 8001286:	2200      	movs	r2, #0
 8001288:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 800128c:	2200      	movs	r2, #0
 800128e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001290:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 8001292:	2200      	movs	r2, #0
 8001294:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 8001298:	2200      	movs	r2, #0
 800129a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012a8:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_SPI3_Init+0xa4>)
 80012bc:	f004 ff2c 	bl	8006118 <HAL_SPI_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80012c6:	f7ff fcb7 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	240002a0 	.word	0x240002a0
 80012d4:	40003c00 	.word	0x40003c00

080012d8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80012dc:	4b27      	ldr	r3, [pc, #156]	@ (800137c <MX_SPI4_Init+0xa4>)
 80012de:	4a28      	ldr	r2, [pc, #160]	@ (8001380 <MX_SPI4_Init+0xa8>)
 80012e0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80012e2:	4b26      	ldr	r3, [pc, #152]	@ (800137c <MX_SPI4_Init+0xa4>)
 80012e4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012e8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80012ea:	4b24      	ldr	r3, [pc, #144]	@ (800137c <MX_SPI4_Init+0xa4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80012f0:	4b22      	ldr	r3, [pc, #136]	@ (800137c <MX_SPI4_Init+0xa4>)
 80012f2:	2203      	movs	r2, #3
 80012f4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f6:	4b21      	ldr	r3, [pc, #132]	@ (800137c <MX_SPI4_Init+0xa4>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012fc:	4b1f      	ldr	r3, [pc, #124]	@ (800137c <MX_SPI4_Init+0xa4>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001302:	4b1e      	ldr	r3, [pc, #120]	@ (800137c <MX_SPI4_Init+0xa4>)
 8001304:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001308:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800130a:	4b1c      	ldr	r3, [pc, #112]	@ (800137c <MX_SPI4_Init+0xa4>)
 800130c:	2200      	movs	r2, #0
 800130e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001310:	4b1a      	ldr	r3, [pc, #104]	@ (800137c <MX_SPI4_Init+0xa4>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001316:	4b19      	ldr	r3, [pc, #100]	@ (800137c <MX_SPI4_Init+0xa4>)
 8001318:	2200      	movs	r2, #0
 800131a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800131c:	4b17      	ldr	r3, [pc, #92]	@ (800137c <MX_SPI4_Init+0xa4>)
 800131e:	2200      	movs	r2, #0
 8001320:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001322:	4b16      	ldr	r3, [pc, #88]	@ (800137c <MX_SPI4_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <MX_SPI4_Init+0xa4>)
 800132a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800132e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <MX_SPI4_Init+0xa4>)
 8001332:	2200      	movs	r2, #0
 8001334:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_SPI4_Init+0xa4>)
 8001338:	2200      	movs	r2, #0
 800133a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800133c:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <MX_SPI4_Init+0xa4>)
 800133e:	2200      	movs	r2, #0
 8001340:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MX_SPI4_Init+0xa4>)
 8001344:	2200      	movs	r2, #0
 8001346:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001348:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <MX_SPI4_Init+0xa4>)
 800134a:	2200      	movs	r2, #0
 800134c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800134e:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <MX_SPI4_Init+0xa4>)
 8001350:	2200      	movs	r2, #0
 8001352:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001354:	4b09      	ldr	r3, [pc, #36]	@ (800137c <MX_SPI4_Init+0xa4>)
 8001356:	2200      	movs	r2, #0
 8001358:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800135a:	4b08      	ldr	r3, [pc, #32]	@ (800137c <MX_SPI4_Init+0xa4>)
 800135c:	2200      	movs	r2, #0
 800135e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001360:	4b06      	ldr	r3, [pc, #24]	@ (800137c <MX_SPI4_Init+0xa4>)
 8001362:	2200      	movs	r2, #0
 8001364:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001366:	4805      	ldr	r0, [pc, #20]	@ (800137c <MX_SPI4_Init+0xa4>)
 8001368:	f004 fed6 	bl	8006118 <HAL_SPI_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001372:	f7ff fc61 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	24000328 	.word	0x24000328
 8001380:	40013400 	.word	0x40013400

08001384 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b0c0      	sub	sp, #256	@ 0x100
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800139c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013a0:	22b8      	movs	r2, #184	@ 0xb8
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f006 fbef 	bl	8007b88 <memset>
  if(spiHandle->Instance==SPI1)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4aac      	ldr	r2, [pc, #688]	@ (8001660 <HAL_SPI_MspInit+0x2dc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d16b      	bne.n	800148c <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80013b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 f8e2 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80013d6:	f7ff fc2f 	bl	8000c38 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013da:	4ba2      	ldr	r3, [pc, #648]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 80013dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013e0:	4aa0      	ldr	r2, [pc, #640]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 80013e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013ea:	4b9e      	ldr	r3, [pc, #632]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 80013ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f8:	4b9a      	ldr	r3, [pc, #616]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 80013fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fe:	4a99      	ldr	r2, [pc, #612]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001408:	4b96      	ldr	r3, [pc, #600]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 800140a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001416:	4b93      	ldr	r3, [pc, #588]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 8001418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141c:	4a91      	ldr	r2, [pc, #580]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 800141e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001422:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001426:	4b8f      	ldr	r3, [pc, #572]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 8001428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800142c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
 8001432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800144c:	2305      	movs	r3, #5
 800144e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001452:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001456:	4619      	mov	r1, r3
 8001458:	4883      	ldr	r0, [pc, #524]	@ (8001668 <HAL_SPI_MspInit+0x2e4>)
 800145a:	f000 fed3 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800145e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001462:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001478:	2305      	movs	r3, #5
 800147a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800147e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001482:	4619      	mov	r1, r3
 8001484:	4879      	ldr	r0, [pc, #484]	@ (800166c <HAL_SPI_MspInit+0x2e8>)
 8001486:	f000 febd 	bl	8002204 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800148a:	e0e4      	b.n	8001656 <HAL_SPI_MspInit+0x2d2>
  else if(spiHandle->Instance==SPI2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a77      	ldr	r2, [pc, #476]	@ (8001670 <HAL_SPI_MspInit+0x2ec>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d147      	bne.n	8001526 <HAL_SPI_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001496:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014ac:	4618      	mov	r0, r3
 80014ae:	f003 f871 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_SPI_MspInit+0x138>
      Error_Handler();
 80014b8:	f7ff fbbe 	bl	8000c38 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014bc:	4b69      	ldr	r3, [pc, #420]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 80014be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014c2:	4a68      	ldr	r2, [pc, #416]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 80014c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014cc:	4b65      	ldr	r3, [pc, #404]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 80014ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d6:	623b      	str	r3, [r7, #32]
 80014d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	4b62      	ldr	r3, [pc, #392]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e0:	4a60      	ldr	r2, [pc, #384]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 80014e2:	f043 0302 	orr.w	r3, r3, #2
 80014e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ea:	4b5e      	ldr	r3, [pc, #376]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80014f8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80014fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001512:	2305      	movs	r3, #5
 8001514:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800151c:	4619      	mov	r1, r3
 800151e:	4855      	ldr	r0, [pc, #340]	@ (8001674 <HAL_SPI_MspInit+0x2f0>)
 8001520:	f000 fe70 	bl	8002204 <HAL_GPIO_Init>
}
 8001524:	e097      	b.n	8001656 <HAL_SPI_MspInit+0x2d2>
  else if(spiHandle->Instance==SPI3)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a53      	ldr	r2, [pc, #332]	@ (8001678 <HAL_SPI_MspInit+0x2f4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d147      	bne.n	80015c0 <HAL_SPI_MspInit+0x23c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001530:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001542:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001546:	4618      	mov	r0, r3
 8001548:	f003 f824 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_SPI_MspInit+0x1d2>
      Error_Handler();
 8001552:	f7ff fb71 	bl	8000c38 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001556:	4b43      	ldr	r3, [pc, #268]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 8001558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800155c:	4a41      	ldr	r2, [pc, #260]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 800155e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001562:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001566:	4b3f      	ldr	r3, [pc, #252]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 8001568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800156c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001574:	4b3b      	ldr	r3, [pc, #236]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157a:	4a3a      	ldr	r2, [pc, #232]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001584:	4b37      	ldr	r3, [pc, #220]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001592:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001596:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015ac:	2306      	movs	r3, #6
 80015ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80015b6:	4619      	mov	r1, r3
 80015b8:	4830      	ldr	r0, [pc, #192]	@ (800167c <HAL_SPI_MspInit+0x2f8>)
 80015ba:	f000 fe23 	bl	8002204 <HAL_GPIO_Init>
}
 80015be:	e04a      	b.n	8001656 <HAL_SPI_MspInit+0x2d2>
  else if(spiHandle->Instance==SPI4)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001680 <HAL_SPI_MspInit+0x2fc>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d145      	bne.n	8001656 <HAL_SPI_MspInit+0x2d2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80015ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015e0:	4618      	mov	r0, r3
 80015e2:	f002 ffd7 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_SPI_MspInit+0x26c>
      Error_Handler();
 80015ec:	f7ff fb24 	bl	8000c38 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80015f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 80015f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 80015f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001600:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 8001602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001614:	4a13      	ldr	r2, [pc, #76]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 8001616:	f043 0310 	orr.w	r3, r3, #16
 800161a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800161e:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <HAL_SPI_MspInit+0x2e0>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800162c:	2364      	movs	r3, #100	@ 0x64
 800162e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001644:	2305      	movs	r3, #5
 8001646:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800164e:	4619      	mov	r1, r3
 8001650:	480c      	ldr	r0, [pc, #48]	@ (8001684 <HAL_SPI_MspInit+0x300>)
 8001652:	f000 fdd7 	bl	8002204 <HAL_GPIO_Init>
}
 8001656:	bf00      	nop
 8001658:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40013000 	.word	0x40013000
 8001664:	58024400 	.word	0x58024400
 8001668:	58020c00 	.word	0x58020c00
 800166c:	58021800 	.word	0x58021800
 8001670:	40003800 	.word	0x40003800
 8001674:	58020400 	.word	0x58020400
 8001678:	40003c00 	.word	0x40003c00
 800167c:	58020800 	.word	0x58020800
 8001680:	40013400 	.word	0x40013400
 8001684:	58021000 	.word	0x58021000

08001688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <HAL_MspInit+0x54>)
 8001690:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001694:	4a11      	ldr	r2, [pc, #68]	@ (80016dc <HAL_MspInit+0x54>)
 8001696:	f043 0302 	orr.w	r3, r3, #2
 800169a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800169e:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <HAL_MspInit+0x54>)
 80016a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <HAL_MspInit+0x54>)
 80016ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <HAL_MspInit+0x54>)
 80016b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016bc:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <HAL_MspInit+0x54>)
 80016be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80016ca:	f000 fca7 	bl	800201c <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80016ce:	2002      	movs	r0, #2
 80016d0:	f000 fc90 	bl	8001ff4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	58024400 	.word	0x58024400

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <NMI_Handler+0x4>

080016e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <MemManage_Handler+0x4>

080016f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <UsageFault_Handler+0x4>

08001708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001736:	f000 fc19 	bl	8001f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001746:	4b3c      	ldr	r3, [pc, #240]	@ (8001838 <SystemInit+0xf8>)
 8001748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800174c:	4a3a      	ldr	r2, [pc, #232]	@ (8001838 <SystemInit+0xf8>)
 800174e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001752:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001756:	4b39      	ldr	r3, [pc, #228]	@ (800183c <SystemInit+0xfc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	2b06      	cmp	r3, #6
 8001760:	d807      	bhi.n	8001772 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001762:	4b36      	ldr	r3, [pc, #216]	@ (800183c <SystemInit+0xfc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 030f 	bic.w	r3, r3, #15
 800176a:	4a34      	ldr	r2, [pc, #208]	@ (800183c <SystemInit+0xfc>)
 800176c:	f043 0307 	orr.w	r3, r3, #7
 8001770:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001772:	4b33      	ldr	r3, [pc, #204]	@ (8001840 <SystemInit+0x100>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a32      	ldr	r2, [pc, #200]	@ (8001840 <SystemInit+0x100>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800177e:	4b30      	ldr	r3, [pc, #192]	@ (8001840 <SystemInit+0x100>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001784:	4b2e      	ldr	r3, [pc, #184]	@ (8001840 <SystemInit+0x100>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	492d      	ldr	r1, [pc, #180]	@ (8001840 <SystemInit+0x100>)
 800178a:	4b2e      	ldr	r3, [pc, #184]	@ (8001844 <SystemInit+0x104>)
 800178c:	4013      	ands	r3, r2
 800178e:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001790:	4b2a      	ldr	r3, [pc, #168]	@ (800183c <SystemInit+0xfc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d007      	beq.n	80017ac <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800179c:	4b27      	ldr	r3, [pc, #156]	@ (800183c <SystemInit+0xfc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f023 030f 	bic.w	r3, r3, #15
 80017a4:	4a25      	ldr	r2, [pc, #148]	@ (800183c <SystemInit+0xfc>)
 80017a6:	f043 0307 	orr.w	r3, r3, #7
 80017aa:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017ac:	4b24      	ldr	r3, [pc, #144]	@ (8001840 <SystemInit+0x100>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017b2:	4b23      	ldr	r3, [pc, #140]	@ (8001840 <SystemInit+0x100>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017b8:	4b21      	ldr	r3, [pc, #132]	@ (8001840 <SystemInit+0x100>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017be:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <SystemInit+0x100>)
 80017c0:	4a21      	ldr	r2, [pc, #132]	@ (8001848 <SystemInit+0x108>)
 80017c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <SystemInit+0x100>)
 80017c6:	4a21      	ldr	r2, [pc, #132]	@ (800184c <SystemInit+0x10c>)
 80017c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <SystemInit+0x100>)
 80017cc:	4a20      	ldr	r2, [pc, #128]	@ (8001850 <SystemInit+0x110>)
 80017ce:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <SystemInit+0x100>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <SystemInit+0x100>)
 80017d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001850 <SystemInit+0x110>)
 80017da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017dc:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <SystemInit+0x100>)
 80017de:	2200      	movs	r2, #0
 80017e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017e2:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <SystemInit+0x100>)
 80017e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001850 <SystemInit+0x110>)
 80017e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017e8:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <SystemInit+0x100>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <SystemInit+0x100>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a13      	ldr	r2, [pc, #76]	@ (8001840 <SystemInit+0x100>)
 80017f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <SystemInit+0x100>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001800:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <SystemInit+0x100>)
 8001802:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001806:	4a0e      	ldr	r2, [pc, #56]	@ (8001840 <SystemInit+0x100>)
 8001808:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800180c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <SystemInit+0x100>)
 8001812:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001816:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001818:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <SystemInit+0x114>)
 800181c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001820:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 8001822:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <SystemInit+0xf8>)
 8001824:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001828:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00
 800183c:	52002000 	.word	0x52002000
 8001840:	58024400 	.word	0x58024400
 8001844:	eaf6ed7f 	.word	0xeaf6ed7f
 8001848:	02020200 	.word	0x02020200
 800184c:	01ff0000 	.word	0x01ff0000
 8001850:	01010280 	.word	0x01010280
 8001854:	52004000 	.word	0x52004000

08001858 <MX_UART4_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800185c:	4b22      	ldr	r3, [pc, #136]	@ (80018e8 <MX_UART4_Init+0x90>)
 800185e:	4a23      	ldr	r2, [pc, #140]	@ (80018ec <MX_UART4_Init+0x94>)
 8001860:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001862:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <MX_UART4_Init+0x90>)
 8001864:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001868:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800186a:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <MX_UART4_Init+0x90>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001870:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <MX_UART4_Init+0x90>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001876:	4b1c      	ldr	r3, [pc, #112]	@ (80018e8 <MX_UART4_Init+0x90>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800187c:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <MX_UART4_Init+0x90>)
 800187e:	220c      	movs	r2, #12
 8001880:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001882:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <MX_UART4_Init+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	4b17      	ldr	r3, [pc, #92]	@ (80018e8 <MX_UART4_Init+0x90>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188e:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <MX_UART4_Init+0x90>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001894:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <MX_UART4_Init+0x90>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800189a:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <MX_UART4_Init+0x90>)
 800189c:	2200      	movs	r2, #0
 800189e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80018a0:	4811      	ldr	r0, [pc, #68]	@ (80018e8 <MX_UART4_Init+0x90>)
 80018a2:	f004 fd78 	bl	8006396 <HAL_UART_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80018ac:	f7ff f9c4 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018b0:	2100      	movs	r1, #0
 80018b2:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <MX_UART4_Init+0x90>)
 80018b4:	f005 fe85 	bl	80075c2 <HAL_UARTEx_SetTxFifoThreshold>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80018be:	f7ff f9bb 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c2:	2100      	movs	r1, #0
 80018c4:	4808      	ldr	r0, [pc, #32]	@ (80018e8 <MX_UART4_Init+0x90>)
 80018c6:	f005 feba 	bl	800763e <HAL_UARTEx_SetRxFifoThreshold>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80018d0:	f7ff f9b2 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80018d4:	4804      	ldr	r0, [pc, #16]	@ (80018e8 <MX_UART4_Init+0x90>)
 80018d6:	f005 fe3b 	bl	8007550 <HAL_UARTEx_DisableFifoMode>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80018e0:	f7ff f9aa 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	240003b0 	.word	0x240003b0
 80018ec:	40004c00 	.word	0x40004c00

080018f0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80018f4:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <MX_UART5_Init+0x90>)
 80018f6:	4a23      	ldr	r2, [pc, #140]	@ (8001984 <MX_UART5_Init+0x94>)
 80018f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80018fa:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <MX_UART5_Init+0x90>)
 80018fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001900:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001902:	4b1f      	ldr	r3, [pc, #124]	@ (8001980 <MX_UART5_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001908:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <MX_UART5_Init+0x90>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800190e:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <MX_UART5_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001914:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <MX_UART5_Init+0x90>)
 8001916:	220c      	movs	r2, #12
 8001918:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191a:	4b19      	ldr	r3, [pc, #100]	@ (8001980 <MX_UART5_Init+0x90>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001920:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <MX_UART5_Init+0x90>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001926:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <MX_UART5_Init+0x90>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800192c:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <MX_UART5_Init+0x90>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001932:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <MX_UART5_Init+0x90>)
 8001934:	2200      	movs	r2, #0
 8001936:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001938:	4811      	ldr	r0, [pc, #68]	@ (8001980 <MX_UART5_Init+0x90>)
 800193a:	f004 fd2c 	bl	8006396 <HAL_UART_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001944:	f7ff f978 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001948:	2100      	movs	r1, #0
 800194a:	480d      	ldr	r0, [pc, #52]	@ (8001980 <MX_UART5_Init+0x90>)
 800194c:	f005 fe39 	bl	80075c2 <HAL_UARTEx_SetTxFifoThreshold>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001956:	f7ff f96f 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800195a:	2100      	movs	r1, #0
 800195c:	4808      	ldr	r0, [pc, #32]	@ (8001980 <MX_UART5_Init+0x90>)
 800195e:	f005 fe6e 	bl	800763e <HAL_UARTEx_SetRxFifoThreshold>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001968:	f7ff f966 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800196c:	4804      	ldr	r0, [pc, #16]	@ (8001980 <MX_UART5_Init+0x90>)
 800196e:	f005 fdef 	bl	8007550 <HAL_UARTEx_DisableFifoMode>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001978:	f7ff f95e 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	24000444 	.word	0x24000444
 8001984:	40005000 	.word	0x40005000

08001988 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800198c:	4b22      	ldr	r3, [pc, #136]	@ (8001a18 <MX_UART7_Init+0x90>)
 800198e:	4a23      	ldr	r2, [pc, #140]	@ (8001a1c <MX_UART7_Init+0x94>)
 8001990:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001992:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <MX_UART7_Init+0x90>)
 8001994:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001998:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800199a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a18 <MX_UART7_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80019a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a18 <MX_UART7_Init+0x90>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80019a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <MX_UART7_Init+0x90>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80019ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <MX_UART7_Init+0x90>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <MX_UART7_Init+0x90>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b8:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <MX_UART7_Init+0x90>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019be:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <MX_UART7_Init+0x90>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019c4:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <MX_UART7_Init+0x90>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ca:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <MX_UART7_Init+0x90>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80019d0:	4811      	ldr	r0, [pc, #68]	@ (8001a18 <MX_UART7_Init+0x90>)
 80019d2:	f004 fce0 	bl	8006396 <HAL_UART_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80019dc:	f7ff f92c 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e0:	2100      	movs	r1, #0
 80019e2:	480d      	ldr	r0, [pc, #52]	@ (8001a18 <MX_UART7_Init+0x90>)
 80019e4:	f005 fded 	bl	80075c2 <HAL_UARTEx_SetTxFifoThreshold>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80019ee:	f7ff f923 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f2:	2100      	movs	r1, #0
 80019f4:	4808      	ldr	r0, [pc, #32]	@ (8001a18 <MX_UART7_Init+0x90>)
 80019f6:	f005 fe22 	bl	800763e <HAL_UARTEx_SetRxFifoThreshold>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001a00:	f7ff f91a 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001a04:	4804      	ldr	r0, [pc, #16]	@ (8001a18 <MX_UART7_Init+0x90>)
 8001a06:	f005 fda3 	bl	8007550 <HAL_UARTEx_DisableFifoMode>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001a10:	f7ff f912 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	240004d8 	.word	0x240004d8
 8001a1c:	40007800 	.word	0x40007800

08001a20 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a24:	4b22      	ldr	r3, [pc, #136]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a26:	4a23      	ldr	r2, [pc, #140]	@ (8001ab4 <MX_USART1_UART_Init+0x94>)
 8001a28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a32:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a46:	220c      	movs	r2, #12
 8001a48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a56:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a62:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a68:	4811      	ldr	r0, [pc, #68]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a6a:	f004 fc94 	bl	8006396 <HAL_UART_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a74:	f7ff f8e0 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a78:	2100      	movs	r1, #0
 8001a7a:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a7c:	f005 fda1 	bl	80075c2 <HAL_UARTEx_SetTxFifoThreshold>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a86:	f7ff f8d7 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4808      	ldr	r0, [pc, #32]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a8e:	f005 fdd6 	bl	800763e <HAL_UARTEx_SetRxFifoThreshold>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a98:	f7ff f8ce 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a9c:	4804      	ldr	r0, [pc, #16]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a9e:	f005 fd57 	bl	8007550 <HAL_UARTEx_DisableFifoMode>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001aa8:	f7ff f8c6 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2400056c 	.word	0x2400056c
 8001ab4:	40011000 	.word	0x40011000

08001ab8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b0be      	sub	sp, #248	@ 0xf8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ad4:	22b8      	movs	r2, #184	@ 0xb8
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f006 f855 	bl	8007b88 <memset>
  if(uartHandle->Instance==UART4)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a99      	ldr	r2, [pc, #612]	@ (8001d48 <HAL_UART_MspInit+0x290>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d146      	bne.n	8001b76 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ae8:	f04f 0202 	mov.w	r2, #2
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001afa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 fd48 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001b0a:	f7ff f895 	bl	8000c38 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b0e:	4b8f      	ldr	r3, [pc, #572]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001b10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b14:	4a8d      	ldr	r2, [pc, #564]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001b16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b1e:	4b8b      	ldr	r3, [pc, #556]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001b20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2c:	4b87      	ldr	r3, [pc, #540]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b32:	4a86      	ldr	r2, [pc, #536]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b3c:	4b83      	ldr	r3, [pc, #524]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	623b      	str	r3, [r7, #32]
 8001b48:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b62:	2308      	movs	r3, #8
 8001b64:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4878      	ldr	r0, [pc, #480]	@ (8001d50 <HAL_UART_MspInit+0x298>)
 8001b70:	f000 fb48 	bl	8002204 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b74:	e0e3      	b.n	8001d3e <HAL_UART_MspInit+0x286>
  else if(uartHandle->Instance==UART5)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a76      	ldr	r2, [pc, #472]	@ (8001d54 <HAL_UART_MspInit+0x29c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d146      	bne.n	8001c0e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001b80:	f04f 0202 	mov.w	r2, #2
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 fcfc 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8001ba2:	f7ff f849 	bl	8000c38 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001ba6:	4b69      	ldr	r3, [pc, #420]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bac:	4a67      	ldr	r2, [pc, #412]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001bae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bb2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bb6:	4b65      	ldr	r3, [pc, #404]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001bb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc4:	4b61      	ldr	r3, [pc, #388]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bca:	4a60      	ldr	r2, [pc, #384]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bd4:	4b5d      	ldr	r3, [pc, #372]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001be2:	2360      	movs	r3, #96	@ 0x60
 8001be4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001bfa:	230e      	movs	r3, #14
 8001bfc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c04:	4619      	mov	r1, r3
 8001c06:	4854      	ldr	r0, [pc, #336]	@ (8001d58 <HAL_UART_MspInit+0x2a0>)
 8001c08:	f000 fafc 	bl	8002204 <HAL_GPIO_Init>
}
 8001c0c:	e097      	b.n	8001d3e <HAL_UART_MspInit+0x286>
  else if(uartHandle->Instance==UART7)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a52      	ldr	r2, [pc, #328]	@ (8001d5c <HAL_UART_MspInit+0x2a4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d146      	bne.n	8001ca6 <HAL_UART_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001c18:	f04f 0202 	mov.w	r2, #2
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 fcb0 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_UART_MspInit+0x186>
      Error_Handler();
 8001c3a:	f7fe fffd 	bl	8000c38 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001c3e:	4b43      	ldr	r3, [pc, #268]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c44:	4a41      	ldr	r2, [pc, #260]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001c46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c54:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c62:	4a3a      	ldr	r2, [pc, #232]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001c64:	f043 0320 	orr.w	r3, r3, #32
 8001c68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c6c:	4b37      	ldr	r3, [pc, #220]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c7a:	23c0      	movs	r3, #192	@ 0xc0
 8001c7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001c92:	2307      	movs	r3, #7
 8001c94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c98:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4830      	ldr	r0, [pc, #192]	@ (8001d60 <HAL_UART_MspInit+0x2a8>)
 8001ca0:	f000 fab0 	bl	8002204 <HAL_GPIO_Init>
}
 8001ca4:	e04b      	b.n	8001d3e <HAL_UART_MspInit+0x286>
  else if(uartHandle->Instance==USART1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a2e      	ldr	r2, [pc, #184]	@ (8001d64 <HAL_UART_MspInit+0x2ac>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d146      	bne.n	8001d3e <HAL_UART_MspInit+0x286>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cb0:	f04f 0201 	mov.w	r2, #1
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f002 fc64 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001cd2:	f7fe ffb1 	bl	8000c38 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001cd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001cde:	f043 0310 	orr.w	r3, r3, #16
 8001ce2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ce6:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001ce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf4:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cfa:	4a14      	ldr	r2, [pc, #80]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d04:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <HAL_UART_MspInit+0x294>)
 8001d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d12:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4805      	ldr	r0, [pc, #20]	@ (8001d50 <HAL_UART_MspInit+0x298>)
 8001d3a:	f000 fa63 	bl	8002204 <HAL_GPIO_Init>
}
 8001d3e:	bf00      	nop
 8001d40:	37f8      	adds	r7, #248	@ 0xf8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40004c00 	.word	0x40004c00
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	58020000 	.word	0x58020000
 8001d54:	40005000 	.word	0x40005000
 8001d58:	58020400 	.word	0x58020400
 8001d5c:	40007800 	.word	0x40007800
 8001d60:	58021400 	.word	0x58021400
 8001d64:	40011000 	.word	0x40011000

08001d68 <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001d6c:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d6e:	4a11      	ldr	r2, [pc, #68]	@ (8001db4 <MX_USB_OTG_HS_HCD_Init+0x4c>)
 8001d70:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8001d72:	4b0f      	ldr	r3, [pc, #60]	@ (8001db0 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d74:	2210      	movs	r2, #16
 8001d76:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8001d78:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001db0 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001d84:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d86:	2202      	movs	r2, #2
 8001d88:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001d8a:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001d90:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8001d9c:	4804      	ldr	r0, [pc, #16]	@ (8001db0 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001d9e:	f000 fbf2 	bl	8002586 <HAL_HCD_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_USB_OTG_HS_HCD_Init+0x44>
  {
    Error_Handler();
 8001da8:	f7fe ff46 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	24000600 	.word	0x24000600
 8001db4:	40040000 	.word	0x40040000

08001db8 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b0b2      	sub	sp, #200	@ 0xc8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dc0:	f107 0310 	add.w	r3, r7, #16
 8001dc4:	22b8      	movs	r2, #184	@ 0xb8
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f005 fedd 	bl	8007b88 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a16      	ldr	r2, [pc, #88]	@ (8001e2c <HAL_HCD_MspInit+0x74>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d124      	bne.n	8001e22 <HAL_HCD_MspInit+0x6a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001dd8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001de4:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001de8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	4618      	mov	r0, r3
 8001df2:	f002 fbcf 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_HCD_MspInit+0x48>
    {
      Error_Handler();
 8001dfc:	f7fe ff1c 	bl	8000c38 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001e00:	f001 fc52 	bl	80036a8 <HAL_PWREx_EnableUSBVoltageDetector>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001e04:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <HAL_HCD_MspInit+0x78>)
 8001e06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e0a:	4a09      	ldr	r2, [pc, #36]	@ (8001e30 <HAL_HCD_MspInit+0x78>)
 8001e0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e10:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <HAL_HCD_MspInit+0x78>)
 8001e16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8001e22:	bf00      	nop
 8001e24:	37c8      	adds	r7, #200	@ 0xc8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40040000 	.word	0x40040000
 8001e30:	58024400 	.word	0x58024400

08001e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e38:	f7ff fc82 	bl	8001740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e3c:	480c      	ldr	r0, [pc, #48]	@ (8001e70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e3e:	490d      	ldr	r1, [pc, #52]	@ (8001e74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e40:	4a0d      	ldr	r2, [pc, #52]	@ (8001e78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e44:	e002      	b.n	8001e4c <LoopCopyDataInit>

08001e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4a:	3304      	adds	r3, #4

08001e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e50:	d3f9      	bcc.n	8001e46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e52:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e54:	4c0a      	ldr	r4, [pc, #40]	@ (8001e80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e58:	e001      	b.n	8001e5e <LoopFillZerobss>

08001e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e5c:	3204      	adds	r2, #4

08001e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e60:	d3fb      	bcc.n	8001e5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e62:	f005 fe99 	bl	8007b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e66:	f7fe fe53 	bl	8000b10 <main>
  bx  lr
 8001e6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e6c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001e70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e74:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001e78:	08007c40 	.word	0x08007c40
  ldr r2, =_sbss
 8001e7c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001e80:	240009e4 	.word	0x240009e4

08001e84 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e84:	e7fe      	b.n	8001e84 <ADC3_IRQHandler>
	...

08001e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e8e:	2003      	movs	r0, #3
 8001e90:	f000 f986 	bl	80021a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e94:	f002 f9a8 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <HAL_Init+0x68>)
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	4913      	ldr	r1, [pc, #76]	@ (8001ef4 <HAL_Init+0x6c>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <HAL_Init+0x68>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef4 <HAL_Init+0x6c>)
 8001ebc:	5cd3      	ldrb	r3, [r2, r3]
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef8 <HAL_Init+0x70>)
 8001eca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8001efc <HAL_Init+0x74>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed2:	200f      	movs	r0, #15
 8001ed4:	f000 f814 	bl	8001f00 <HAL_InitTick>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e002      	b.n	8001ee8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee2:	f7ff fbd1 	bl	8001688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	58024400 	.word	0x58024400
 8001ef4:	08007bf8 	.word	0x08007bf8
 8001ef8:	24000004 	.word	0x24000004
 8001efc:	24000000 	.word	0x24000000

08001f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <HAL_InitTick+0x60>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e021      	b.n	8001f58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f14:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <HAL_InitTick+0x64>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <HAL_InitTick+0x60>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f95d 	bl	80021ea <HAL_SYSTICK_Config>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00e      	b.n	8001f58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b0f      	cmp	r3, #15
 8001f3e:	d80a      	bhi.n	8001f56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f40:	2200      	movs	r2, #0
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295
 8001f48:	f000 f935 	bl	80021b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f4c:	4a06      	ldr	r2, [pc, #24]	@ (8001f68 <HAL_InitTick+0x68>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e000      	b.n	8001f58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	2400000c 	.word	0x2400000c
 8001f64:	24000000 	.word	0x24000000
 8001f68:	24000008 	.word	0x24000008

08001f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_IncTick+0x20>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_IncTick+0x24>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a04      	ldr	r2, [pc, #16]	@ (8001f90 <HAL_IncTick+0x24>)
 8001f7e:	6013      	str	r3, [r2, #0]
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	2400000c 	.word	0x2400000c
 8001f90:	240009e0 	.word	0x240009e0

08001f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return uwTick;
 8001f98:	4b03      	ldr	r3, [pc, #12]	@ (8001fa8 <HAL_GetTick+0x14>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	240009e0 	.word	0x240009e0

08001fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb4:	f7ff ffee 	bl	8001f94 <HAL_GetTick>
 8001fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d005      	beq.n	8001fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <HAL_Delay+0x44>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fd2:	bf00      	nop
 8001fd4:	f7ff ffde 	bl	8001f94 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d8f7      	bhi.n	8001fd4 <HAL_Delay+0x28>
  {
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2400000c 	.word	0x2400000c

08001ff4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001ffc:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 0202 	bic.w	r2, r3, #2
 8002004:	4904      	ldr	r1, [pc, #16]	@ (8002018 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	58003c00 	.word	0x58003c00

0800201c <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002020:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002026:	f023 0301 	bic.w	r3, r3, #1
 800202a:	6013      	str	r3, [r2, #0]
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	58003c00 	.word	0x58003c00

0800203c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <__NVIC_SetPriorityGrouping+0x40>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002058:	4013      	ands	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 8002066:	4313      	orrs	r3, r2
 8002068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206a:	4a04      	ldr	r2, [pc, #16]	@ (800207c <__NVIC_SetPriorityGrouping+0x40>)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	60d3      	str	r3, [r2, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00
 8002080:	05fa0000 	.word	0x05fa0000

08002084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002088:	4b04      	ldr	r3, [pc, #16]	@ (800209c <__NVIC_GetPriorityGrouping+0x18>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 0307 	and.w	r3, r3, #7
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db0a      	blt.n	80020ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	490c      	ldr	r1, [pc, #48]	@ (80020ec <__NVIC_SetPriority+0x4c>)
 80020ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c8:	e00a      	b.n	80020e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4908      	ldr	r1, [pc, #32]	@ (80020f0 <__NVIC_SetPriority+0x50>)
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	3b04      	subs	r3, #4
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	440b      	add	r3, r1
 80020de:	761a      	strb	r2, [r3, #24]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000e100 	.word	0xe000e100
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	@ 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f1c3 0307 	rsb	r3, r3, #7
 800210e:	2b04      	cmp	r3, #4
 8002110:	bf28      	it	cs
 8002112:	2304      	movcs	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3304      	adds	r3, #4
 800211a:	2b06      	cmp	r3, #6
 800211c:	d902      	bls.n	8002124 <NVIC_EncodePriority+0x30>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3b03      	subs	r3, #3
 8002122:	e000      	b.n	8002126 <NVIC_EncodePriority+0x32>
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	f04f 32ff 	mov.w	r2, #4294967295
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800213c:	f04f 31ff 	mov.w	r1, #4294967295
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43d9      	mvns	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	4313      	orrs	r3, r2
         );
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	@ 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800216c:	d301      	bcc.n	8002172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216e:	2301      	movs	r3, #1
 8002170:	e00f      	b.n	8002192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002172:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <SysTick_Config+0x40>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217a:	210f      	movs	r1, #15
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f7ff ff8e 	bl	80020a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002184:	4b05      	ldr	r3, [pc, #20]	@ (800219c <SysTick_Config+0x40>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	4b04      	ldr	r3, [pc, #16]	@ (800219c <SysTick_Config+0x40>)
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	e000e010 	.word	0xe000e010

080021a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ff47 	bl	800203c <__NVIC_SetPriorityGrouping>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021c4:	f7ff ff5e 	bl	8002084 <__NVIC_GetPriorityGrouping>
 80021c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	6978      	ldr	r0, [r7, #20]
 80021d0:	f7ff ff90 	bl	80020f4 <NVIC_EncodePriority>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff5f 	bl	80020a0 <__NVIC_SetPriority>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ffb2 	bl	800215c <SysTick_Config>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	@ 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002212:	4b86      	ldr	r3, [pc, #536]	@ (800242c <HAL_GPIO_Init+0x228>)
 8002214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002216:	e18c      	b.n	8002532 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	2101      	movs	r1, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 817e 	beq.w	800252c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d005      	beq.n	8002248 <HAL_GPIO_Init+0x44>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d130      	bne.n	80022aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800227e:	2201      	movs	r2, #1
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	f003 0201 	and.w	r2, r3, #1
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d017      	beq.n	80022e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2203      	movs	r2, #3
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d123      	bne.n	800233a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	08da      	lsrs	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3208      	adds	r2, #8
 80022fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	08da      	lsrs	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3208      	adds	r2, #8
 8002334:	69b9      	ldr	r1, [r7, #24]
 8002336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 0203 	and.w	r2, r3, #3
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 80d8 	beq.w	800252c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237c:	4b2c      	ldr	r3, [pc, #176]	@ (8002430 <HAL_GPIO_Init+0x22c>)
 800237e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002382:	4a2b      	ldr	r2, [pc, #172]	@ (8002430 <HAL_GPIO_Init+0x22c>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800238c:	4b28      	ldr	r3, [pc, #160]	@ (8002430 <HAL_GPIO_Init+0x22c>)
 800238e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239a:	4a26      	ldr	r2, [pc, #152]	@ (8002434 <HAL_GPIO_Init+0x230>)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002438 <HAL_GPIO_Init+0x234>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d04a      	beq.n	800245c <HAL_GPIO_Init+0x258>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a1c      	ldr	r2, [pc, #112]	@ (800243c <HAL_GPIO_Init+0x238>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d02b      	beq.n	8002426 <HAL_GPIO_Init+0x222>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002440 <HAL_GPIO_Init+0x23c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d025      	beq.n	8002422 <HAL_GPIO_Init+0x21e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002444 <HAL_GPIO_Init+0x240>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d01f      	beq.n	800241e <HAL_GPIO_Init+0x21a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a19      	ldr	r2, [pc, #100]	@ (8002448 <HAL_GPIO_Init+0x244>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d019      	beq.n	800241a <HAL_GPIO_Init+0x216>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a18      	ldr	r2, [pc, #96]	@ (800244c <HAL_GPIO_Init+0x248>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_GPIO_Init+0x212>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a17      	ldr	r2, [pc, #92]	@ (8002450 <HAL_GPIO_Init+0x24c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00d      	beq.n	8002412 <HAL_GPIO_Init+0x20e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a16      	ldr	r2, [pc, #88]	@ (8002454 <HAL_GPIO_Init+0x250>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d007      	beq.n	800240e <HAL_GPIO_Init+0x20a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a15      	ldr	r2, [pc, #84]	@ (8002458 <HAL_GPIO_Init+0x254>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d101      	bne.n	800240a <HAL_GPIO_Init+0x206>
 8002406:	2309      	movs	r3, #9
 8002408:	e029      	b.n	800245e <HAL_GPIO_Init+0x25a>
 800240a:	230a      	movs	r3, #10
 800240c:	e027      	b.n	800245e <HAL_GPIO_Init+0x25a>
 800240e:	2307      	movs	r3, #7
 8002410:	e025      	b.n	800245e <HAL_GPIO_Init+0x25a>
 8002412:	2306      	movs	r3, #6
 8002414:	e023      	b.n	800245e <HAL_GPIO_Init+0x25a>
 8002416:	2305      	movs	r3, #5
 8002418:	e021      	b.n	800245e <HAL_GPIO_Init+0x25a>
 800241a:	2304      	movs	r3, #4
 800241c:	e01f      	b.n	800245e <HAL_GPIO_Init+0x25a>
 800241e:	2303      	movs	r3, #3
 8002420:	e01d      	b.n	800245e <HAL_GPIO_Init+0x25a>
 8002422:	2302      	movs	r3, #2
 8002424:	e01b      	b.n	800245e <HAL_GPIO_Init+0x25a>
 8002426:	2301      	movs	r3, #1
 8002428:	e019      	b.n	800245e <HAL_GPIO_Init+0x25a>
 800242a:	bf00      	nop
 800242c:	58000080 	.word	0x58000080
 8002430:	58024400 	.word	0x58024400
 8002434:	58000400 	.word	0x58000400
 8002438:	58020000 	.word	0x58020000
 800243c:	58020400 	.word	0x58020400
 8002440:	58020800 	.word	0x58020800
 8002444:	58020c00 	.word	0x58020c00
 8002448:	58021000 	.word	0x58021000
 800244c:	58021400 	.word	0x58021400
 8002450:	58021800 	.word	0x58021800
 8002454:	58021c00 	.word	0x58021c00
 8002458:	58022400 	.word	0x58022400
 800245c:	2300      	movs	r3, #0
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	f002 0203 	and.w	r2, r2, #3
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	4093      	lsls	r3, r2
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800246e:	4938      	ldr	r1, [pc, #224]	@ (8002550 <HAL_GPIO_Init+0x34c>)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	3302      	adds	r3, #2
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	3301      	adds	r3, #1
 8002530:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f ae6b 	bne.w	8002218 <HAL_GPIO_Init+0x14>
  }
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	3724      	adds	r7, #36	@ 0x24
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	58000400 	.word	0x58000400

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002570:	e003      	b.n	800257a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002572:	887b      	ldrh	r3, [r7, #2]
 8002574:	041a      	lsls	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	619a      	str	r2, [r3, #24]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af02      	add	r7, sp, #8
 800258c:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e04f      	b.n	8002638 <HAL_HCD_Init+0xb2>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d106      	bne.n	80025b2 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff fc03 	bl	8001db8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2203      	movs	r2, #3
 80025b6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f005 f93c 	bl	800783c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7c1a      	ldrb	r2, [r3, #16]
 80025cc:	f88d 2000 	strb.w	r2, [sp]
 80025d0:	3304      	adds	r3, #4
 80025d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025d4:	f005 f8c0 	bl	8007758 <USB_CoreInit>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_HCD_Init+0x64>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e026      	b.n	8002638 <HAL_HCD_Init+0xb2>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2101      	movs	r1, #1
 80025f0:	4618      	mov	r0, r3
 80025f2:	f005 f934 	bl	800785e <USB_SetCurrentMode>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_HCD_Init+0x82>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e017      	b.n	8002638 <HAL_HCD_Init+0xb2>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7c1a      	ldrb	r2, [r3, #16]
 8002610:	f88d 2000 	strb.w	r2, [sp]
 8002614:	3304      	adds	r3, #4
 8002616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002618:	f005 fa0c 	bl	8007a34 <USB_HostInit>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_HCD_Init+0xa8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e004      	b.n	8002638 <HAL_HCD_Init+0xb2>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e08b      	b.n	800276a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe f970 	bl	800094c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2224      	movs	r2, #36	@ 0x24
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002690:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d107      	bne.n	80026ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	e006      	b.n	80026c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80026c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d108      	bne.n	80026e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	e007      	b.n	80026f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <HAL_I2C_Init+0x134>)
 80026fe:	430b      	orrs	r3, r1
 8002700:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002710:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69d9      	ldr	r1, [r3, #28]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1a      	ldr	r2, [r3, #32]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	02008000 	.word	0x02008000

08002778 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b20      	cmp	r3, #32
 800278c:	d138      	bne.n	8002800 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002798:	2302      	movs	r3, #2
 800279a:	e032      	b.n	8002802 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2224      	movs	r2, #36	@ 0x24
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6819      	ldr	r1, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e000      	b.n	8002802 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002800:	2302      	movs	r3, #2
  }
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b20      	cmp	r3, #32
 8002822:	d139      	bne.n	8002898 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800282e:	2302      	movs	r3, #2
 8002830:	e033      	b.n	800289a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2224      	movs	r2, #36	@ 0x24
 800283e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002860:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	e000      	b.n	800289a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002898:	2302      	movs	r3, #2
  }
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80028b4:	f7ff fb6e 	bl	8001f94 <HAL_GetTick>
 80028b8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
 80028c4:	e0a5      	b.n	8002a12 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f040 809e 	bne.w	8002a12 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe fa72 	bl	8000dc0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80028dc:	f241 3188 	movw	r1, #5000	@ 0x1388
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f89d 	bl	8002a20 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	4b4b      	ldr	r3, [pc, #300]	@ (8002a1c <HAL_OSPI_Init+0x174>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	68d1      	ldr	r1, [r2, #12]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6912      	ldr	r2, [r2, #16]
 80028f8:	3a01      	subs	r2, #1
 80028fa:	0412      	lsls	r2, r2, #16
 80028fc:	4311      	orrs	r1, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6952      	ldr	r2, [r2, #20]
 8002902:	3a01      	subs	r2, #1
 8002904:	0212      	lsls	r2, r2, #8
 8002906:	4311      	orrs	r1, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800290c:	4311      	orrs	r1, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	69d2      	ldr	r2, [r2, #28]
 8002912:	4311      	orrs	r1, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	430b      	orrs	r3, r1
 800291a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1a      	ldr	r2, [r3, #32]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800294c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	3b01      	subs	r3, #1
 800295e:	021a      	lsls	r2, r3, #8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2200      	movs	r2, #0
 8002972:	2120      	movs	r1, #32
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fd4b 	bl	8003410 <OSPI_WaitFlagStateUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d146      	bne.n	8002a12 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	1e5a      	subs	r2, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80029ba:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d107      	bne.n	80029fa <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0202 	orr.w	r2, r2, #2
 80029f8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a02:	d103      	bne.n	8002a0c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a0a:	e002      	b.n	8002a12 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	f8e0f8f4 	.word	0xf8e0f8f4

08002a20 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b094      	sub	sp, #80	@ 0x50
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a9d      	ldr	r2, [pc, #628]	@ (8002cd4 <HAL_OSPIM_Config+0x294>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d105      	bne.n	8002a6e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002a6c:	e004      	b.n	8002a78 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002a7e:	e01d      	b.n	8002abc <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8002a80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002a84:	3301      	adds	r3, #1
 8002a86:	b2d8      	uxtb	r0, r3
 8002a88:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8002a8c:	f107 0114 	add.w	r1, r7, #20
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f000 fcf0 	bl	8003480 <OSPIM_GetConfig>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2208      	movs	r2, #8
 8002ab0:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002ab2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002abc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d9dd      	bls.n	8002a80 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8002ac4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f040 8495 	bne.w	80033f8 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8002ace:	4b81      	ldr	r3, [pc, #516]	@ (8002cd4 <HAL_OSPIM_Config+0x294>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002ada:	4b7e      	ldr	r3, [pc, #504]	@ (8002cd4 <HAL_OSPIM_Config+0x294>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a7d      	ldr	r2, [pc, #500]	@ (8002cd4 <HAL_OSPIM_Config+0x294>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002ae6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002af2:	4b79      	ldr	r3, [pc, #484]	@ (8002cd8 <HAL_OSPIM_Config+0x298>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00b      	beq.n	8002b16 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002afe:	4b76      	ldr	r3, [pc, #472]	@ (8002cd8 <HAL_OSPIM_Config+0x298>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a75      	ldr	r2, [pc, #468]	@ (8002cd8 <HAL_OSPIM_Config+0x298>)
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8002b0a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002b0e:	f043 0302 	orr.w	r3, r3, #2
 8002b12:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8002b16:	4971      	ldr	r1, [pc, #452]	@ (8002cdc <HAL_OSPIM_Config+0x29c>)
 8002b18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4413      	add	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	3350      	adds	r3, #80	@ 0x50
 8002b24:	443b      	add	r3, r7
 8002b26:	3b34      	subs	r3, #52	@ 0x34
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	486a      	ldr	r0, [pc, #424]	@ (8002cdc <HAL_OSPIM_Config+0x29c>)
 8002b34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b36:	4613      	mov	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	3350      	adds	r3, #80	@ 0x50
 8002b40:	443b      	add	r3, r7
 8002b42:	3b34      	subs	r3, #52	@ 0x34
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4403      	add	r3, r0
 8002b50:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002b52:	4b62      	ldr	r3, [pc, #392]	@ (8002cdc <HAL_OSPIM_Config+0x29c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80c0 	beq.w	8002ce0 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002b60:	4b5e      	ldr	r3, [pc, #376]	@ (8002cdc <HAL_OSPIM_Config+0x29c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a5d      	ldr	r2, [pc, #372]	@ (8002cdc <HAL_OSPIM_Config+0x29c>)
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8002b6c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	f040 8162 	bne.w	8002e3a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8002b76:	4959      	ldr	r1, [pc, #356]	@ (8002cdc <HAL_OSPIM_Config+0x29c>)
 8002b78:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	3350      	adds	r3, #80	@ 0x50
 8002b86:	443b      	add	r3, r7
 8002b88:	3b3c      	subs	r3, #60	@ 0x3c
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	4851      	ldr	r0, [pc, #324]	@ (8002cdc <HAL_OSPIM_Config+0x29c>)
 8002b96:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	3350      	adds	r3, #80	@ 0x50
 8002ba4:	443b      	add	r3, r7
 8002ba6:	3b3c      	subs	r3, #60	@ 0x3c
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	f041 0202 	orr.w	r2, r1, #2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4403      	add	r3, r0
 8002bb4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002bb6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	3350      	adds	r3, #80	@ 0x50
 8002bc4:	443b      	add	r3, r7
 8002bc6:	3b38      	subs	r3, #56	@ 0x38
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01f      	beq.n	8002c0e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8002bce:	4943      	ldr	r1, [pc, #268]	@ (8002cdc <HAL_OSPIM_Config+0x29c>)
 8002bd0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	3350      	adds	r3, #80	@ 0x50
 8002bde:	443b      	add	r3, r7
 8002be0:	3b38      	subs	r3, #56	@ 0x38
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	483b      	ldr	r0, [pc, #236]	@ (8002cdc <HAL_OSPIM_Config+0x29c>)
 8002bee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	3350      	adds	r3, #80	@ 0x50
 8002bfc:	443b      	add	r3, r7
 8002bfe:	3b38      	subs	r3, #56	@ 0x38
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	f041 0220 	orr.w	r2, r1, #32
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4403      	add	r3, r0
 8002c0c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002c0e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	3350      	adds	r3, #80	@ 0x50
 8002c1c:	443b      	add	r3, r7
 8002c1e:	3b30      	subs	r3, #48	@ 0x30
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d023      	beq.n	8002c6e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8002c26:	492d      	ldr	r1, [pc, #180]	@ (8002cdc <HAL_OSPIM_Config+0x29c>)
 8002c28:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	3350      	adds	r3, #80	@ 0x50
 8002c36:	443b      	add	r3, r7
 8002c38:	3b30      	subs	r3, #48	@ 0x30
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	4824      	ldr	r0, [pc, #144]	@ (8002cdc <HAL_OSPIM_Config+0x29c>)
 8002c4a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c4e:	4613      	mov	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	3350      	adds	r3, #80	@ 0x50
 8002c58:	443b      	add	r3, r7
 8002c5a:	3b30      	subs	r3, #48	@ 0x30
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4403      	add	r3, r0
 8002c6c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002c6e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	3350      	adds	r3, #80	@ 0x50
 8002c7c:	443b      	add	r3, r7
 8002c7e:	3b2c      	subs	r3, #44	@ 0x2c
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 80d9 	beq.w	8002e3a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8002c88:	4914      	ldr	r1, [pc, #80]	@ (8002cdc <HAL_OSPIM_Config+0x29c>)
 8002c8a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	3350      	adds	r3, #80	@ 0x50
 8002c98:	443b      	add	r3, r7
 8002c9a:	3b2c      	subs	r3, #44	@ 0x2c
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	480c      	ldr	r0, [pc, #48]	@ (8002cdc <HAL_OSPIM_Config+0x29c>)
 8002cac:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	3350      	adds	r3, #80	@ 0x50
 8002cba:	443b      	add	r3, r7
 8002cbc:	3b2c      	subs	r3, #44	@ 0x2c
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4403      	add	r3, r0
 8002cce:	605a      	str	r2, [r3, #4]
 8002cd0:	e0b3      	b.n	8002e3a <HAL_OSPIM_Config+0x3fa>
 8002cd2:	bf00      	nop
 8002cd4:	52005000 	.word	0x52005000
 8002cd8:	5200a000 	.word	0x5200a000
 8002cdc:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8002ce0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	3350      	adds	r3, #80	@ 0x50
 8002cec:	443b      	add	r3, r7
 8002cee:	3b3c      	subs	r3, #60	@ 0x3c
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 80a1 	beq.w	8002e3a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8002cf8:	4993      	ldr	r1, [pc, #588]	@ (8002f48 <HAL_OSPIM_Config+0x508>)
 8002cfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	3350      	adds	r3, #80	@ 0x50
 8002d06:	443b      	add	r3, r7
 8002d08:	3b3c      	subs	r3, #60	@ 0x3c
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	488c      	ldr	r0, [pc, #560]	@ (8002f48 <HAL_OSPIM_Config+0x508>)
 8002d16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	3350      	adds	r3, #80	@ 0x50
 8002d22:	443b      	add	r3, r7
 8002d24:	3b3c      	subs	r3, #60	@ 0x3c
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	f021 0201 	bic.w	r2, r1, #1
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4403      	add	r3, r0
 8002d32:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8002d34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	3350      	adds	r3, #80	@ 0x50
 8002d40:	443b      	add	r3, r7
 8002d42:	3b38      	subs	r3, #56	@ 0x38
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d01d      	beq.n	8002d86 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8002d4a:	497f      	ldr	r1, [pc, #508]	@ (8002f48 <HAL_OSPIM_Config+0x508>)
 8002d4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	3350      	adds	r3, #80	@ 0x50
 8002d58:	443b      	add	r3, r7
 8002d5a:	3b38      	subs	r3, #56	@ 0x38
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	6859      	ldr	r1, [r3, #4]
 8002d66:	4878      	ldr	r0, [pc, #480]	@ (8002f48 <HAL_OSPIM_Config+0x508>)
 8002d68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	3350      	adds	r3, #80	@ 0x50
 8002d74:	443b      	add	r3, r7
 8002d76:	3b38      	subs	r3, #56	@ 0x38
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	f021 0210 	bic.w	r2, r1, #16
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4403      	add	r3, r0
 8002d84:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002d86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	3350      	adds	r3, #80	@ 0x50
 8002d92:	443b      	add	r3, r7
 8002d94:	3b30      	subs	r3, #48	@ 0x30
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d021      	beq.n	8002de0 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8002d9c:	496a      	ldr	r1, [pc, #424]	@ (8002f48 <HAL_OSPIM_Config+0x508>)
 8002d9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	3350      	adds	r3, #80	@ 0x50
 8002daa:	443b      	add	r3, r7
 8002dac:	3b30      	subs	r3, #48	@ 0x30
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	4862      	ldr	r0, [pc, #392]	@ (8002f48 <HAL_OSPIM_Config+0x508>)
 8002dbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	3350      	adds	r3, #80	@ 0x50
 8002dca:	443b      	add	r3, r7
 8002dcc:	3b30      	subs	r3, #48	@ 0x30
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4403      	add	r3, r0
 8002dde:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002de0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	3350      	adds	r3, #80	@ 0x50
 8002dec:	443b      	add	r3, r7
 8002dee:	3b2c      	subs	r3, #44	@ 0x2c
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d021      	beq.n	8002e3a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8002df6:	4954      	ldr	r1, [pc, #336]	@ (8002f48 <HAL_OSPIM_Config+0x508>)
 8002df8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	3350      	adds	r3, #80	@ 0x50
 8002e04:	443b      	add	r3, r7
 8002e06:	3b2c      	subs	r3, #44	@ 0x2c
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	484c      	ldr	r0, [pc, #304]	@ (8002f48 <HAL_OSPIM_Config+0x508>)
 8002e18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	3350      	adds	r3, #80	@ 0x50
 8002e24:	443b      	add	r3, r7
 8002e26:	3b2c      	subs	r3, #44	@ 0x2c
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4403      	add	r3, r0
 8002e38:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	6819      	ldr	r1, [r3, #0]
 8002e3e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	3350      	adds	r3, #80	@ 0x50
 8002e4c:	443b      	add	r3, r7
 8002e4e:	3b3c      	subs	r3, #60	@ 0x3c
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4299      	cmp	r1, r3
 8002e54:	d038      	beq.n	8002ec8 <HAL_OSPIM_Config+0x488>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	6859      	ldr	r1, [r3, #4]
 8002e5a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	3350      	adds	r3, #80	@ 0x50
 8002e68:	443b      	add	r3, r7
 8002e6a:	3b38      	subs	r3, #56	@ 0x38
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4299      	cmp	r1, r3
 8002e70:	d02a      	beq.n	8002ec8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	6899      	ldr	r1, [r3, #8]
 8002e76:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	3350      	adds	r3, #80	@ 0x50
 8002e84:	443b      	add	r3, r7
 8002e86:	3b34      	subs	r3, #52	@ 0x34
 8002e88:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002e8a:	4299      	cmp	r1, r3
 8002e8c:	d01c      	beq.n	8002ec8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	68d9      	ldr	r1, [r3, #12]
 8002e92:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002e96:	4613      	mov	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	3350      	adds	r3, #80	@ 0x50
 8002ea0:	443b      	add	r3, r7
 8002ea2:	3b30      	subs	r3, #48	@ 0x30
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4299      	cmp	r1, r3
 8002ea8:	d00e      	beq.n	8002ec8 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	6919      	ldr	r1, [r3, #16]
 8002eae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	3350      	adds	r3, #80	@ 0x50
 8002ebc:	443b      	add	r3, r7
 8002ebe:	3b2c      	subs	r3, #44	@ 0x2c
 8002ec0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002ec2:	4299      	cmp	r1, r3
 8002ec4:	f040 810e 	bne.w	80030e4 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	6819      	ldr	r1, [r3, #0]
 8002ecc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	3350      	adds	r3, #80	@ 0x50
 8002eda:	443b      	add	r3, r7
 8002edc:	3b3c      	subs	r3, #60	@ 0x3c
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4299      	cmp	r1, r3
 8002ee2:	d133      	bne.n	8002f4c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	3350      	adds	r3, #80	@ 0x50
 8002ef6:	443b      	add	r3, r7
 8002ef8:	3b38      	subs	r3, #56	@ 0x38
 8002efa:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002efc:	4299      	cmp	r1, r3
 8002efe:	d125      	bne.n	8002f4c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	68d9      	ldr	r1, [r3, #12]
 8002f04:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	3350      	adds	r3, #80	@ 0x50
 8002f12:	443b      	add	r3, r7
 8002f14:	3b30      	subs	r3, #48	@ 0x30
 8002f16:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002f18:	4299      	cmp	r1, r3
 8002f1a:	d117      	bne.n	8002f4c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	6919      	ldr	r1, [r3, #16]
 8002f20:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	3350      	adds	r3, #80	@ 0x50
 8002f2e:	443b      	add	r3, r7
 8002f30:	3b2c      	subs	r3, #44	@ 0x2c
 8002f32:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002f34:	4299      	cmp	r1, r3
 8002f36:	d109      	bne.n	8002f4c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002f38:	4b03      	ldr	r3, [pc, #12]	@ (8002f48 <HAL_OSPIM_Config+0x508>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a02      	ldr	r2, [pc, #8]	@ (8002f48 <HAL_OSPIM_Config+0x508>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	e0ce      	b.n	80030e4 <HAL_OSPIM_Config+0x6a4>
 8002f46:	bf00      	nop
 8002f48:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8002f4c:	49bb      	ldr	r1, [pc, #748]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8002f4e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	3350      	adds	r3, #80	@ 0x50
 8002f5c:	443b      	add	r3, r7
 8002f5e:	3b3c      	subs	r3, #60	@ 0x3c
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	48b4      	ldr	r0, [pc, #720]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8002f6c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002f70:	4613      	mov	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	3350      	adds	r3, #80	@ 0x50
 8002f7a:	443b      	add	r3, r7
 8002f7c:	3b3c      	subs	r3, #60	@ 0x3c
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	f021 0201 	bic.w	r2, r1, #1
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4403      	add	r3, r0
 8002f8a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002f8c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	3350      	adds	r3, #80	@ 0x50
 8002f9a:	443b      	add	r3, r7
 8002f9c:	3b38      	subs	r3, #56	@ 0x38
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01f      	beq.n	8002fe4 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8002fa4:	49a5      	ldr	r1, [pc, #660]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8002fa6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	3350      	adds	r3, #80	@ 0x50
 8002fb4:	443b      	add	r3, r7
 8002fb6:	3b38      	subs	r3, #56	@ 0x38
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	489e      	ldr	r0, [pc, #632]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8002fc4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	3350      	adds	r3, #80	@ 0x50
 8002fd2:	443b      	add	r3, r7
 8002fd4:	3b38      	subs	r3, #56	@ 0x38
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	f021 0210 	bic.w	r2, r1, #16
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4403      	add	r3, r0
 8002fe2:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8002fe4:	4995      	ldr	r1, [pc, #596]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8002fe6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	3350      	adds	r3, #80	@ 0x50
 8002ff4:	443b      	add	r3, r7
 8002ff6:	3b34      	subs	r3, #52	@ 0x34
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	6859      	ldr	r1, [r3, #4]
 8003002:	488e      	ldr	r0, [pc, #568]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8003004:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003008:	4613      	mov	r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	4413      	add	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	3350      	adds	r3, #80	@ 0x50
 8003012:	443b      	add	r3, r7
 8003014:	3b34      	subs	r3, #52	@ 0x34
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3b01      	subs	r3, #1
 800301a:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4403      	add	r3, r0
 8003022:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003024:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003028:	4613      	mov	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	3350      	adds	r3, #80	@ 0x50
 8003032:	443b      	add	r3, r7
 8003034:	3b30      	subs	r3, #48	@ 0x30
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d023      	beq.n	8003084 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800303c:	497f      	ldr	r1, [pc, #508]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 800303e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003042:	4613      	mov	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	3350      	adds	r3, #80	@ 0x50
 800304c:	443b      	add	r3, r7
 800304e:	3b30      	subs	r3, #48	@ 0x30
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3b01      	subs	r3, #1
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	6859      	ldr	r1, [r3, #4]
 800305e:	4877      	ldr	r0, [pc, #476]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8003060:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	3350      	adds	r3, #80	@ 0x50
 800306e:	443b      	add	r3, r7
 8003070:	3b30      	subs	r3, #48	@ 0x30
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3b01      	subs	r3, #1
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4403      	add	r3, r0
 8003082:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003084:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	3350      	adds	r3, #80	@ 0x50
 8003092:	443b      	add	r3, r7
 8003094:	3b2c      	subs	r3, #44	@ 0x2c
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d023      	beq.n	80030e4 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800309c:	4967      	ldr	r1, [pc, #412]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 800309e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80030a2:	4613      	mov	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	3350      	adds	r3, #80	@ 0x50
 80030ac:	443b      	add	r3, r7
 80030ae:	3b2c      	subs	r3, #44	@ 0x2c
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	6859      	ldr	r1, [r3, #4]
 80030be:	485f      	ldr	r0, [pc, #380]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 80030c0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	3350      	adds	r3, #80	@ 0x50
 80030ce:	443b      	add	r3, r7
 80030d0:	3b2c      	subs	r3, #44	@ 0x2c
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4403      	add	r3, r0
 80030e2:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80030e4:	4a55      	ldr	r2, [pc, #340]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030f8:	025b      	lsls	r3, r3, #9
 80030fa:	431a      	orrs	r2, r3
 80030fc:	494f      	ldr	r1, [pc, #316]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	3b01      	subs	r3, #1
 8003104:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	1e5a      	subs	r2, r3, #1
 8003114:	4b49      	ldr	r3, [pc, #292]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	b2db      	uxtb	r3, r3
 800311c:	429a      	cmp	r2, r3
 800311e:	d90a      	bls.n	8003136 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8003120:	4b46      	ldr	r3, [pc, #280]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	3b01      	subs	r3, #1
 800312e:	041b      	lsls	r3, r3, #16
 8003130:	4942      	ldr	r1, [pc, #264]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003136:	4b41      	ldr	r3, [pc, #260]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 809a 	beq.w	8003278 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8003144:	4a3d      	ldr	r2, [pc, #244]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3b01      	subs	r3, #1
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f023 0203 	bic.w	r2, r3, #3
 8003156:	4939      	ldr	r1, [pc, #228]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3b01      	subs	r3, #1
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d011      	beq.n	8003194 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8003170:	4a32      	ldr	r2, [pc, #200]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	3b01      	subs	r3, #1
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003182:	492e      	ldr	r1, [pc, #184]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	3b01      	subs	r3, #1
 800318a:	f042 0210 	orr.w	r2, r2, #16
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80031a0:	4a26      	ldr	r2, [pc, #152]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80031b6:	4921      	ldr	r1, [pc, #132]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	3b01      	subs	r3, #1
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	605a      	str	r2, [r3, #4]
 80031cc:	e019      	b.n	8003202 <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d015      	beq.n	8003202 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80031d6:	4a19      	ldr	r2, [pc, #100]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	3b01      	subs	r3, #1
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80031ec:	4913      	ldr	r1, [pc, #76]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d018      	beq.n	8003240 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800320e:	4a0b      	ldr	r2, [pc, #44]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	3b01      	subs	r3, #1
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003224:	4905      	ldr	r1, [pc, #20]	@ (800323c <HAL_OSPIM_Config+0x7fc>)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	3b01      	subs	r3, #1
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	e0c5      	b.n	80033c8 <HAL_OSPIM_Config+0x988>
 800323c:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80bf 	beq.w	80033c8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800324a:	4a6e      	ldr	r2, [pc, #440]	@ (8003404 <HAL_OSPIM_Config+0x9c4>)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	3b01      	subs	r3, #1
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003260:	4968      	ldr	r1, [pc, #416]	@ (8003404 <HAL_OSPIM_Config+0x9c4>)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	3b01      	subs	r3, #1
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	e0a7      	b.n	80033c8 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003278:	4a62      	ldr	r2, [pc, #392]	@ (8003404 <HAL_OSPIM_Config+0x9c4>)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3b01      	subs	r3, #1
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f023 0203 	bic.w	r2, r3, #3
 800328a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	431a      	orrs	r2, r3
 8003290:	495c      	ldr	r1, [pc, #368]	@ (8003404 <HAL_OSPIM_Config+0x9c4>)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3b01      	subs	r3, #1
 8003298:	f042 0201 	orr.w	r2, r2, #1
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d014      	beq.n	80032d4 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80032aa:	4a56      	ldr	r2, [pc, #344]	@ (8003404 <HAL_OSPIM_Config+0x9c4>)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80032bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032be:	015b      	lsls	r3, r3, #5
 80032c0:	431a      	orrs	r2, r3
 80032c2:	4950      	ldr	r1, [pc, #320]	@ (8003404 <HAL_OSPIM_Config+0x9c4>)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	f042 0210 	orr.w	r2, r2, #16
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d019      	beq.n	8003314 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80032e0:	4a48      	ldr	r2, [pc, #288]	@ (8003404 <HAL_OSPIM_Config+0x9c4>)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80032f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032f8:	049b      	lsls	r3, r3, #18
 80032fa:	431a      	orrs	r2, r3
 80032fc:	4941      	ldr	r1, [pc, #260]	@ (8003404 <HAL_OSPIM_Config+0x9c4>)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	3b01      	subs	r3, #1
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	e01c      	b.n	800334e <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d018      	beq.n	800334e <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800331c:	4a39      	ldr	r2, [pc, #228]	@ (8003404 <HAL_OSPIM_Config+0x9c4>)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	3b01      	subs	r3, #1
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003334:	069b      	lsls	r3, r3, #26
 8003336:	431a      	orrs	r2, r3
 8003338:	4932      	ldr	r1, [pc, #200]	@ (8003404 <HAL_OSPIM_Config+0x9c4>)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	3b01      	subs	r3, #1
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d019      	beq.n	800338e <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800335a:	4a2a      	ldr	r2, [pc, #168]	@ (8003404 <HAL_OSPIM_Config+0x9c4>)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	3b01      	subs	r3, #1
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003370:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003372:	049b      	lsls	r3, r3, #18
 8003374:	431a      	orrs	r2, r3
 8003376:	4923      	ldr	r1, [pc, #140]	@ (8003404 <HAL_OSPIM_Config+0x9c4>)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	3b01      	subs	r3, #1
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	605a      	str	r2, [r3, #4]
 800338c:	e01c      	b.n	80033c8 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d018      	beq.n	80033c8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003396:	4a1b      	ldr	r2, [pc, #108]	@ (8003404 <HAL_OSPIM_Config+0x9c4>)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	3b01      	subs	r3, #1
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80033ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033ae:	069b      	lsls	r3, r3, #26
 80033b0:	431a      	orrs	r2, r3
 80033b2:	4914      	ldr	r1, [pc, #80]	@ (8003404 <HAL_OSPIM_Config+0x9c4>)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80033c8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80033d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003408 <HAL_OSPIM_Config+0x9c8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003408 <HAL_OSPIM_Config+0x9c8>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80033e0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80033ec:	4b07      	ldr	r3, [pc, #28]	@ (800340c <HAL_OSPIM_Config+0x9cc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a06      	ldr	r2, [pc, #24]	@ (800340c <HAL_OSPIM_Config+0x9cc>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80033f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3750      	adds	r7, #80	@ 0x50
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	5200b400 	.word	0x5200b400
 8003408:	52005000 	.word	0x52005000
 800340c:	5200a000 	.word	0x5200a000

08003410 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003420:	e01a      	b.n	8003458 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d016      	beq.n	8003458 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7fe fdb3 	bl	8001f94 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003446:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e00e      	b.n	8003476 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6a1a      	ldr	r2, [r3, #32]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	429a      	cmp	r2, r3
 8003472:	d1d6      	bne.n	8003422 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	6039      	str	r1, [r7, #0]
 800348a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <OSPIM_GetConfig+0x26>
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d802      	bhi.n	80034a6 <OSPIM_GetConfig+0x26>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d102      	bne.n	80034ac <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	75fb      	strb	r3, [r7, #23]
 80034aa:	e098      	b.n	80035de <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2200      	movs	r2, #0
 80034b6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2200      	movs	r2, #0
 80034c2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2200      	movs	r2, #0
 80034c8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d10b      	bne.n	80034e8 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80034d0:	4b46      	ldr	r3, [pc, #280]	@ (80035ec <OSPIM_GetConfig+0x16c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d102      	bne.n	80034e2 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80034dc:	4b44      	ldr	r3, [pc, #272]	@ (80035f0 <OSPIM_GetConfig+0x170>)
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	e002      	b.n	80034e8 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80034e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034e6:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	e074      	b.n	80035d8 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80034ee:	4a3f      	ldr	r2, [pc, #252]	@ (80035ec <OSPIM_GetConfig+0x16c>)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4053      	eors	r3, r2
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d103      	bne.n	800351a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4053      	eors	r3, r2
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4053      	eors	r3, r2
 800354a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800354e:	2b00      	cmp	r3, #0
 8003550:	d103      	bne.n	800355a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d018      	beq.n	8003596 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4053      	eors	r3, r2
 800356a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d111      	bne.n	8003596 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d106      	bne.n	800358a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3301      	adds	r3, #1
 8003580:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	60da      	str	r2, [r3, #12]
 8003588:	e005      	b.n	8003596 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3301      	adds	r3, #1
 800358e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d018      	beq.n	80035d2 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4053      	eors	r3, r2
 80035a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d111      	bne.n	80035d2 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d106      	bne.n	80035c6 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	3301      	adds	r3, #1
 80035bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	611a      	str	r2, [r3, #16]
 80035c4:	e005      	b.n	80035d2 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3301      	adds	r3, #1
 80035ca:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	3301      	adds	r3, #1
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d987      	bls.n	80034ee <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80035de:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	5200b400 	.word	0x5200b400
 80035f0:	04040222 	.word	0x04040222

080035f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80035fc:	4b29      	ldr	r3, [pc, #164]	@ (80036a4 <HAL_PWREx_ConfigSupply+0xb0>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	2b06      	cmp	r3, #6
 8003606:	d00a      	beq.n	800361e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003608:	4b26      	ldr	r3, [pc, #152]	@ (80036a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	429a      	cmp	r2, r3
 8003614:	d001      	beq.n	800361a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e03f      	b.n	800369a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	e03d      	b.n	800369a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800361e:	4b21      	ldr	r3, [pc, #132]	@ (80036a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003626:	491f      	ldr	r1, [pc, #124]	@ (80036a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4313      	orrs	r3, r2
 800362c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800362e:	f7fe fcb1 	bl	8001f94 <HAL_GetTick>
 8003632:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003634:	e009      	b.n	800364a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003636:	f7fe fcad 	bl	8001f94 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003644:	d901      	bls.n	800364a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e027      	b.n	800369a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800364a:	4b16      	ldr	r3, [pc, #88]	@ (80036a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003656:	d1ee      	bne.n	8003636 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b1e      	cmp	r3, #30
 800365c:	d008      	beq.n	8003670 <HAL_PWREx_ConfigSupply+0x7c>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b2e      	cmp	r3, #46	@ 0x2e
 8003662:	d005      	beq.n	8003670 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b1d      	cmp	r3, #29
 8003668:	d002      	beq.n	8003670 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b2d      	cmp	r3, #45	@ 0x2d
 800366e:	d113      	bne.n	8003698 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003670:	f7fe fc90 	bl	8001f94 <HAL_GetTick>
 8003674:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003676:	e009      	b.n	800368c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003678:	f7fe fc8c 	bl	8001f94 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003686:	d901      	bls.n	800368c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e006      	b.n	800369a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800368c:	4b05      	ldr	r3, [pc, #20]	@ (80036a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0311 	and.w	r3, r3, #17
 8003694:	2b11      	cmp	r3, #17
 8003696:	d1ef      	bne.n	8003678 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	58024800 	.word	0x58024800

080036a8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80036ac:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4a04      	ldr	r2, [pc, #16]	@ (80036c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80036b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036b6:	60d3      	str	r3, [r2, #12]
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	58024800 	.word	0x58024800

080036c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08c      	sub	sp, #48	@ 0x30
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e3c8      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8087 	beq.w	80037f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e8:	4b88      	ldr	r3, [pc, #544]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036f2:	4b86      	ldr	r3, [pc, #536]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 80036f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d007      	beq.n	800370e <HAL_RCC_OscConfig+0x46>
 80036fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003700:	2b18      	cmp	r3, #24
 8003702:	d110      	bne.n	8003726 <HAL_RCC_OscConfig+0x5e>
 8003704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d10b      	bne.n	8003726 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370e:	4b7f      	ldr	r3, [pc, #508]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d06c      	beq.n	80037f4 <HAL_RCC_OscConfig+0x12c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d168      	bne.n	80037f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e3a2      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800372e:	d106      	bne.n	800373e <HAL_RCC_OscConfig+0x76>
 8003730:	4b76      	ldr	r3, [pc, #472]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a75      	ldr	r2, [pc, #468]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 8003736:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	e02e      	b.n	800379c <HAL_RCC_OscConfig+0xd4>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0x98>
 8003746:	4b71      	ldr	r3, [pc, #452]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a70      	ldr	r2, [pc, #448]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 800374c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	4b6e      	ldr	r3, [pc, #440]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a6d      	ldr	r2, [pc, #436]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 8003758:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e01d      	b.n	800379c <HAL_RCC_OscConfig+0xd4>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003768:	d10c      	bne.n	8003784 <HAL_RCC_OscConfig+0xbc>
 800376a:	4b68      	ldr	r3, [pc, #416]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a67      	ldr	r2, [pc, #412]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 8003770:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	4b65      	ldr	r3, [pc, #404]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a64      	ldr	r2, [pc, #400]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 800377c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e00b      	b.n	800379c <HAL_RCC_OscConfig+0xd4>
 8003784:	4b61      	ldr	r3, [pc, #388]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a60      	ldr	r2, [pc, #384]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 800378a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	4b5e      	ldr	r3, [pc, #376]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a5d      	ldr	r2, [pc, #372]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 8003796:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800379a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d013      	beq.n	80037cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fe fbf6 	bl	8001f94 <HAL_GetTick>
 80037a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ac:	f7fe fbf2 	bl	8001f94 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	@ 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e356      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037be:	4b53      	ldr	r3, [pc, #332]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0xe4>
 80037ca:	e014      	b.n	80037f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe fbe2 	bl	8001f94 <HAL_GetTick>
 80037d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d4:	f7fe fbde 	bl	8001f94 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	@ 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e342      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037e6:	4b49      	ldr	r3, [pc, #292]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x10c>
 80037f2:	e000      	b.n	80037f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 808c 	beq.w	800391c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003804:	4b41      	ldr	r3, [pc, #260]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800380c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800380e:	4b3f      	ldr	r3, [pc, #252]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 8003810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003812:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <HAL_RCC_OscConfig+0x162>
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	2b18      	cmp	r3, #24
 800381e:	d137      	bne.n	8003890 <HAL_RCC_OscConfig+0x1c8>
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d132      	bne.n	8003890 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800382a:	4b38      	ldr	r3, [pc, #224]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_RCC_OscConfig+0x17a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e314      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003842:	4b32      	ldr	r3, [pc, #200]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 0219 	bic.w	r2, r3, #25
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	492f      	ldr	r1, [pc, #188]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 8003850:	4313      	orrs	r3, r2
 8003852:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003854:	f7fe fb9e 	bl	8001f94 <HAL_GetTick>
 8003858:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385c:	f7fe fb9a 	bl	8001f94 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e2fe      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800386e:	4b27      	ldr	r3, [pc, #156]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387a:	4b24      	ldr	r3, [pc, #144]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	061b      	lsls	r3, r3, #24
 8003888:	4920      	ldr	r1, [pc, #128]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 800388a:	4313      	orrs	r3, r2
 800388c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800388e:	e045      	b.n	800391c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d026      	beq.n	80038e6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003898:	4b1c      	ldr	r3, [pc, #112]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f023 0219 	bic.w	r2, r3, #25
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4919      	ldr	r1, [pc, #100]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7fe fb73 	bl	8001f94 <HAL_GetTick>
 80038ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b2:	f7fe fb6f 	bl	8001f94 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e2d3      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038c4:	4b11      	ldr	r3, [pc, #68]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d0:	4b0e      	ldr	r3, [pc, #56]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	490b      	ldr	r1, [pc, #44]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
 80038e4:	e01a      	b.n	800391c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e6:	4b09      	ldr	r3, [pc, #36]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a08      	ldr	r2, [pc, #32]	@ (800390c <HAL_RCC_OscConfig+0x244>)
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f2:	f7fe fb4f 	bl	8001f94 <HAL_GetTick>
 80038f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038fa:	f7fe fb4b 	bl	8001f94 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d903      	bls.n	8003910 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e2af      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
 800390c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003910:	4b96      	ldr	r3, [pc, #600]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ee      	bne.n	80038fa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	d06a      	beq.n	80039fe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003928:	4b90      	ldr	r3, [pc, #576]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003930:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003932:	4b8e      	ldr	r3, [pc, #568]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003936:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	2b08      	cmp	r3, #8
 800393c:	d007      	beq.n	800394e <HAL_RCC_OscConfig+0x286>
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b18      	cmp	r3, #24
 8003942:	d11b      	bne.n	800397c <HAL_RCC_OscConfig+0x2b4>
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b01      	cmp	r3, #1
 800394c:	d116      	bne.n	800397c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800394e:	4b87      	ldr	r3, [pc, #540]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <HAL_RCC_OscConfig+0x29e>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	2b80      	cmp	r3, #128	@ 0x80
 8003960:	d001      	beq.n	8003966 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e282      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003966:	4b81      	ldr	r3, [pc, #516]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	061b      	lsls	r3, r3, #24
 8003974:	497d      	ldr	r1, [pc, #500]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003976:	4313      	orrs	r3, r2
 8003978:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800397a:	e040      	b.n	80039fe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d023      	beq.n	80039cc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003984:	4b79      	ldr	r3, [pc, #484]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a78      	ldr	r2, [pc, #480]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 800398a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800398e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fe fb00 	bl	8001f94 <HAL_GetTick>
 8003994:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003998:	f7fe fafc 	bl	8001f94 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e260      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039aa:	4b70      	ldr	r3, [pc, #448]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039b6:	4b6d      	ldr	r3, [pc, #436]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	061b      	lsls	r3, r3, #24
 80039c4:	4969      	ldr	r1, [pc, #420]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60cb      	str	r3, [r1, #12]
 80039ca:	e018      	b.n	80039fe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80039cc:	4b67      	ldr	r3, [pc, #412]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a66      	ldr	r2, [pc, #408]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 80039d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fe fadc 	bl	8001f94 <HAL_GetTick>
 80039dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039e0:	f7fe fad8 	bl	8001f94 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e23c      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039f2:	4b5e      	ldr	r3, [pc, #376]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d036      	beq.n	8003a78 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d019      	beq.n	8003a46 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a12:	4b56      	ldr	r3, [pc, #344]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a16:	4a55      	ldr	r2, [pc, #340]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1e:	f7fe fab9 	bl	8001f94 <HAL_GetTick>
 8003a22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a26:	f7fe fab5 	bl	8001f94 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e219      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a38:	4b4c      	ldr	r3, [pc, #304]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x35e>
 8003a44:	e018      	b.n	8003a78 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a46:	4b49      	ldr	r3, [pc, #292]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4a:	4a48      	ldr	r2, [pc, #288]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a52:	f7fe fa9f 	bl	8001f94 <HAL_GetTick>
 8003a56:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a5a:	f7fe fa9b 	bl	8001f94 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e1ff      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a6c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f0      	bne.n	8003a5a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d036      	beq.n	8003af2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d019      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a8c:	4b37      	ldr	r3, [pc, #220]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a36      	ldr	r2, [pc, #216]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003a92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a98:	f7fe fa7c 	bl	8001f94 <HAL_GetTick>
 8003a9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003aa0:	f7fe fa78 	bl	8001f94 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1dc      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x3d8>
 8003abe:	e018      	b.n	8003af2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a29      	ldr	r2, [pc, #164]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003ac6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003aca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003acc:	f7fe fa62 	bl	8001f94 <HAL_GetTick>
 8003ad0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ad4:	f7fe fa5e 	bl	8001f94 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e1c2      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ae6:	4b21      	ldr	r3, [pc, #132]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8086 	beq.w	8003c0c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b00:	4b1b      	ldr	r3, [pc, #108]	@ (8003b70 <HAL_RCC_OscConfig+0x4a8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1a      	ldr	r2, [pc, #104]	@ (8003b70 <HAL_RCC_OscConfig+0x4a8>)
 8003b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b0c:	f7fe fa42 	bl	8001f94 <HAL_GetTick>
 8003b10:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b14:	f7fe fa3e 	bl	8001f94 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	@ 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1a2      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b26:	4b12      	ldr	r3, [pc, #72]	@ (8003b70 <HAL_RCC_OscConfig+0x4a8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d106      	bne.n	8003b48 <HAL_RCC_OscConfig+0x480>
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3e:	4a0b      	ldr	r2, [pc, #44]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b46:	e032      	b.n	8003bae <HAL_RCC_OscConfig+0x4e6>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d111      	bne.n	8003b74 <HAL_RCC_OscConfig+0x4ac>
 8003b50:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b54:	4a05      	ldr	r2, [pc, #20]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b5c:	4b03      	ldr	r3, [pc, #12]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b60:	4a02      	ldr	r2, [pc, #8]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003b62:	f023 0304 	bic.w	r3, r3, #4
 8003b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b68:	e021      	b.n	8003bae <HAL_RCC_OscConfig+0x4e6>
 8003b6a:	bf00      	nop
 8003b6c:	58024400 	.word	0x58024400
 8003b70:	58024800 	.word	0x58024800
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b05      	cmp	r3, #5
 8003b7a:	d10c      	bne.n	8003b96 <HAL_RCC_OscConfig+0x4ce>
 8003b7c:	4b83      	ldr	r3, [pc, #524]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b80:	4a82      	ldr	r2, [pc, #520]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003b82:	f043 0304 	orr.w	r3, r3, #4
 8003b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b88:	4b80      	ldr	r3, [pc, #512]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8c:	4a7f      	ldr	r2, [pc, #508]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b94:	e00b      	b.n	8003bae <HAL_RCC_OscConfig+0x4e6>
 8003b96:	4b7d      	ldr	r3, [pc, #500]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba2:	4b7a      	ldr	r3, [pc, #488]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba6:	4a79      	ldr	r2, [pc, #484]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003ba8:	f023 0304 	bic.w	r3, r3, #4
 8003bac:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d015      	beq.n	8003be2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb6:	f7fe f9ed 	bl	8001f94 <HAL_GetTick>
 8003bba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bbc:	e00a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bbe:	f7fe f9e9 	bl	8001f94 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e14b      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bd4:	4b6d      	ldr	r3, [pc, #436]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0ee      	beq.n	8003bbe <HAL_RCC_OscConfig+0x4f6>
 8003be0:	e014      	b.n	8003c0c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be2:	f7fe f9d7 	bl	8001f94 <HAL_GetTick>
 8003be6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003be8:	e00a      	b.n	8003c00 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bea:	f7fe f9d3 	bl	8001f94 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e135      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c00:	4b62      	ldr	r3, [pc, #392]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1ee      	bne.n	8003bea <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 812a 	beq.w	8003e6a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c16:	4b5d      	ldr	r3, [pc, #372]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c1e:	2b18      	cmp	r3, #24
 8003c20:	f000 80ba 	beq.w	8003d98 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	f040 8095 	bne.w	8003d58 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2e:	4b57      	ldr	r3, [pc, #348]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a56      	ldr	r2, [pc, #344]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003c34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3a:	f7fe f9ab 	bl	8001f94 <HAL_GetTick>
 8003c3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c42:	f7fe f9a7 	bl	8001f94 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e10b      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c54:	4b4d      	ldr	r3, [pc, #308]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f0      	bne.n	8003c42 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c60:	4b4a      	ldr	r3, [pc, #296]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003c62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c64:	4b4a      	ldr	r3, [pc, #296]	@ (8003d90 <HAL_RCC_OscConfig+0x6c8>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c70:	0112      	lsls	r2, r2, #4
 8003c72:	430a      	orrs	r2, r1
 8003c74:	4945      	ldr	r1, [pc, #276]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	628b      	str	r3, [r1, #40]	@ 0x28
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	025b      	lsls	r3, r3, #9
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c94:	3b01      	subs	r3, #1
 8003c96:	041b      	lsls	r3, r3, #16
 8003c98:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	061b      	lsls	r3, r3, #24
 8003ca6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003caa:	4938      	ldr	r1, [pc, #224]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003cb0:	4b36      	ldr	r3, [pc, #216]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	4a35      	ldr	r2, [pc, #212]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003cb6:	f023 0301 	bic.w	r3, r3, #1
 8003cba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003cbc:	4b33      	ldr	r3, [pc, #204]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003cbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cc0:	4b34      	ldr	r3, [pc, #208]	@ (8003d94 <HAL_RCC_OscConfig+0x6cc>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003cc8:	00d2      	lsls	r2, r2, #3
 8003cca:	4930      	ldr	r1, [pc, #192]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd4:	f023 020c 	bic.w	r2, r3, #12
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cdc:	492b      	ldr	r1, [pc, #172]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce6:	f023 0202 	bic.w	r2, r3, #2
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	4927      	ldr	r1, [pc, #156]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cf4:	4b25      	ldr	r3, [pc, #148]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf8:	4a24      	ldr	r2, [pc, #144]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d00:	4b22      	ldr	r3, [pc, #136]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	4a21      	ldr	r2, [pc, #132]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d10:	4a1e      	ldr	r2, [pc, #120]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003d12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d18:	4b1c      	ldr	r3, [pc, #112]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d24:	4b19      	ldr	r3, [pc, #100]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a18      	ldr	r2, [pc, #96]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003d2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7fe f930 	bl	8001f94 <HAL_GetTick>
 8003d34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d38:	f7fe f92c 	bl	8001f94 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e090      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d4a:	4b10      	ldr	r3, [pc, #64]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f0      	beq.n	8003d38 <HAL_RCC_OscConfig+0x670>
 8003d56:	e088      	b.n	8003e6a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d58:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003d5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fe f916 	bl	8001f94 <HAL_GetTick>
 8003d68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6c:	f7fe f912 	bl	8001f94 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e076      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d7e:	4b03      	ldr	r3, [pc, #12]	@ (8003d8c <HAL_RCC_OscConfig+0x6c4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x6a4>
 8003d8a:	e06e      	b.n	8003e6a <HAL_RCC_OscConfig+0x7a2>
 8003d8c:	58024400 	.word	0x58024400
 8003d90:	fffffc0c 	.word	0xfffffc0c
 8003d94:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d98:	4b36      	ldr	r3, [pc, #216]	@ (8003e74 <HAL_RCC_OscConfig+0x7ac>)
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d9e:	4b35      	ldr	r3, [pc, #212]	@ (8003e74 <HAL_RCC_OscConfig+0x7ac>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d031      	beq.n	8003e10 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f003 0203 	and.w	r2, r3, #3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d12a      	bne.n	8003e10 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d122      	bne.n	8003e10 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d11a      	bne.n	8003e10 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	0a5b      	lsrs	r3, r3, #9
 8003dde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d111      	bne.n	8003e10 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	0c1b      	lsrs	r3, r3, #16
 8003df0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d108      	bne.n	8003e10 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	0e1b      	lsrs	r3, r3, #24
 8003e02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e02b      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e14:	4b17      	ldr	r3, [pc, #92]	@ (8003e74 <HAL_RCC_OscConfig+0x7ac>)
 8003e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e18:	08db      	lsrs	r3, r3, #3
 8003e1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e1e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d01f      	beq.n	8003e6a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003e2a:	4b12      	ldr	r3, [pc, #72]	@ (8003e74 <HAL_RCC_OscConfig+0x7ac>)
 8003e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2e:	4a11      	ldr	r2, [pc, #68]	@ (8003e74 <HAL_RCC_OscConfig+0x7ac>)
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e36:	f7fe f8ad 	bl	8001f94 <HAL_GetTick>
 8003e3a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003e3c:	bf00      	nop
 8003e3e:	f7fe f8a9 	bl	8001f94 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d0f9      	beq.n	8003e3e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e74 <HAL_RCC_OscConfig+0x7ac>)
 8003e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e78 <HAL_RCC_OscConfig+0x7b0>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e56:	00d2      	lsls	r2, r2, #3
 8003e58:	4906      	ldr	r1, [pc, #24]	@ (8003e74 <HAL_RCC_OscConfig+0x7ac>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003e5e:	4b05      	ldr	r3, [pc, #20]	@ (8003e74 <HAL_RCC_OscConfig+0x7ac>)
 8003e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e62:	4a04      	ldr	r2, [pc, #16]	@ (8003e74 <HAL_RCC_OscConfig+0x7ac>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3730      	adds	r7, #48	@ 0x30
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	58024400 	.word	0x58024400
 8003e78:	ffff0007 	.word	0xffff0007

08003e7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e19c      	b.n	80041ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e90:	4b8a      	ldr	r3, [pc, #552]	@ (80040bc <HAL_RCC_ClockConfig+0x240>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 030f 	and.w	r3, r3, #15
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d910      	bls.n	8003ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9e:	4b87      	ldr	r3, [pc, #540]	@ (80040bc <HAL_RCC_ClockConfig+0x240>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f023 020f 	bic.w	r2, r3, #15
 8003ea6:	4985      	ldr	r1, [pc, #532]	@ (80040bc <HAL_RCC_ClockConfig+0x240>)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b83      	ldr	r3, [pc, #524]	@ (80040bc <HAL_RCC_ClockConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e184      	b.n	80041ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d010      	beq.n	8003eee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	4b7b      	ldr	r3, [pc, #492]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d908      	bls.n	8003eee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003edc:	4b78      	ldr	r3, [pc, #480]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	4975      	ldr	r1, [pc, #468]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d010      	beq.n	8003f1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	4b70      	ldr	r3, [pc, #448]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d908      	bls.n	8003f1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	496a      	ldr	r1, [pc, #424]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d010      	beq.n	8003f4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699a      	ldr	r2, [r3, #24]
 8003f2c:	4b64      	ldr	r3, [pc, #400]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d908      	bls.n	8003f4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f38:	4b61      	ldr	r3, [pc, #388]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	495e      	ldr	r1, [pc, #376]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d010      	beq.n	8003f78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69da      	ldr	r2, [r3, #28]
 8003f5a:	4b59      	ldr	r3, [pc, #356]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d908      	bls.n	8003f78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f66:	4b56      	ldr	r3, [pc, #344]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	4953      	ldr	r1, [pc, #332]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d010      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	4b4d      	ldr	r3, [pc, #308]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d908      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f94:	4b4a      	ldr	r3, [pc, #296]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	f023 020f 	bic.w	r2, r3, #15
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4947      	ldr	r1, [pc, #284]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d055      	beq.n	800405e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fb2:	4b43      	ldr	r3, [pc, #268]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	4940      	ldr	r1, [pc, #256]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d107      	bne.n	8003fdc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fcc:	4b3c      	ldr	r3, [pc, #240]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d121      	bne.n	800401c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0f6      	b.n	80041ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fe4:	4b36      	ldr	r3, [pc, #216]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d115      	bne.n	800401c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0ea      	b.n	80041ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d107      	bne.n	800400c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ffc:	4b30      	ldr	r3, [pc, #192]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d109      	bne.n	800401c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0de      	b.n	80041ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800400c:	4b2c      	ldr	r3, [pc, #176]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0d6      	b.n	80041ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800401c:	4b28      	ldr	r3, [pc, #160]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f023 0207 	bic.w	r2, r3, #7
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	4925      	ldr	r1, [pc, #148]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 800402a:	4313      	orrs	r3, r2
 800402c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800402e:	f7fd ffb1 	bl	8001f94 <HAL_GetTick>
 8004032:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004034:	e00a      	b.n	800404c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004036:	f7fd ffad 	bl	8001f94 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004044:	4293      	cmp	r3, r2
 8004046:	d901      	bls.n	800404c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e0be      	b.n	80041ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404c:	4b1c      	ldr	r3, [pc, #112]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	429a      	cmp	r2, r3
 800405c:	d1eb      	bne.n	8004036 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d010      	beq.n	800408c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	4b14      	ldr	r3, [pc, #80]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	f003 030f 	and.w	r3, r3, #15
 8004076:	429a      	cmp	r2, r3
 8004078:	d208      	bcs.n	800408c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800407a:	4b11      	ldr	r3, [pc, #68]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f023 020f 	bic.w	r2, r3, #15
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	490e      	ldr	r1, [pc, #56]	@ (80040c0 <HAL_RCC_ClockConfig+0x244>)
 8004088:	4313      	orrs	r3, r2
 800408a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800408c:	4b0b      	ldr	r3, [pc, #44]	@ (80040bc <HAL_RCC_ClockConfig+0x240>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d214      	bcs.n	80040c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409a:	4b08      	ldr	r3, [pc, #32]	@ (80040bc <HAL_RCC_ClockConfig+0x240>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 020f 	bic.w	r2, r3, #15
 80040a2:	4906      	ldr	r1, [pc, #24]	@ (80040bc <HAL_RCC_ClockConfig+0x240>)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b04      	ldr	r3, [pc, #16]	@ (80040bc <HAL_RCC_ClockConfig+0x240>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e086      	b.n	80041ca <HAL_RCC_ClockConfig+0x34e>
 80040bc:	52002000 	.word	0x52002000
 80040c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d010      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	4b3f      	ldr	r3, [pc, #252]	@ (80041d4 <HAL_RCC_ClockConfig+0x358>)
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040dc:	429a      	cmp	r2, r3
 80040de:	d208      	bcs.n	80040f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040e0:	4b3c      	ldr	r3, [pc, #240]	@ (80041d4 <HAL_RCC_ClockConfig+0x358>)
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	4939      	ldr	r1, [pc, #228]	@ (80041d4 <HAL_RCC_ClockConfig+0x358>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d010      	beq.n	8004120 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	4b34      	ldr	r3, [pc, #208]	@ (80041d4 <HAL_RCC_ClockConfig+0x358>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800410a:	429a      	cmp	r2, r3
 800410c:	d208      	bcs.n	8004120 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800410e:	4b31      	ldr	r3, [pc, #196]	@ (80041d4 <HAL_RCC_ClockConfig+0x358>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	492e      	ldr	r1, [pc, #184]	@ (80041d4 <HAL_RCC_ClockConfig+0x358>)
 800411c:	4313      	orrs	r3, r2
 800411e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	d010      	beq.n	800414e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699a      	ldr	r2, [r3, #24]
 8004130:	4b28      	ldr	r3, [pc, #160]	@ (80041d4 <HAL_RCC_ClockConfig+0x358>)
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004138:	429a      	cmp	r2, r3
 800413a:	d208      	bcs.n	800414e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800413c:	4b25      	ldr	r3, [pc, #148]	@ (80041d4 <HAL_RCC_ClockConfig+0x358>)
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	4922      	ldr	r1, [pc, #136]	@ (80041d4 <HAL_RCC_ClockConfig+0x358>)
 800414a:	4313      	orrs	r3, r2
 800414c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d010      	beq.n	800417c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	4b1d      	ldr	r3, [pc, #116]	@ (80041d4 <HAL_RCC_ClockConfig+0x358>)
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004166:	429a      	cmp	r2, r3
 8004168:	d208      	bcs.n	800417c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800416a:	4b1a      	ldr	r3, [pc, #104]	@ (80041d4 <HAL_RCC_ClockConfig+0x358>)
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	4917      	ldr	r1, [pc, #92]	@ (80041d4 <HAL_RCC_ClockConfig+0x358>)
 8004178:	4313      	orrs	r3, r2
 800417a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800417c:	f000 f834 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 8004180:	4602      	mov	r2, r0
 8004182:	4b14      	ldr	r3, [pc, #80]	@ (80041d4 <HAL_RCC_ClockConfig+0x358>)
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	0a1b      	lsrs	r3, r3, #8
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	4912      	ldr	r1, [pc, #72]	@ (80041d8 <HAL_RCC_ClockConfig+0x35c>)
 800418e:	5ccb      	ldrb	r3, [r1, r3]
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	fa22 f303 	lsr.w	r3, r2, r3
 8004198:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800419a:	4b0e      	ldr	r3, [pc, #56]	@ (80041d4 <HAL_RCC_ClockConfig+0x358>)
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	4a0d      	ldr	r2, [pc, #52]	@ (80041d8 <HAL_RCC_ClockConfig+0x35c>)
 80041a4:	5cd3      	ldrb	r3, [r2, r3]
 80041a6:	f003 031f 	and.w	r3, r3, #31
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
 80041b0:	4a0a      	ldr	r2, [pc, #40]	@ (80041dc <HAL_RCC_ClockConfig+0x360>)
 80041b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041b4:	4a0a      	ldr	r2, [pc, #40]	@ (80041e0 <HAL_RCC_ClockConfig+0x364>)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80041ba:	4b0a      	ldr	r3, [pc, #40]	@ (80041e4 <HAL_RCC_ClockConfig+0x368>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fd fe9e 	bl	8001f00 <HAL_InitTick>
 80041c4:	4603      	mov	r3, r0
 80041c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	58024400 	.word	0x58024400
 80041d8:	08007bf8 	.word	0x08007bf8
 80041dc:	24000004 	.word	0x24000004
 80041e0:	24000000 	.word	0x24000000
 80041e4:	24000008 	.word	0x24000008

080041e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	@ 0x24
 80041ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041ee:	4bb3      	ldr	r3, [pc, #716]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041f6:	2b18      	cmp	r3, #24
 80041f8:	f200 8155 	bhi.w	80044a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80041fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004204 <HAL_RCC_GetSysClockFreq+0x1c>)
 80041fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004202:	bf00      	nop
 8004204:	08004269 	.word	0x08004269
 8004208:	080044a7 	.word	0x080044a7
 800420c:	080044a7 	.word	0x080044a7
 8004210:	080044a7 	.word	0x080044a7
 8004214:	080044a7 	.word	0x080044a7
 8004218:	080044a7 	.word	0x080044a7
 800421c:	080044a7 	.word	0x080044a7
 8004220:	080044a7 	.word	0x080044a7
 8004224:	0800428f 	.word	0x0800428f
 8004228:	080044a7 	.word	0x080044a7
 800422c:	080044a7 	.word	0x080044a7
 8004230:	080044a7 	.word	0x080044a7
 8004234:	080044a7 	.word	0x080044a7
 8004238:	080044a7 	.word	0x080044a7
 800423c:	080044a7 	.word	0x080044a7
 8004240:	080044a7 	.word	0x080044a7
 8004244:	08004295 	.word	0x08004295
 8004248:	080044a7 	.word	0x080044a7
 800424c:	080044a7 	.word	0x080044a7
 8004250:	080044a7 	.word	0x080044a7
 8004254:	080044a7 	.word	0x080044a7
 8004258:	080044a7 	.word	0x080044a7
 800425c:	080044a7 	.word	0x080044a7
 8004260:	080044a7 	.word	0x080044a7
 8004264:	0800429b 	.word	0x0800429b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004268:	4b94      	ldr	r3, [pc, #592]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004274:	4b91      	ldr	r3, [pc, #580]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	4a90      	ldr	r2, [pc, #576]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
 8004284:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004286:	e111      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004288:	4b8d      	ldr	r3, [pc, #564]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800428a:	61bb      	str	r3, [r7, #24]
      break;
 800428c:	e10e      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800428e:	4b8d      	ldr	r3, [pc, #564]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004290:	61bb      	str	r3, [r7, #24]
      break;
 8004292:	e10b      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004294:	4b8c      	ldr	r3, [pc, #560]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004296:	61bb      	str	r3, [r7, #24]
      break;
 8004298:	e108      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800429a:	4b88      	ldr	r3, [pc, #544]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800429c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80042a4:	4b85      	ldr	r3, [pc, #532]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042b0:	4b82      	ldr	r3, [pc, #520]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80042ba:	4b80      	ldr	r3, [pc, #512]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042be:	08db      	lsrs	r3, r3, #3
 80042c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	fb02 f303 	mul.w	r3, r2, r3
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80e1 	beq.w	80044a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	f000 8083 	beq.w	80043ec <HAL_RCC_GetSysClockFreq+0x204>
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	f200 80a1 	bhi.w	8004430 <HAL_RCC_GetSysClockFreq+0x248>
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0x114>
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d056      	beq.n	80043a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80042fa:	e099      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042fc:	4b6f      	ldr	r3, [pc, #444]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d02d      	beq.n	8004364 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004308:	4b6c      	ldr	r3, [pc, #432]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	08db      	lsrs	r3, r3, #3
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	4a6b      	ldr	r2, [pc, #428]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
 8004318:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	ee07 3a90 	vmov	s15, r3
 8004320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004332:	4b62      	ldr	r3, [pc, #392]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004342:	ed97 6a02 	vldr	s12, [r7, #8]
 8004346:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80044cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800434a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800434e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800435a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004362:	e087      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80044d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004376:	4b51      	ldr	r3, [pc, #324]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004386:	ed97 6a02 	vldr	s12, [r7, #8]
 800438a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80044cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800438e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800439a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800439e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043a6:	e065      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80044d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ba:	4b40      	ldr	r3, [pc, #256]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80044cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80043d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043ea:	e043      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80044d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80043fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fe:	4b2f      	ldr	r3, [pc, #188]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004412:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80044cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800441a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800441e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800442e:	e021      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80044d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800443e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004442:	4b1e      	ldr	r3, [pc, #120]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004452:	ed97 6a02 	vldr	s12, [r7, #8]
 8004456:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80044cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800445a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004472:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004474:	4b11      	ldr	r3, [pc, #68]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004478:	0a5b      	lsrs	r3, r3, #9
 800447a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800447e:	3301      	adds	r3, #1
 8004480:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	ee07 3a90 	vmov	s15, r3
 8004488:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800448c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004498:	ee17 3a90 	vmov	r3, s15
 800449c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800449e:	e005      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61bb      	str	r3, [r7, #24]
      break;
 80044a4:	e002      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80044a6:	4b07      	ldr	r3, [pc, #28]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044a8:	61bb      	str	r3, [r7, #24]
      break;
 80044aa:	bf00      	nop
  }

  return sysclockfreq;
 80044ac:	69bb      	ldr	r3, [r7, #24]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3724      	adds	r7, #36	@ 0x24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	58024400 	.word	0x58024400
 80044c0:	03d09000 	.word	0x03d09000
 80044c4:	003d0900 	.word	0x003d0900
 80044c8:	017d7840 	.word	0x017d7840
 80044cc:	46000000 	.word	0x46000000
 80044d0:	4c742400 	.word	0x4c742400
 80044d4:	4a742400 	.word	0x4a742400
 80044d8:	4bbebc20 	.word	0x4bbebc20

080044dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80044e2:	f7ff fe81 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 80044e6:	4602      	mov	r2, r0
 80044e8:	4b10      	ldr	r3, [pc, #64]	@ (800452c <HAL_RCC_GetHCLKFreq+0x50>)
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	0a1b      	lsrs	r3, r3, #8
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	490f      	ldr	r1, [pc, #60]	@ (8004530 <HAL_RCC_GetHCLKFreq+0x54>)
 80044f4:	5ccb      	ldrb	r3, [r1, r3]
 80044f6:	f003 031f 	and.w	r3, r3, #31
 80044fa:	fa22 f303 	lsr.w	r3, r2, r3
 80044fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004500:	4b0a      	ldr	r3, [pc, #40]	@ (800452c <HAL_RCC_GetHCLKFreq+0x50>)
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	4a09      	ldr	r2, [pc, #36]	@ (8004530 <HAL_RCC_GetHCLKFreq+0x54>)
 800450a:	5cd3      	ldrb	r3, [r2, r3]
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	fa22 f303 	lsr.w	r3, r2, r3
 8004516:	4a07      	ldr	r2, [pc, #28]	@ (8004534 <HAL_RCC_GetHCLKFreq+0x58>)
 8004518:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800451a:	4a07      	ldr	r2, [pc, #28]	@ (8004538 <HAL_RCC_GetHCLKFreq+0x5c>)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004520:	4b04      	ldr	r3, [pc, #16]	@ (8004534 <HAL_RCC_GetHCLKFreq+0x58>)
 8004522:	681b      	ldr	r3, [r3, #0]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	58024400 	.word	0x58024400
 8004530:	08007bf8 	.word	0x08007bf8
 8004534:	24000004 	.word	0x24000004
 8004538:	24000000 	.word	0x24000000

0800453c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004540:	f7ff ffcc 	bl	80044dc <HAL_RCC_GetHCLKFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b06      	ldr	r3, [pc, #24]	@ (8004560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	091b      	lsrs	r3, r3, #4
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4904      	ldr	r1, [pc, #16]	@ (8004564 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800455c:	4618      	mov	r0, r3
 800455e:	bd80      	pop	{r7, pc}
 8004560:	58024400 	.word	0x58024400
 8004564:	08007bf8 	.word	0x08007bf8

08004568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800456c:	f7ff ffb6 	bl	80044dc <HAL_RCC_GetHCLKFreq>
 8004570:	4602      	mov	r2, r0
 8004572:	4b06      	ldr	r3, [pc, #24]	@ (800458c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	0a1b      	lsrs	r3, r3, #8
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	4904      	ldr	r1, [pc, #16]	@ (8004590 <HAL_RCC_GetPCLK2Freq+0x28>)
 800457e:	5ccb      	ldrb	r3, [r1, r3]
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004588:	4618      	mov	r0, r3
 800458a:	bd80      	pop	{r7, pc}
 800458c:	58024400 	.word	0x58024400
 8004590:	08007bf8 	.word	0x08007bf8

08004594 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004598:	b0c6      	sub	sp, #280	@ 0x118
 800459a:	af00      	add	r7, sp, #0
 800459c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045a0:	2300      	movs	r3, #0
 80045a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045a6:	2300      	movs	r3, #0
 80045a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80045b8:	2500      	movs	r5, #0
 80045ba:	ea54 0305 	orrs.w	r3, r4, r5
 80045be:	d049      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80045c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045ca:	d02f      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80045cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045d0:	d828      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80045d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045d6:	d01a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80045d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045dc:	d822      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80045e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045e6:	d007      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045e8:	e01c      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ea:	4bab      	ldr	r3, [pc, #684]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ee:	4aaa      	ldr	r2, [pc, #680]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80045f6:	e01a      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045fc:	3308      	adds	r3, #8
 80045fe:	2102      	movs	r1, #2
 8004600:	4618      	mov	r0, r3
 8004602:	f001 fc25 	bl	8005e50 <RCCEx_PLL2_Config>
 8004606:	4603      	mov	r3, r0
 8004608:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800460c:	e00f      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800460e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004612:	3328      	adds	r3, #40	@ 0x28
 8004614:	2102      	movs	r1, #2
 8004616:	4618      	mov	r0, r3
 8004618:	f001 fccc 	bl	8005fb4 <RCCEx_PLL3_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004622:	e004      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800462a:	e000      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800462c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800462e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004636:	4b98      	ldr	r3, [pc, #608]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800463a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800463e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004644:	4a94      	ldr	r2, [pc, #592]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004646:	430b      	orrs	r3, r1
 8004648:	6513      	str	r3, [r2, #80]	@ 0x50
 800464a:	e003      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004650:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004660:	f04f 0900 	mov.w	r9, #0
 8004664:	ea58 0309 	orrs.w	r3, r8, r9
 8004668:	d047      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800466a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800466e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004670:	2b04      	cmp	r3, #4
 8004672:	d82a      	bhi.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004674:	a201      	add	r2, pc, #4	@ (adr r2, 800467c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467a:	bf00      	nop
 800467c:	08004691 	.word	0x08004691
 8004680:	0800469f 	.word	0x0800469f
 8004684:	080046b5 	.word	0x080046b5
 8004688:	080046d3 	.word	0x080046d3
 800468c:	080046d3 	.word	0x080046d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004690:	4b81      	ldr	r3, [pc, #516]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	4a80      	ldr	r2, [pc, #512]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800469a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800469c:	e01a      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800469e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a2:	3308      	adds	r3, #8
 80046a4:	2100      	movs	r1, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 fbd2 	bl	8005e50 <RCCEx_PLL2_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046b2:	e00f      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046b8:	3328      	adds	r3, #40	@ 0x28
 80046ba:	2100      	movs	r1, #0
 80046bc:	4618      	mov	r0, r3
 80046be:	f001 fc79 	bl	8005fb4 <RCCEx_PLL3_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046c8:	e004      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046d0:	e000      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80046d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10a      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046dc:	4b6e      	ldr	r3, [pc, #440]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e0:	f023 0107 	bic.w	r1, r3, #7
 80046e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ea:	4a6b      	ldr	r2, [pc, #428]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046ec:	430b      	orrs	r3, r1
 80046ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80046f0:	e003      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80046fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004706:	f04f 0b00 	mov.w	fp, #0
 800470a:	ea5a 030b 	orrs.w	r3, sl, fp
 800470e:	d05b      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004714:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004718:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800471c:	d03b      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800471e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004722:	d834      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004724:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004728:	d037      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800472a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800472e:	d82e      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004730:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004734:	d033      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004736:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800473a:	d828      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800473c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004740:	d01a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004742:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004746:	d822      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800474c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004750:	d007      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004752:	e01c      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004754:	4b50      	ldr	r3, [pc, #320]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	4a4f      	ldr	r2, [pc, #316]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800475a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800475e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004760:	e01e      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004766:	3308      	adds	r3, #8
 8004768:	2100      	movs	r1, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f001 fb70 	bl	8005e50 <RCCEx_PLL2_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004776:	e013      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800477c:	3328      	adds	r3, #40	@ 0x28
 800477e:	2100      	movs	r1, #0
 8004780:	4618      	mov	r0, r3
 8004782:	f001 fc17 	bl	8005fb4 <RCCEx_PLL3_Config>
 8004786:	4603      	mov	r3, r0
 8004788:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800478c:	e008      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004794:	e004      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004796:	bf00      	nop
 8004798:	e002      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800479a:	bf00      	nop
 800479c:	e000      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800479e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10b      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80047a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ac:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80047b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047b8:	4a37      	ldr	r2, [pc, #220]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047ba:	430b      	orrs	r3, r1
 80047bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80047be:	e003      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80047c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80047d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80047d8:	2300      	movs	r3, #0
 80047da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80047de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80047e2:	460b      	mov	r3, r1
 80047e4:	4313      	orrs	r3, r2
 80047e6:	d05d      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80047e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80047f0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80047f4:	d03b      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80047f6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80047fa:	d834      	bhi.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80047fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004800:	d037      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004802:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004806:	d82e      	bhi.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004808:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800480c:	d033      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800480e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004812:	d828      	bhi.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004814:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004818:	d01a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800481a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800481e:	d822      	bhi.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004828:	d007      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800482a:	e01c      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800482c:	4b1a      	ldr	r3, [pc, #104]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800482e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004830:	4a19      	ldr	r2, [pc, #100]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004836:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004838:	e01e      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800483a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800483e:	3308      	adds	r3, #8
 8004840:	2100      	movs	r1, #0
 8004842:	4618      	mov	r0, r3
 8004844:	f001 fb04 	bl	8005e50 <RCCEx_PLL2_Config>
 8004848:	4603      	mov	r3, r0
 800484a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800484e:	e013      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004854:	3328      	adds	r3, #40	@ 0x28
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f001 fbab 	bl	8005fb4 <RCCEx_PLL3_Config>
 800485e:	4603      	mov	r3, r0
 8004860:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004864:	e008      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800486c:	e004      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800486e:	bf00      	nop
 8004870:	e002      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004872:	bf00      	nop
 8004874:	e000      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10d      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004880:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004884:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800488c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004890:	4a01      	ldr	r2, [pc, #4]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004892:	430b      	orrs	r3, r1
 8004894:	6593      	str	r3, [r2, #88]	@ 0x58
 8004896:	e005      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80048a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80048b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80048b4:	2300      	movs	r3, #0
 80048b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80048ba:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80048be:	460b      	mov	r3, r1
 80048c0:	4313      	orrs	r3, r2
 80048c2:	d03a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80048c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ca:	2b30      	cmp	r3, #48	@ 0x30
 80048cc:	d01f      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80048ce:	2b30      	cmp	r3, #48	@ 0x30
 80048d0:	d819      	bhi.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d00c      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d815      	bhi.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d019      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80048de:	2b10      	cmp	r3, #16
 80048e0:	d111      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e2:	4baa      	ldr	r3, [pc, #680]	@ (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e6:	4aa9      	ldr	r2, [pc, #676]	@ (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80048ee:	e011      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048f4:	3308      	adds	r3, #8
 80048f6:	2102      	movs	r1, #2
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 faa9 	bl	8005e50 <RCCEx_PLL2_Config>
 80048fe:	4603      	mov	r3, r0
 8004900:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004904:	e006      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800490c:	e002      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800490e:	bf00      	nop
 8004910:	e000      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004914:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800491c:	4b9b      	ldr	r3, [pc, #620]	@ (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800491e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004920:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800492a:	4a98      	ldr	r2, [pc, #608]	@ (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800492c:	430b      	orrs	r3, r1
 800492e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004930:	e003      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004932:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004936:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800493a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004942:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004946:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800494a:	2300      	movs	r3, #0
 800494c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004950:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004954:	460b      	mov	r3, r1
 8004956:	4313      	orrs	r3, r2
 8004958:	d051      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800495a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800495e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004960:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004964:	d035      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004966:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800496a:	d82e      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800496c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004970:	d031      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004972:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004976:	d828      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004978:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800497c:	d01a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800497e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004982:	d822      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800498c:	d007      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800498e:	e01c      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004990:	4b7e      	ldr	r3, [pc, #504]	@ (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004994:	4a7d      	ldr	r2, [pc, #500]	@ (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800499a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800499c:	e01c      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800499e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049a2:	3308      	adds	r3, #8
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f001 fa52 	bl	8005e50 <RCCEx_PLL2_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049b2:	e011      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049b8:	3328      	adds	r3, #40	@ 0x28
 80049ba:	2100      	movs	r1, #0
 80049bc:	4618      	mov	r0, r3
 80049be:	f001 faf9 	bl	8005fb4 <RCCEx_PLL3_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049c8:	e006      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049d0:	e002      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80049d2:	bf00      	nop
 80049d4:	e000      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80049d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049e0:	4b6a      	ldr	r3, [pc, #424]	@ (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80049e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80049e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ee:	4a67      	ldr	r2, [pc, #412]	@ (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80049f0:	430b      	orrs	r3, r1
 80049f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80049f4:	e003      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004a0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a14:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	d053      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a28:	d033      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004a2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a2e:	d82c      	bhi.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004a30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a34:	d02f      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004a36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a3a:	d826      	bhi.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004a3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a40:	d02b      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004a42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a46:	d820      	bhi.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004a48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a4c:	d012      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004a4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a52:	d81a      	bhi.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d022      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a5c:	d115      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a62:	3308      	adds	r3, #8
 8004a64:	2101      	movs	r1, #1
 8004a66:	4618      	mov	r0, r3
 8004a68:	f001 f9f2 	bl	8005e50 <RCCEx_PLL2_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a72:	e015      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a78:	3328      	adds	r3, #40	@ 0x28
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f001 fa99 	bl	8005fb4 <RCCEx_PLL3_Config>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a88:	e00a      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a90:	e006      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a92:	bf00      	nop
 8004a94:	e004      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a96:	bf00      	nop
 8004a98:	e002      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004aa8:	4b38      	ldr	r3, [pc, #224]	@ (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab6:	4a35      	ldr	r2, [pc, #212]	@ (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6513      	str	r3, [r2, #80]	@ 0x50
 8004abc:	e003      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ac2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004adc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	d058      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004af2:	d033      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004af8:	d82c      	bhi.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004afe:	d02f      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b04:	d826      	bhi.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004b06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b0a:	d02b      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004b0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b10:	d820      	bhi.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004b12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b16:	d012      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004b18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b1c:	d81a      	bhi.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d022      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004b22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b26:	d115      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	2101      	movs	r1, #1
 8004b30:	4618      	mov	r0, r3
 8004b32:	f001 f98d 	bl	8005e50 <RCCEx_PLL2_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b3c:	e015      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b42:	3328      	adds	r3, #40	@ 0x28
 8004b44:	2101      	movs	r1, #1
 8004b46:	4618      	mov	r0, r3
 8004b48:	f001 fa34 	bl	8005fb4 <RCCEx_PLL3_Config>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b52:	e00a      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b5a:	e006      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004b5c:	bf00      	nop
 8004b5e:	e004      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004b60:	bf00      	nop
 8004b62:	e002      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004b64:	bf00      	nop
 8004b66:	e000      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10e      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b72:	4b06      	ldr	r3, [pc, #24]	@ (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b76:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b82:	4a02      	ldr	r2, [pc, #8]	@ (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b84:	430b      	orrs	r3, r1
 8004b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b88:	e006      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004b8a:	bf00      	nop
 8004b8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004bae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	d037      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bc2:	d00e      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bc8:	d816      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d018      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004bce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bd2:	d111      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bd4:	4bc4      	ldr	r3, [pc, #784]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	4ac3      	ldr	r2, [pc, #780]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004be0:	e00f      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be6:	3308      	adds	r3, #8
 8004be8:	2101      	movs	r1, #1
 8004bea:	4618      	mov	r0, r3
 8004bec:	f001 f930 	bl	8005e50 <RCCEx_PLL2_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004bf6:	e004      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bfe:	e000      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10a      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c0a:	4bb7      	ldr	r3, [pc, #732]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c0e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c18:	4ab3      	ldr	r2, [pc, #716]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c1e:	e003      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004c34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c3e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004c42:	460b      	mov	r3, r1
 8004c44:	4313      	orrs	r3, r2
 8004c46:	d039      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d81c      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004c52:	a201      	add	r2, pc, #4	@ (adr r2, 8004c58 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c58:	08004c95 	.word	0x08004c95
 8004c5c:	08004c69 	.word	0x08004c69
 8004c60:	08004c77 	.word	0x08004c77
 8004c64:	08004c95 	.word	0x08004c95
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c68:	4b9f      	ldr	r3, [pc, #636]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6c:	4a9e      	ldr	r2, [pc, #632]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c74:	e00f      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	2102      	movs	r1, #2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 f8e6 	bl	8005e50 <RCCEx_PLL2_Config>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c8a:	e004      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c92:	e000      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c9e:	4b92      	ldr	r3, [pc, #584]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ca2:	f023 0103 	bic.w	r1, r3, #3
 8004ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cac:	4a8e      	ldr	r2, [pc, #568]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cb2:	e003      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004cd2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f000 8099 	beq.w	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cde:	4b83      	ldr	r3, [pc, #524]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a82      	ldr	r2, [pc, #520]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cea:	f7fd f953 	bl	8001f94 <HAL_GetTick>
 8004cee:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cf2:	e00b      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf4:	f7fd f94e 	bl	8001f94 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b64      	cmp	r3, #100	@ 0x64
 8004d02:	d903      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d0a:	e005      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d0c:	4b77      	ldr	r3, [pc, #476]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0ed      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004d18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d173      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d20:	4b71      	ldr	r3, [pc, #452]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d2c:	4053      	eors	r3, r2
 8004d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d015      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d36:	4b6c      	ldr	r3, [pc, #432]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d3e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d42:	4b69      	ldr	r3, [pc, #420]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d46:	4a68      	ldr	r2, [pc, #416]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d4c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d4e:	4b66      	ldr	r3, [pc, #408]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d52:	4a65      	ldr	r2, [pc, #404]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d58:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004d5a:	4a63      	ldr	r2, [pc, #396]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d60:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d6e:	d118      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d70:	f7fd f910 	bl	8001f94 <HAL_GetTick>
 8004d74:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d78:	e00d      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fd f90b 	bl	8001f94 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004d84:	1ad2      	subs	r2, r2, r3
 8004d86:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d903      	bls.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004d94:	e005      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d96:	4b54      	ldr	r3, [pc, #336]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0eb      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004da2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d129      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004db6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dba:	d10e      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004dbc:	4b4a      	ldr	r3, [pc, #296]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004dcc:	091a      	lsrs	r2, r3, #4
 8004dce:	4b48      	ldr	r3, [pc, #288]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	4a45      	ldr	r2, [pc, #276]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	6113      	str	r3, [r2, #16]
 8004dd8:	e005      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004dda:	4b43      	ldr	r3, [pc, #268]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	4a42      	ldr	r2, [pc, #264]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004de0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004de4:	6113      	str	r3, [r2, #16]
 8004de6:	4b40      	ldr	r3, [pc, #256]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004de8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df6:	4a3c      	ldr	r2, [pc, #240]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dfc:	e008      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004e06:	e003      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f002 0301 	and.w	r3, r2, #1
 8004e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e20:	2300      	movs	r3, #0
 8004e22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004e26:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f000 808f 	beq.w	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e38:	2b28      	cmp	r3, #40	@ 0x28
 8004e3a:	d871      	bhi.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e44 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004f29 	.word	0x08004f29
 8004e48:	08004f21 	.word	0x08004f21
 8004e4c:	08004f21 	.word	0x08004f21
 8004e50:	08004f21 	.word	0x08004f21
 8004e54:	08004f21 	.word	0x08004f21
 8004e58:	08004f21 	.word	0x08004f21
 8004e5c:	08004f21 	.word	0x08004f21
 8004e60:	08004f21 	.word	0x08004f21
 8004e64:	08004ef5 	.word	0x08004ef5
 8004e68:	08004f21 	.word	0x08004f21
 8004e6c:	08004f21 	.word	0x08004f21
 8004e70:	08004f21 	.word	0x08004f21
 8004e74:	08004f21 	.word	0x08004f21
 8004e78:	08004f21 	.word	0x08004f21
 8004e7c:	08004f21 	.word	0x08004f21
 8004e80:	08004f21 	.word	0x08004f21
 8004e84:	08004f0b 	.word	0x08004f0b
 8004e88:	08004f21 	.word	0x08004f21
 8004e8c:	08004f21 	.word	0x08004f21
 8004e90:	08004f21 	.word	0x08004f21
 8004e94:	08004f21 	.word	0x08004f21
 8004e98:	08004f21 	.word	0x08004f21
 8004e9c:	08004f21 	.word	0x08004f21
 8004ea0:	08004f21 	.word	0x08004f21
 8004ea4:	08004f29 	.word	0x08004f29
 8004ea8:	08004f21 	.word	0x08004f21
 8004eac:	08004f21 	.word	0x08004f21
 8004eb0:	08004f21 	.word	0x08004f21
 8004eb4:	08004f21 	.word	0x08004f21
 8004eb8:	08004f21 	.word	0x08004f21
 8004ebc:	08004f21 	.word	0x08004f21
 8004ec0:	08004f21 	.word	0x08004f21
 8004ec4:	08004f29 	.word	0x08004f29
 8004ec8:	08004f21 	.word	0x08004f21
 8004ecc:	08004f21 	.word	0x08004f21
 8004ed0:	08004f21 	.word	0x08004f21
 8004ed4:	08004f21 	.word	0x08004f21
 8004ed8:	08004f21 	.word	0x08004f21
 8004edc:	08004f21 	.word	0x08004f21
 8004ee0:	08004f21 	.word	0x08004f21
 8004ee4:	08004f29 	.word	0x08004f29
 8004ee8:	58024400 	.word	0x58024400
 8004eec:	58024800 	.word	0x58024800
 8004ef0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef8:	3308      	adds	r3, #8
 8004efa:	2101      	movs	r1, #1
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 ffa7 	bl	8005e50 <RCCEx_PLL2_Config>
 8004f02:	4603      	mov	r3, r0
 8004f04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f08:	e00f      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0e:	3328      	adds	r3, #40	@ 0x28
 8004f10:	2101      	movs	r1, #1
 8004f12:	4618      	mov	r0, r3
 8004f14:	f001 f84e 	bl	8005fb4 <RCCEx_PLL3_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f1e:	e004      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f26:	e000      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10a      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f32:	4bbf      	ldr	r3, [pc, #764]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f36:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f40:	4abb      	ldr	r2, [pc, #748]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f42:	430b      	orrs	r3, r1
 8004f44:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f46:	e003      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	f002 0302 	and.w	r3, r2, #2
 8004f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f60:	2300      	movs	r3, #0
 8004f62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	d041      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f76:	2b05      	cmp	r3, #5
 8004f78:	d824      	bhi.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f80 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f80:	08004fcd 	.word	0x08004fcd
 8004f84:	08004f99 	.word	0x08004f99
 8004f88:	08004faf 	.word	0x08004faf
 8004f8c:	08004fcd 	.word	0x08004fcd
 8004f90:	08004fcd 	.word	0x08004fcd
 8004f94:	08004fcd 	.word	0x08004fcd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f9c:	3308      	adds	r3, #8
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 ff55 	bl	8005e50 <RCCEx_PLL2_Config>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fac:	e00f      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fb2:	3328      	adds	r3, #40	@ 0x28
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fffc 	bl	8005fb4 <RCCEx_PLL3_Config>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fc2:	e004      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fca:	e000      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10a      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004fd6:	4b96      	ldr	r3, [pc, #600]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fda:	f023 0107 	bic.w	r1, r3, #7
 8004fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fe4:	4a92      	ldr	r2, [pc, #584]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004fe6:	430b      	orrs	r3, r1
 8004fe8:	6553      	str	r3, [r2, #84]	@ 0x54
 8004fea:	e003      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ff0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f002 0304 	and.w	r3, r2, #4
 8005000:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005004:	2300      	movs	r3, #0
 8005006:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800500a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800500e:	460b      	mov	r3, r1
 8005010:	4313      	orrs	r3, r2
 8005012:	d044      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501c:	2b05      	cmp	r3, #5
 800501e:	d825      	bhi.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005020:	a201      	add	r2, pc, #4	@ (adr r2, 8005028 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005026:	bf00      	nop
 8005028:	08005075 	.word	0x08005075
 800502c:	08005041 	.word	0x08005041
 8005030:	08005057 	.word	0x08005057
 8005034:	08005075 	.word	0x08005075
 8005038:	08005075 	.word	0x08005075
 800503c:	08005075 	.word	0x08005075
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005044:	3308      	adds	r3, #8
 8005046:	2101      	movs	r1, #1
 8005048:	4618      	mov	r0, r3
 800504a:	f000 ff01 	bl	8005e50 <RCCEx_PLL2_Config>
 800504e:	4603      	mov	r3, r0
 8005050:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005054:	e00f      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800505a:	3328      	adds	r3, #40	@ 0x28
 800505c:	2101      	movs	r1, #1
 800505e:	4618      	mov	r0, r3
 8005060:	f000 ffa8 	bl	8005fb4 <RCCEx_PLL3_Config>
 8005064:	4603      	mov	r3, r0
 8005066:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800506a:	e004      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005072:	e000      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005076:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10b      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800507e:	4b6c      	ldr	r3, [pc, #432]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005082:	f023 0107 	bic.w	r1, r3, #7
 8005086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508e:	4a68      	ldr	r2, [pc, #416]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005090:	430b      	orrs	r3, r1
 8005092:	6593      	str	r3, [r2, #88]	@ 0x58
 8005094:	e003      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005096:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800509a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800509e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f002 0320 	and.w	r3, r2, #32
 80050aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050ae:	2300      	movs	r3, #0
 80050b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80050b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4313      	orrs	r3, r2
 80050bc:	d055      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80050be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050ca:	d033      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80050cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050d0:	d82c      	bhi.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80050d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d6:	d02f      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80050d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050dc:	d826      	bhi.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80050de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80050e2:	d02b      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80050e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80050e8:	d820      	bhi.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80050ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050ee:	d012      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80050f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050f4:	d81a      	bhi.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d022      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80050fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050fe:	d115      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005104:	3308      	adds	r3, #8
 8005106:	2100      	movs	r1, #0
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fea1 	bl	8005e50 <RCCEx_PLL2_Config>
 800510e:	4603      	mov	r3, r0
 8005110:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005114:	e015      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800511a:	3328      	adds	r3, #40	@ 0x28
 800511c:	2102      	movs	r1, #2
 800511e:	4618      	mov	r0, r3
 8005120:	f000 ff48 	bl	8005fb4 <RCCEx_PLL3_Config>
 8005124:	4603      	mov	r3, r0
 8005126:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800512a:	e00a      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005132:	e006      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005134:	bf00      	nop
 8005136:	e004      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005138:	bf00      	nop
 800513a:	e002      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800513c:	bf00      	nop
 800513e:	e000      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005142:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10b      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800514a:	4b39      	ldr	r3, [pc, #228]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800514c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800514e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005156:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800515a:	4a35      	ldr	r2, [pc, #212]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800515c:	430b      	orrs	r3, r1
 800515e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005160:	e003      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005162:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005166:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800516a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800516e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005172:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005176:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800517a:	2300      	movs	r3, #0
 800517c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005180:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005184:	460b      	mov	r3, r1
 8005186:	4313      	orrs	r3, r2
 8005188:	d058      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800518a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800518e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005192:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005196:	d033      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005198:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800519c:	d82c      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800519e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051a2:	d02f      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80051a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051a8:	d826      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80051aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051ae:	d02b      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80051b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051b4:	d820      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80051b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051ba:	d012      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80051bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051c0:	d81a      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d022      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80051c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ca:	d115      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d0:	3308      	adds	r3, #8
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fe3b 	bl	8005e50 <RCCEx_PLL2_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80051e0:	e015      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e6:	3328      	adds	r3, #40	@ 0x28
 80051e8:	2102      	movs	r1, #2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fee2 	bl	8005fb4 <RCCEx_PLL3_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80051f6:	e00a      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051fe:	e006      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005200:	bf00      	nop
 8005202:	e004      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005204:	bf00      	nop
 8005206:	e002      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005208:	bf00      	nop
 800520a:	e000      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800520c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800520e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10e      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005216:	4b06      	ldr	r3, [pc, #24]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800521a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800521e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005222:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005226:	4a02      	ldr	r2, [pc, #8]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005228:	430b      	orrs	r3, r1
 800522a:	6593      	str	r3, [r2, #88]	@ 0x58
 800522c:	e006      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800522e:	bf00      	nop
 8005230:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005234:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005238:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800523c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005248:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800524c:	2300      	movs	r3, #0
 800524e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005252:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005256:	460b      	mov	r3, r1
 8005258:	4313      	orrs	r3, r2
 800525a:	d055      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800525c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005260:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005264:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005268:	d033      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800526a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800526e:	d82c      	bhi.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005274:	d02f      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005276:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800527a:	d826      	bhi.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800527c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005280:	d02b      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005282:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005286:	d820      	bhi.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005288:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800528c:	d012      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800528e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005292:	d81a      	bhi.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d022      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005298:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800529c:	d115      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800529e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a2:	3308      	adds	r3, #8
 80052a4:	2100      	movs	r1, #0
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fdd2 	bl	8005e50 <RCCEx_PLL2_Config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052b2:	e015      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b8:	3328      	adds	r3, #40	@ 0x28
 80052ba:	2102      	movs	r1, #2
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fe79 	bl	8005fb4 <RCCEx_PLL3_Config>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052c8:	e00a      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80052d0:	e006      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80052d2:	bf00      	nop
 80052d4:	e004      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80052d6:	bf00      	nop
 80052d8:	e002      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80052da:	bf00      	nop
 80052dc:	e000      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80052de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10b      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80052e8:	4ba0      	ldr	r3, [pc, #640]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052f8:	4a9c      	ldr	r2, [pc, #624]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052fa:	430b      	orrs	r3, r1
 80052fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80052fe:	e003      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005300:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005304:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f002 0308 	and.w	r3, r2, #8
 8005314:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005318:	2300      	movs	r3, #0
 800531a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800531e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005322:	460b      	mov	r3, r1
 8005324:	4313      	orrs	r3, r2
 8005326:	d01e      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800532c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005334:	d10c      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800533a:	3328      	adds	r3, #40	@ 0x28
 800533c:	2102      	movs	r1, #2
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fe38 	bl	8005fb4 <RCCEx_PLL3_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005350:	4b86      	ldr	r3, [pc, #536]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005354:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800535c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005360:	4a82      	ldr	r2, [pc, #520]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005362:	430b      	orrs	r3, r1
 8005364:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f002 0310 	and.w	r3, r2, #16
 8005372:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005376:	2300      	movs	r3, #0
 8005378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800537c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005380:	460b      	mov	r3, r1
 8005382:	4313      	orrs	r3, r2
 8005384:	d01e      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800538e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005392:	d10c      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005398:	3328      	adds	r3, #40	@ 0x28
 800539a:	2102      	movs	r1, #2
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fe09 	bl	8005fb4 <RCCEx_PLL3_Config>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053ae:	4b6f      	ldr	r3, [pc, #444]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053be:	4a6b      	ldr	r2, [pc, #428]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053c0:	430b      	orrs	r3, r1
 80053c2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80053d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053d2:	2300      	movs	r3, #0
 80053d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053d6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80053da:	460b      	mov	r3, r1
 80053dc:	4313      	orrs	r3, r2
 80053de:	d03e      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80053e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053ec:	d022      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80053ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053f2:	d81b      	bhi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053fc:	d00b      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80053fe:	e015      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005404:	3308      	adds	r3, #8
 8005406:	2100      	movs	r1, #0
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fd21 	bl	8005e50 <RCCEx_PLL2_Config>
 800540e:	4603      	mov	r3, r0
 8005410:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005414:	e00f      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800541a:	3328      	adds	r3, #40	@ 0x28
 800541c:	2102      	movs	r1, #2
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fdc8 	bl	8005fb4 <RCCEx_PLL3_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800542a:	e004      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005432:	e000      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005436:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10b      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800543e:	4b4b      	ldr	r3, [pc, #300]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005442:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800544a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800544e:	4a47      	ldr	r2, [pc, #284]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005450:	430b      	orrs	r3, r1
 8005452:	6593      	str	r3, [r2, #88]	@ 0x58
 8005454:	e003      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005456:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800545a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800545e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800546a:	673b      	str	r3, [r7, #112]	@ 0x70
 800546c:	2300      	movs	r3, #0
 800546e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005470:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005474:	460b      	mov	r3, r1
 8005476:	4313      	orrs	r3, r2
 8005478:	d03b      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800547a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800547e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005482:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005486:	d01f      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005488:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800548c:	d818      	bhi.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800548e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005492:	d003      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005494:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005498:	d007      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800549a:	e011      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800549c:	4b33      	ldr	r3, [pc, #204]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800549e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a0:	4a32      	ldr	r2, [pc, #200]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80054a8:	e00f      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ae:	3328      	adds	r3, #40	@ 0x28
 80054b0:	2101      	movs	r1, #1
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fd7e 	bl	8005fb4 <RCCEx_PLL3_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80054be:	e004      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054c6:	e000      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80054c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10b      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054d2:	4b26      	ldr	r3, [pc, #152]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80054da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054e2:	4a22      	ldr	r2, [pc, #136]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054e4:	430b      	orrs	r3, r1
 80054e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80054e8:	e003      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80054f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80054fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005500:	2300      	movs	r3, #0
 8005502:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005504:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005508:	460b      	mov	r3, r1
 800550a:	4313      	orrs	r3, r2
 800550c:	d034      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800550e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800551c:	d007      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800551e:	e011      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005520:	4b12      	ldr	r3, [pc, #72]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005524:	4a11      	ldr	r2, [pc, #68]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800552a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800552c:	e00e      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800552e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005532:	3308      	adds	r3, #8
 8005534:	2102      	movs	r1, #2
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fc8a 	bl	8005e50 <RCCEx_PLL2_Config>
 800553c:	4603      	mov	r3, r0
 800553e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005542:	e003      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800554a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800554c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10d      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005554:	4b05      	ldr	r3, [pc, #20]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005558:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800555c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005562:	4a02      	ldr	r2, [pc, #8]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005564:	430b      	orrs	r3, r1
 8005566:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005568:	e006      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800556a:	bf00      	nop
 800556c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005570:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005574:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005584:	663b      	str	r3, [r7, #96]	@ 0x60
 8005586:	2300      	movs	r3, #0
 8005588:	667b      	str	r3, [r7, #100]	@ 0x64
 800558a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800558e:	460b      	mov	r3, r1
 8005590:	4313      	orrs	r3, r2
 8005592:	d00c      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005598:	3328      	adds	r3, #40	@ 0x28
 800559a:	2102      	movs	r1, #2
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fd09 	bl	8005fb4 <RCCEx_PLL3_Config>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80055ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055bc:	2300      	movs	r3, #0
 80055be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055c0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80055c4:	460b      	mov	r3, r1
 80055c6:	4313      	orrs	r3, r2
 80055c8:	d036      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80055ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055d4:	d018      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80055d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055da:	d811      	bhi.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80055dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055e0:	d014      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80055e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055e6:	d80b      	bhi.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d011      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80055ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055f0:	d106      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f2:	4bb7      	ldr	r3, [pc, #732]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f6:	4ab6      	ldr	r2, [pc, #728]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80055fe:	e008      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005606:	e004      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005608:	bf00      	nop
 800560a:	e002      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800560c:	bf00      	nop
 800560e:	e000      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005612:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10a      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800561a:	4bad      	ldr	r3, [pc, #692]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800561c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005626:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005628:	4aa9      	ldr	r2, [pc, #676]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800562a:	430b      	orrs	r3, r1
 800562c:	6553      	str	r3, [r2, #84]	@ 0x54
 800562e:	e003      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005630:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005634:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005644:	653b      	str	r3, [r7, #80]	@ 0x50
 8005646:	2300      	movs	r3, #0
 8005648:	657b      	str	r3, [r7, #84]	@ 0x54
 800564a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800564e:	460b      	mov	r3, r1
 8005650:	4313      	orrs	r3, r2
 8005652:	d009      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005654:	4b9e      	ldr	r3, [pc, #632]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005658:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800565c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005662:	4a9b      	ldr	r2, [pc, #620]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005664:	430b      	orrs	r3, r1
 8005666:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800566c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005670:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005674:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005676:	2300      	movs	r3, #0
 8005678:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800567a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800567e:	460b      	mov	r3, r1
 8005680:	4313      	orrs	r3, r2
 8005682:	d009      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005684:	4b92      	ldr	r3, [pc, #584]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005688:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800568c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005690:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005692:	4a8f      	ldr	r2, [pc, #572]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005694:	430b      	orrs	r3, r1
 8005696:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80056a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80056a6:	2300      	movs	r3, #0
 80056a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80056aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80056ae:	460b      	mov	r3, r1
 80056b0:	4313      	orrs	r3, r2
 80056b2:	d00e      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056b4:	4b86      	ldr	r3, [pc, #536]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	4a85      	ldr	r2, [pc, #532]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80056be:	6113      	str	r3, [r2, #16]
 80056c0:	4b83      	ldr	r3, [pc, #524]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056c2:	6919      	ldr	r1, [r3, #16]
 80056c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056cc:	4a80      	ldr	r2, [pc, #512]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056ce:	430b      	orrs	r3, r1
 80056d0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80056d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056da:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80056de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056e0:	2300      	movs	r3, #0
 80056e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80056e8:	460b      	mov	r3, r1
 80056ea:	4313      	orrs	r3, r2
 80056ec:	d009      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80056ee:	4b78      	ldr	r3, [pc, #480]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80056f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056fc:	4a74      	ldr	r2, [pc, #464]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056fe:	430b      	orrs	r3, r1
 8005700:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800570e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005710:	2300      	movs	r3, #0
 8005712:	637b      	str	r3, [r7, #52]	@ 0x34
 8005714:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005718:	460b      	mov	r3, r1
 800571a:	4313      	orrs	r3, r2
 800571c:	d00a      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800571e:	4b6c      	ldr	r3, [pc, #432]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005722:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800572a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572e:	4a68      	ldr	r2, [pc, #416]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005730:	430b      	orrs	r3, r1
 8005732:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	2100      	movs	r1, #0
 800573e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005746:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800574a:	460b      	mov	r3, r1
 800574c:	4313      	orrs	r3, r2
 800574e:	d011      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005754:	3308      	adds	r3, #8
 8005756:	2100      	movs	r1, #0
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fb79 	bl	8005e50 <RCCEx_PLL2_Config>
 800575e:	4603      	mov	r3, r0
 8005760:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005764:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005770:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	2100      	movs	r1, #0
 800577e:	6239      	str	r1, [r7, #32]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24
 8005786:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800578a:	460b      	mov	r3, r1
 800578c:	4313      	orrs	r3, r2
 800578e:	d011      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005794:	3308      	adds	r3, #8
 8005796:	2101      	movs	r1, #1
 8005798:	4618      	mov	r0, r3
 800579a:	f000 fb59 	bl	8005e50 <RCCEx_PLL2_Config>
 800579e:	4603      	mov	r3, r0
 80057a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80057a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80057b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057bc:	2100      	movs	r1, #0
 80057be:	61b9      	str	r1, [r7, #24]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	61fb      	str	r3, [r7, #28]
 80057c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80057ca:	460b      	mov	r3, r1
 80057cc:	4313      	orrs	r3, r2
 80057ce:	d011      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d4:	3308      	adds	r3, #8
 80057d6:	2102      	movs	r1, #2
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fb39 	bl	8005e50 <RCCEx_PLL2_Config>
 80057de:	4603      	mov	r3, r0
 80057e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80057e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80057f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fc:	2100      	movs	r1, #0
 80057fe:	6139      	str	r1, [r7, #16]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800580a:	460b      	mov	r3, r1
 800580c:	4313      	orrs	r3, r2
 800580e:	d011      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005814:	3328      	adds	r3, #40	@ 0x28
 8005816:	2100      	movs	r1, #0
 8005818:	4618      	mov	r0, r3
 800581a:	f000 fbcb 	bl	8005fb4 <RCCEx_PLL3_Config>
 800581e:	4603      	mov	r3, r0
 8005820:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005824:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005830:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	2100      	movs	r1, #0
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800584a:	460b      	mov	r3, r1
 800584c:	4313      	orrs	r3, r2
 800584e:	d011      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005854:	3328      	adds	r3, #40	@ 0x28
 8005856:	2101      	movs	r1, #1
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fbab 	bl	8005fb4 <RCCEx_PLL3_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005864:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005870:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	2100      	movs	r1, #0
 800587e:	6039      	str	r1, [r7, #0]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	607b      	str	r3, [r7, #4]
 8005886:	e9d7 1200 	ldrd	r1, r2, [r7]
 800588a:	460b      	mov	r3, r1
 800588c:	4313      	orrs	r3, r2
 800588e:	d011      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005894:	3328      	adds	r3, #40	@ 0x28
 8005896:	2102      	movs	r1, #2
 8005898:	4618      	mov	r0, r3
 800589a:	f000 fb8b 	bl	8005fb4 <RCCEx_PLL3_Config>
 800589e:	4603      	mov	r3, r0
 80058a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80058a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80058b4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	e000      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80058c8:	46bd      	mov	sp, r7
 80058ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ce:	bf00      	nop
 80058d0:	58024400 	.word	0x58024400

080058d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80058d8:	f7fe fe00 	bl	80044dc <HAL_RCC_GetHCLKFreq>
 80058dc:	4602      	mov	r2, r0
 80058de:	4b06      	ldr	r3, [pc, #24]	@ (80058f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	091b      	lsrs	r3, r3, #4
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	4904      	ldr	r1, [pc, #16]	@ (80058fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80058ea:	5ccb      	ldrb	r3, [r1, r3]
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	58024400 	.word	0x58024400
 80058fc:	08007bf8 	.word	0x08007bf8

08005900 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005900:	b480      	push	{r7}
 8005902:	b089      	sub	sp, #36	@ 0x24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005908:	4ba1      	ldr	r3, [pc, #644]	@ (8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800590a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590c:	f003 0303 	and.w	r3, r3, #3
 8005910:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005912:	4b9f      	ldr	r3, [pc, #636]	@ (8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005916:	0b1b      	lsrs	r3, r3, #12
 8005918:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800591c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800591e:	4b9c      	ldr	r3, [pc, #624]	@ (8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005922:	091b      	lsrs	r3, r3, #4
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800592a:	4b99      	ldr	r3, [pc, #612]	@ (8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800592c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592e:	08db      	lsrs	r3, r3, #3
 8005930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	fb02 f303 	mul.w	r3, r2, r3
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005942:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8111 	beq.w	8005b70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2b02      	cmp	r3, #2
 8005952:	f000 8083 	beq.w	8005a5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	2b02      	cmp	r3, #2
 800595a:	f200 80a1 	bhi.w	8005aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d056      	beq.n	8005a18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800596a:	e099      	b.n	8005aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800596c:	4b88      	ldr	r3, [pc, #544]	@ (8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b00      	cmp	r3, #0
 8005976:	d02d      	beq.n	80059d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005978:	4b85      	ldr	r3, [pc, #532]	@ (8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	08db      	lsrs	r3, r3, #3
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	4a84      	ldr	r2, [pc, #528]	@ (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005984:	fa22 f303 	lsr.w	r3, r2, r3
 8005988:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	ee07 3a90 	vmov	s15, r3
 8005990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	ee07 3a90 	vmov	s15, r3
 800599a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a2:	4b7b      	ldr	r3, [pc, #492]	@ (8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059aa:	ee07 3a90 	vmov	s15, r3
 80059ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80059d2:	e087      	b.n	8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80059e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a16:	e065      	b.n	8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2a:	4b59      	ldr	r3, [pc, #356]	@ (8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a5a:	e043      	b.n	8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a6e:	4b48      	ldr	r3, [pc, #288]	@ (8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a9e:	e021      	b.n	8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aaa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab2:	4b37      	ldr	r3, [pc, #220]	@ (8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ac6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005b98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ae2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae8:	0a5b      	lsrs	r3, r3, #9
 8005aea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005afa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005afe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b0a:	ee17 2a90 	vmov	r2, s15
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b12:	4b1f      	ldr	r3, [pc, #124]	@ (8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b16:	0c1b      	lsrs	r3, r3, #16
 8005b18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b1c:	ee07 3a90 	vmov	s15, r3
 8005b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b38:	ee17 2a90 	vmov	r2, s15
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b40:	4b13      	ldr	r3, [pc, #76]	@ (8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b44:	0e1b      	lsrs	r3, r3, #24
 8005b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b66:	ee17 2a90 	vmov	r2, s15
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b6e:	e008      	b.n	8005b82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	609a      	str	r2, [r3, #8]
}
 8005b82:	bf00      	nop
 8005b84:	3724      	adds	r7, #36	@ 0x24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	58024400 	.word	0x58024400
 8005b94:	03d09000 	.word	0x03d09000
 8005b98:	46000000 	.word	0x46000000
 8005b9c:	4c742400 	.word	0x4c742400
 8005ba0:	4a742400 	.word	0x4a742400
 8005ba4:	4bbebc20 	.word	0x4bbebc20

08005ba8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b089      	sub	sp, #36	@ 0x24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bb0:	4ba1      	ldr	r3, [pc, #644]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb4:	f003 0303 	and.w	r3, r3, #3
 8005bb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005bba:	4b9f      	ldr	r3, [pc, #636]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bbe:	0d1b      	lsrs	r3, r3, #20
 8005bc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005bc6:	4b9c      	ldr	r3, [pc, #624]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bca:	0a1b      	lsrs	r3, r3, #8
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005bd2:	4b99      	ldr	r3, [pc, #612]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd6:	08db      	lsrs	r3, r3, #3
 8005bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	fb02 f303 	mul.w	r3, r2, r3
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 8111 	beq.w	8005e18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	f000 8083 	beq.w	8005d04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	f200 80a1 	bhi.w	8005d48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d056      	beq.n	8005cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c12:	e099      	b.n	8005d48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c14:	4b88      	ldr	r3, [pc, #544]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d02d      	beq.n	8005c7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c20:	4b85      	ldr	r3, [pc, #532]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	08db      	lsrs	r3, r3, #3
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	4a84      	ldr	r2, [pc, #528]	@ (8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	ee07 3a90 	vmov	s15, r3
 8005c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c7a:	e087      	b.n	8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ca2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cbe:	e065      	b.n	8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd2:	4b59      	ldr	r3, [pc, #356]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ce6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d02:	e043      	b.n	8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d16:	4b48      	ldr	r3, [pc, #288]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d46:	e021      	b.n	8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5a:	4b37      	ldr	r3, [pc, #220]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d90:	0a5b      	lsrs	r3, r3, #9
 8005d92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005da2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005db2:	ee17 2a90 	vmov	r2, s15
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005dba:	4b1f      	ldr	r3, [pc, #124]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbe:	0c1b      	lsrs	r3, r3, #16
 8005dc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dc4:	ee07 3a90 	vmov	s15, r3
 8005dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de0:	ee17 2a90 	vmov	r2, s15
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005de8:	4b13      	ldr	r3, [pc, #76]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dec:	0e1b      	lsrs	r3, r3, #24
 8005dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005df2:	ee07 3a90 	vmov	s15, r3
 8005df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e0e:	ee17 2a90 	vmov	r2, s15
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e16:	e008      	b.n	8005e2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	609a      	str	r2, [r3, #8]
}
 8005e2a:	bf00      	nop
 8005e2c:	3724      	adds	r7, #36	@ 0x24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	58024400 	.word	0x58024400
 8005e3c:	03d09000 	.word	0x03d09000
 8005e40:	46000000 	.word	0x46000000
 8005e44:	4c742400 	.word	0x4c742400
 8005e48:	4a742400 	.word	0x4a742400
 8005e4c:	4bbebc20 	.word	0x4bbebc20

08005e50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e5e:	4b53      	ldr	r3, [pc, #332]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d101      	bne.n	8005e6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e099      	b.n	8005fa2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a4e      	ldr	r2, [pc, #312]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005e74:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e7a:	f7fc f88b 	bl	8001f94 <HAL_GetTick>
 8005e7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e80:	e008      	b.n	8005e94 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e82:	f7fc f887 	bl	8001f94 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d901      	bls.n	8005e94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e086      	b.n	8005fa2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e94:	4b45      	ldr	r3, [pc, #276]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1f0      	bne.n	8005e82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ea0:	4b42      	ldr	r3, [pc, #264]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	031b      	lsls	r3, r3, #12
 8005eae:	493f      	ldr	r1, [pc, #252]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	628b      	str	r3, [r1, #40]	@ 0x28
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	025b      	lsls	r3, r3, #9
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	041b      	lsls	r3, r3, #16
 8005ed2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	061b      	lsls	r3, r3, #24
 8005ee0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005ee4:	4931      	ldr	r1, [pc, #196]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005eea:	4b30      	ldr	r3, [pc, #192]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	492d      	ldr	r1, [pc, #180]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005efc:	4b2b      	ldr	r3, [pc, #172]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f00:	f023 0220 	bic.w	r2, r3, #32
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	4928      	ldr	r1, [pc, #160]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f0e:	4b27      	ldr	r3, [pc, #156]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f12:	4a26      	ldr	r2, [pc, #152]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005f14:	f023 0310 	bic.w	r3, r3, #16
 8005f18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f1a:	4b24      	ldr	r3, [pc, #144]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005f1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f1e:	4b24      	ldr	r3, [pc, #144]	@ (8005fb0 <RCCEx_PLL2_Config+0x160>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	69d2      	ldr	r2, [r2, #28]
 8005f26:	00d2      	lsls	r2, r2, #3
 8005f28:	4920      	ldr	r1, [pc, #128]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f32:	4a1e      	ldr	r2, [pc, #120]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005f34:	f043 0310 	orr.w	r3, r3, #16
 8005f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d106      	bne.n	8005f4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f40:	4b1a      	ldr	r3, [pc, #104]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f44:	4a19      	ldr	r2, [pc, #100]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005f46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005f4c:	e00f      	b.n	8005f6e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d106      	bne.n	8005f62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005f54:	4b15      	ldr	r3, [pc, #84]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f58:	4a14      	ldr	r2, [pc, #80]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005f5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005f60:	e005      	b.n	8005f6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005f62:	4b12      	ldr	r3, [pc, #72]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f66:	4a11      	ldr	r2, [pc, #68]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005f68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a0e      	ldr	r2, [pc, #56]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005f74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f7a:	f7fc f80b 	bl	8001f94 <HAL_GetTick>
 8005f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f80:	e008      	b.n	8005f94 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f82:	f7fc f807 	bl	8001f94 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e006      	b.n	8005fa2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f94:	4b05      	ldr	r3, [pc, #20]	@ (8005fac <RCCEx_PLL2_Config+0x15c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0f0      	beq.n	8005f82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	58024400 	.word	0x58024400
 8005fb0:	ffff0007 	.word	0xffff0007

08005fb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005fc2:	4b53      	ldr	r3, [pc, #332]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d101      	bne.n	8005fd2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e099      	b.n	8006106 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005fd2:	4b4f      	ldr	r3, [pc, #316]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a4e      	ldr	r2, [pc, #312]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 8005fd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fde:	f7fb ffd9 	bl	8001f94 <HAL_GetTick>
 8005fe2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fe4:	e008      	b.n	8005ff8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005fe6:	f7fb ffd5 	bl	8001f94 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e086      	b.n	8006106 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ff8:	4b45      	ldr	r3, [pc, #276]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1f0      	bne.n	8005fe6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006004:	4b42      	ldr	r3, [pc, #264]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 8006006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006008:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	051b      	lsls	r3, r3, #20
 8006012:	493f      	ldr	r1, [pc, #252]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 8006014:	4313      	orrs	r3, r2
 8006016:	628b      	str	r3, [r1, #40]	@ 0x28
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	3b01      	subs	r3, #1
 800601e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	3b01      	subs	r3, #1
 8006028:	025b      	lsls	r3, r3, #9
 800602a:	b29b      	uxth	r3, r3
 800602c:	431a      	orrs	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	3b01      	subs	r3, #1
 8006034:	041b      	lsls	r3, r3, #16
 8006036:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	3b01      	subs	r3, #1
 8006042:	061b      	lsls	r3, r3, #24
 8006044:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006048:	4931      	ldr	r1, [pc, #196]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 800604a:	4313      	orrs	r3, r2
 800604c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800604e:	4b30      	ldr	r3, [pc, #192]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 8006050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006052:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	492d      	ldr	r1, [pc, #180]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 800605c:	4313      	orrs	r3, r2
 800605e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006060:	4b2b      	ldr	r3, [pc, #172]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 8006062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006064:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	4928      	ldr	r1, [pc, #160]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 800606e:	4313      	orrs	r3, r2
 8006070:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006072:	4b27      	ldr	r3, [pc, #156]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 8006074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006076:	4a26      	ldr	r2, [pc, #152]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 8006078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800607c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800607e:	4b24      	ldr	r3, [pc, #144]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 8006080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006082:	4b24      	ldr	r3, [pc, #144]	@ (8006114 <RCCEx_PLL3_Config+0x160>)
 8006084:	4013      	ands	r3, r2
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	69d2      	ldr	r2, [r2, #28]
 800608a:	00d2      	lsls	r2, r2, #3
 800608c:	4920      	ldr	r1, [pc, #128]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 800608e:	4313      	orrs	r3, r2
 8006090:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006092:	4b1f      	ldr	r3, [pc, #124]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 8006094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006096:	4a1e      	ldr	r2, [pc, #120]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 8006098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800609c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d106      	bne.n	80060b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80060a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 80060a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a8:	4a19      	ldr	r2, [pc, #100]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 80060aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80060ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80060b0:	e00f      	b.n	80060d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d106      	bne.n	80060c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80060b8:	4b15      	ldr	r3, [pc, #84]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 80060ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060bc:	4a14      	ldr	r2, [pc, #80]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 80060be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80060c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80060c4:	e005      	b.n	80060d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80060c6:	4b12      	ldr	r3, [pc, #72]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 80060c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ca:	4a11      	ldr	r2, [pc, #68]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 80060cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80060d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a0e      	ldr	r2, [pc, #56]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 80060d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060de:	f7fb ff59 	bl	8001f94 <HAL_GetTick>
 80060e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060e4:	e008      	b.n	80060f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80060e6:	f7fb ff55 	bl	8001f94 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d901      	bls.n	80060f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e006      	b.n	8006106 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060f8:	4b05      	ldr	r3, [pc, #20]	@ (8006110 <RCCEx_PLL3_Config+0x15c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0f0      	beq.n	80060e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006104:	7bfb      	ldrb	r3, [r7, #15]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	58024400 	.word	0x58024400
 8006114:	ffff0007 	.word	0xffff0007

08006118 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e10f      	b.n	800634a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a87      	ldr	r2, [pc, #540]	@ (8006354 <HAL_SPI_Init+0x23c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00f      	beq.n	800615a <HAL_SPI_Init+0x42>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a86      	ldr	r2, [pc, #536]	@ (8006358 <HAL_SPI_Init+0x240>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00a      	beq.n	800615a <HAL_SPI_Init+0x42>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a84      	ldr	r2, [pc, #528]	@ (800635c <HAL_SPI_Init+0x244>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d005      	beq.n	800615a <HAL_SPI_Init+0x42>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2b0f      	cmp	r3, #15
 8006154:	d901      	bls.n	800615a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e0f7      	b.n	800634a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f900 	bl	8006360 <SPI_GetPacketSize>
 8006160:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a7b      	ldr	r2, [pc, #492]	@ (8006354 <HAL_SPI_Init+0x23c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00c      	beq.n	8006186 <HAL_SPI_Init+0x6e>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a79      	ldr	r2, [pc, #484]	@ (8006358 <HAL_SPI_Init+0x240>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d007      	beq.n	8006186 <HAL_SPI_Init+0x6e>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a78      	ldr	r2, [pc, #480]	@ (800635c <HAL_SPI_Init+0x244>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d002      	beq.n	8006186 <HAL_SPI_Init+0x6e>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b08      	cmp	r3, #8
 8006184:	d811      	bhi.n	80061aa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800618a:	4a72      	ldr	r2, [pc, #456]	@ (8006354 <HAL_SPI_Init+0x23c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d009      	beq.n	80061a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a70      	ldr	r2, [pc, #448]	@ (8006358 <HAL_SPI_Init+0x240>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d004      	beq.n	80061a4 <HAL_SPI_Init+0x8c>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a6f      	ldr	r2, [pc, #444]	@ (800635c <HAL_SPI_Init+0x244>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d104      	bne.n	80061ae <HAL_SPI_Init+0x96>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b10      	cmp	r3, #16
 80061a8:	d901      	bls.n	80061ae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e0cd      	b.n	800634a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fb f8de 	bl	8001384 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0201 	bic.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80061ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061f4:	d119      	bne.n	800622a <HAL_SPI_Init+0x112>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061fe:	d103      	bne.n	8006208 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006204:	2b00      	cmp	r3, #0
 8006206:	d008      	beq.n	800621a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10c      	bne.n	800622a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006214:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006218:	d107      	bne.n	800622a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006228:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00f      	beq.n	8006256 <HAL_SPI_Init+0x13e>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	2b06      	cmp	r3, #6
 800623c:	d90b      	bls.n	8006256 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	e007      	b.n	8006266 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006264:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69da      	ldr	r2, [r3, #28]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626e:	431a      	orrs	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006278:	ea42 0103 	orr.w	r1, r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68da      	ldr	r2, [r3, #12]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	431a      	orrs	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ba:	431a      	orrs	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	431a      	orrs	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062c6:	ea42 0103 	orr.w	r1, r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d113      	bne.n	8006306 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006304:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0201 	bic.w	r2, r2, #1
 8006314:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	40013000 	.word	0x40013000
 8006358:	40003800 	.word	0x40003800
 800635c:	40003c00 	.word	0x40003c00

08006360 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	3301      	adds	r3, #1
 8006370:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	3301      	adds	r3, #1
 8006378:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	3307      	adds	r3, #7
 800637e:	08db      	lsrs	r3, r3, #3
 8006380:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	fb02 f303 	mul.w	r3, r2, r3
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b082      	sub	sp, #8
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e042      	b.n	800642e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d106      	bne.n	80063c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7fb fb7c 	bl	8001ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2224      	movs	r2, #36	@ 0x24
 80063c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0201 	bic.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fe95 	bl	8007110 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f826 	bl	8006438 <UART_SetConfig>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e01b      	b.n	800642e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006404:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006414:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f042 0201 	orr.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 ff14 	bl	8007254 <UART_CheckIdleState>
 800642c:	4603      	mov	r3, r0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
	...

08006438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800643c:	b092      	sub	sp, #72	@ 0x48
 800643e:	af00      	add	r7, sp, #0
 8006440:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	431a      	orrs	r2, r3
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	431a      	orrs	r2, r3
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	4313      	orrs	r3, r2
 800645e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	4bbe      	ldr	r3, [pc, #760]	@ (8006760 <UART_SetConfig+0x328>)
 8006468:	4013      	ands	r3, r2
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	6812      	ldr	r2, [r2, #0]
 800646e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006470:	430b      	orrs	r3, r1
 8006472:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4ab3      	ldr	r2, [pc, #716]	@ (8006764 <UART_SetConfig+0x32c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d004      	beq.n	80064a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064a0:	4313      	orrs	r3, r2
 80064a2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	4baf      	ldr	r3, [pc, #700]	@ (8006768 <UART_SetConfig+0x330>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80064b4:	430b      	orrs	r3, r1
 80064b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064be:	f023 010f 	bic.w	r1, r3, #15
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4aa6      	ldr	r2, [pc, #664]	@ (800676c <UART_SetConfig+0x334>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d177      	bne.n	80065c8 <UART_SetConfig+0x190>
 80064d8:	4ba5      	ldr	r3, [pc, #660]	@ (8006770 <UART_SetConfig+0x338>)
 80064da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064e0:	2b28      	cmp	r3, #40	@ 0x28
 80064e2:	d86d      	bhi.n	80065c0 <UART_SetConfig+0x188>
 80064e4:	a201      	add	r2, pc, #4	@ (adr r2, 80064ec <UART_SetConfig+0xb4>)
 80064e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ea:	bf00      	nop
 80064ec:	08006591 	.word	0x08006591
 80064f0:	080065c1 	.word	0x080065c1
 80064f4:	080065c1 	.word	0x080065c1
 80064f8:	080065c1 	.word	0x080065c1
 80064fc:	080065c1 	.word	0x080065c1
 8006500:	080065c1 	.word	0x080065c1
 8006504:	080065c1 	.word	0x080065c1
 8006508:	080065c1 	.word	0x080065c1
 800650c:	08006599 	.word	0x08006599
 8006510:	080065c1 	.word	0x080065c1
 8006514:	080065c1 	.word	0x080065c1
 8006518:	080065c1 	.word	0x080065c1
 800651c:	080065c1 	.word	0x080065c1
 8006520:	080065c1 	.word	0x080065c1
 8006524:	080065c1 	.word	0x080065c1
 8006528:	080065c1 	.word	0x080065c1
 800652c:	080065a1 	.word	0x080065a1
 8006530:	080065c1 	.word	0x080065c1
 8006534:	080065c1 	.word	0x080065c1
 8006538:	080065c1 	.word	0x080065c1
 800653c:	080065c1 	.word	0x080065c1
 8006540:	080065c1 	.word	0x080065c1
 8006544:	080065c1 	.word	0x080065c1
 8006548:	080065c1 	.word	0x080065c1
 800654c:	080065a9 	.word	0x080065a9
 8006550:	080065c1 	.word	0x080065c1
 8006554:	080065c1 	.word	0x080065c1
 8006558:	080065c1 	.word	0x080065c1
 800655c:	080065c1 	.word	0x080065c1
 8006560:	080065c1 	.word	0x080065c1
 8006564:	080065c1 	.word	0x080065c1
 8006568:	080065c1 	.word	0x080065c1
 800656c:	080065b1 	.word	0x080065b1
 8006570:	080065c1 	.word	0x080065c1
 8006574:	080065c1 	.word	0x080065c1
 8006578:	080065c1 	.word	0x080065c1
 800657c:	080065c1 	.word	0x080065c1
 8006580:	080065c1 	.word	0x080065c1
 8006584:	080065c1 	.word	0x080065c1
 8006588:	080065c1 	.word	0x080065c1
 800658c:	080065b9 	.word	0x080065b9
 8006590:	2301      	movs	r3, #1
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006596:	e326      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006598:	2304      	movs	r3, #4
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659e:	e322      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80065a0:	2308      	movs	r3, #8
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a6:	e31e      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80065a8:	2310      	movs	r3, #16
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ae:	e31a      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80065b0:	2320      	movs	r3, #32
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b6:	e316      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80065b8:	2340      	movs	r3, #64	@ 0x40
 80065ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065be:	e312      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80065c0:	2380      	movs	r3, #128	@ 0x80
 80065c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065c6:	e30e      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a69      	ldr	r2, [pc, #420]	@ (8006774 <UART_SetConfig+0x33c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d130      	bne.n	8006634 <UART_SetConfig+0x1fc>
 80065d2:	4b67      	ldr	r3, [pc, #412]	@ (8006770 <UART_SetConfig+0x338>)
 80065d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	2b05      	cmp	r3, #5
 80065dc:	d826      	bhi.n	800662c <UART_SetConfig+0x1f4>
 80065de:	a201      	add	r2, pc, #4	@ (adr r2, 80065e4 <UART_SetConfig+0x1ac>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	080065fd 	.word	0x080065fd
 80065e8:	08006605 	.word	0x08006605
 80065ec:	0800660d 	.word	0x0800660d
 80065f0:	08006615 	.word	0x08006615
 80065f4:	0800661d 	.word	0x0800661d
 80065f8:	08006625 	.word	0x08006625
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006602:	e2f0      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006604:	2304      	movs	r3, #4
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660a:	e2ec      	b.n	8006be6 <UART_SetConfig+0x7ae>
 800660c:	2308      	movs	r3, #8
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006612:	e2e8      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006614:	2310      	movs	r3, #16
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800661a:	e2e4      	b.n	8006be6 <UART_SetConfig+0x7ae>
 800661c:	2320      	movs	r3, #32
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006622:	e2e0      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006624:	2340      	movs	r3, #64	@ 0x40
 8006626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800662a:	e2dc      	b.n	8006be6 <UART_SetConfig+0x7ae>
 800662c:	2380      	movs	r3, #128	@ 0x80
 800662e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006632:	e2d8      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a4f      	ldr	r2, [pc, #316]	@ (8006778 <UART_SetConfig+0x340>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d130      	bne.n	80066a0 <UART_SetConfig+0x268>
 800663e:	4b4c      	ldr	r3, [pc, #304]	@ (8006770 <UART_SetConfig+0x338>)
 8006640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	2b05      	cmp	r3, #5
 8006648:	d826      	bhi.n	8006698 <UART_SetConfig+0x260>
 800664a:	a201      	add	r2, pc, #4	@ (adr r2, 8006650 <UART_SetConfig+0x218>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	08006669 	.word	0x08006669
 8006654:	08006671 	.word	0x08006671
 8006658:	08006679 	.word	0x08006679
 800665c:	08006681 	.word	0x08006681
 8006660:	08006689 	.word	0x08006689
 8006664:	08006691 	.word	0x08006691
 8006668:	2300      	movs	r3, #0
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666e:	e2ba      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006670:	2304      	movs	r3, #4
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006676:	e2b6      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006678:	2308      	movs	r3, #8
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667e:	e2b2      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006680:	2310      	movs	r3, #16
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006686:	e2ae      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006688:	2320      	movs	r3, #32
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668e:	e2aa      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006690:	2340      	movs	r3, #64	@ 0x40
 8006692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006696:	e2a6      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006698:	2380      	movs	r3, #128	@ 0x80
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800669e:	e2a2      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a35      	ldr	r2, [pc, #212]	@ (800677c <UART_SetConfig+0x344>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d130      	bne.n	800670c <UART_SetConfig+0x2d4>
 80066aa:	4b31      	ldr	r3, [pc, #196]	@ (8006770 <UART_SetConfig+0x338>)
 80066ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	2b05      	cmp	r3, #5
 80066b4:	d826      	bhi.n	8006704 <UART_SetConfig+0x2cc>
 80066b6:	a201      	add	r2, pc, #4	@ (adr r2, 80066bc <UART_SetConfig+0x284>)
 80066b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066bc:	080066d5 	.word	0x080066d5
 80066c0:	080066dd 	.word	0x080066dd
 80066c4:	080066e5 	.word	0x080066e5
 80066c8:	080066ed 	.word	0x080066ed
 80066cc:	080066f5 	.word	0x080066f5
 80066d0:	080066fd 	.word	0x080066fd
 80066d4:	2300      	movs	r3, #0
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066da:	e284      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80066dc:	2304      	movs	r3, #4
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e2:	e280      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80066e4:	2308      	movs	r3, #8
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ea:	e27c      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80066ec:	2310      	movs	r3, #16
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f2:	e278      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80066f4:	2320      	movs	r3, #32
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fa:	e274      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80066fc:	2340      	movs	r3, #64	@ 0x40
 80066fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006702:	e270      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006704:	2380      	movs	r3, #128	@ 0x80
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670a:	e26c      	b.n	8006be6 <UART_SetConfig+0x7ae>
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a1b      	ldr	r2, [pc, #108]	@ (8006780 <UART_SetConfig+0x348>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d142      	bne.n	800679c <UART_SetConfig+0x364>
 8006716:	4b16      	ldr	r3, [pc, #88]	@ (8006770 <UART_SetConfig+0x338>)
 8006718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	2b05      	cmp	r3, #5
 8006720:	d838      	bhi.n	8006794 <UART_SetConfig+0x35c>
 8006722:	a201      	add	r2, pc, #4	@ (adr r2, 8006728 <UART_SetConfig+0x2f0>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	08006741 	.word	0x08006741
 800672c:	08006749 	.word	0x08006749
 8006730:	08006751 	.word	0x08006751
 8006734:	08006759 	.word	0x08006759
 8006738:	08006785 	.word	0x08006785
 800673c:	0800678d 	.word	0x0800678d
 8006740:	2300      	movs	r3, #0
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006746:	e24e      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006748:	2304      	movs	r3, #4
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674e:	e24a      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006750:	2308      	movs	r3, #8
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006756:	e246      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006758:	2310      	movs	r3, #16
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675e:	e242      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006760:	cfff69f3 	.word	0xcfff69f3
 8006764:	58000c00 	.word	0x58000c00
 8006768:	11fff4ff 	.word	0x11fff4ff
 800676c:	40011000 	.word	0x40011000
 8006770:	58024400 	.word	0x58024400
 8006774:	40004400 	.word	0x40004400
 8006778:	40004800 	.word	0x40004800
 800677c:	40004c00 	.word	0x40004c00
 8006780:	40005000 	.word	0x40005000
 8006784:	2320      	movs	r3, #32
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678a:	e22c      	b.n	8006be6 <UART_SetConfig+0x7ae>
 800678c:	2340      	movs	r3, #64	@ 0x40
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006792:	e228      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006794:	2380      	movs	r3, #128	@ 0x80
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679a:	e224      	b.n	8006be6 <UART_SetConfig+0x7ae>
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4ab1      	ldr	r2, [pc, #708]	@ (8006a68 <UART_SetConfig+0x630>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d176      	bne.n	8006894 <UART_SetConfig+0x45c>
 80067a6:	4bb1      	ldr	r3, [pc, #708]	@ (8006a6c <UART_SetConfig+0x634>)
 80067a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067ae:	2b28      	cmp	r3, #40	@ 0x28
 80067b0:	d86c      	bhi.n	800688c <UART_SetConfig+0x454>
 80067b2:	a201      	add	r2, pc, #4	@ (adr r2, 80067b8 <UART_SetConfig+0x380>)
 80067b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b8:	0800685d 	.word	0x0800685d
 80067bc:	0800688d 	.word	0x0800688d
 80067c0:	0800688d 	.word	0x0800688d
 80067c4:	0800688d 	.word	0x0800688d
 80067c8:	0800688d 	.word	0x0800688d
 80067cc:	0800688d 	.word	0x0800688d
 80067d0:	0800688d 	.word	0x0800688d
 80067d4:	0800688d 	.word	0x0800688d
 80067d8:	08006865 	.word	0x08006865
 80067dc:	0800688d 	.word	0x0800688d
 80067e0:	0800688d 	.word	0x0800688d
 80067e4:	0800688d 	.word	0x0800688d
 80067e8:	0800688d 	.word	0x0800688d
 80067ec:	0800688d 	.word	0x0800688d
 80067f0:	0800688d 	.word	0x0800688d
 80067f4:	0800688d 	.word	0x0800688d
 80067f8:	0800686d 	.word	0x0800686d
 80067fc:	0800688d 	.word	0x0800688d
 8006800:	0800688d 	.word	0x0800688d
 8006804:	0800688d 	.word	0x0800688d
 8006808:	0800688d 	.word	0x0800688d
 800680c:	0800688d 	.word	0x0800688d
 8006810:	0800688d 	.word	0x0800688d
 8006814:	0800688d 	.word	0x0800688d
 8006818:	08006875 	.word	0x08006875
 800681c:	0800688d 	.word	0x0800688d
 8006820:	0800688d 	.word	0x0800688d
 8006824:	0800688d 	.word	0x0800688d
 8006828:	0800688d 	.word	0x0800688d
 800682c:	0800688d 	.word	0x0800688d
 8006830:	0800688d 	.word	0x0800688d
 8006834:	0800688d 	.word	0x0800688d
 8006838:	0800687d 	.word	0x0800687d
 800683c:	0800688d 	.word	0x0800688d
 8006840:	0800688d 	.word	0x0800688d
 8006844:	0800688d 	.word	0x0800688d
 8006848:	0800688d 	.word	0x0800688d
 800684c:	0800688d 	.word	0x0800688d
 8006850:	0800688d 	.word	0x0800688d
 8006854:	0800688d 	.word	0x0800688d
 8006858:	08006885 	.word	0x08006885
 800685c:	2301      	movs	r3, #1
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006862:	e1c0      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006864:	2304      	movs	r3, #4
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686a:	e1bc      	b.n	8006be6 <UART_SetConfig+0x7ae>
 800686c:	2308      	movs	r3, #8
 800686e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006872:	e1b8      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006874:	2310      	movs	r3, #16
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687a:	e1b4      	b.n	8006be6 <UART_SetConfig+0x7ae>
 800687c:	2320      	movs	r3, #32
 800687e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006882:	e1b0      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006884:	2340      	movs	r3, #64	@ 0x40
 8006886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800688a:	e1ac      	b.n	8006be6 <UART_SetConfig+0x7ae>
 800688c:	2380      	movs	r3, #128	@ 0x80
 800688e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006892:	e1a8      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a75      	ldr	r2, [pc, #468]	@ (8006a70 <UART_SetConfig+0x638>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d130      	bne.n	8006900 <UART_SetConfig+0x4c8>
 800689e:	4b73      	ldr	r3, [pc, #460]	@ (8006a6c <UART_SetConfig+0x634>)
 80068a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	2b05      	cmp	r3, #5
 80068a8:	d826      	bhi.n	80068f8 <UART_SetConfig+0x4c0>
 80068aa:	a201      	add	r2, pc, #4	@ (adr r2, 80068b0 <UART_SetConfig+0x478>)
 80068ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b0:	080068c9 	.word	0x080068c9
 80068b4:	080068d1 	.word	0x080068d1
 80068b8:	080068d9 	.word	0x080068d9
 80068bc:	080068e1 	.word	0x080068e1
 80068c0:	080068e9 	.word	0x080068e9
 80068c4:	080068f1 	.word	0x080068f1
 80068c8:	2300      	movs	r3, #0
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ce:	e18a      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80068d0:	2304      	movs	r3, #4
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d6:	e186      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80068d8:	2308      	movs	r3, #8
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068de:	e182      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80068e0:	2310      	movs	r3, #16
 80068e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068e6:	e17e      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80068e8:	2320      	movs	r3, #32
 80068ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ee:	e17a      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80068f0:	2340      	movs	r3, #64	@ 0x40
 80068f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068f6:	e176      	b.n	8006be6 <UART_SetConfig+0x7ae>
 80068f8:	2380      	movs	r3, #128	@ 0x80
 80068fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068fe:	e172      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a5b      	ldr	r2, [pc, #364]	@ (8006a74 <UART_SetConfig+0x63c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d130      	bne.n	800696c <UART_SetConfig+0x534>
 800690a:	4b58      	ldr	r3, [pc, #352]	@ (8006a6c <UART_SetConfig+0x634>)
 800690c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800690e:	f003 0307 	and.w	r3, r3, #7
 8006912:	2b05      	cmp	r3, #5
 8006914:	d826      	bhi.n	8006964 <UART_SetConfig+0x52c>
 8006916:	a201      	add	r2, pc, #4	@ (adr r2, 800691c <UART_SetConfig+0x4e4>)
 8006918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691c:	08006935 	.word	0x08006935
 8006920:	0800693d 	.word	0x0800693d
 8006924:	08006945 	.word	0x08006945
 8006928:	0800694d 	.word	0x0800694d
 800692c:	08006955 	.word	0x08006955
 8006930:	0800695d 	.word	0x0800695d
 8006934:	2300      	movs	r3, #0
 8006936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693a:	e154      	b.n	8006be6 <UART_SetConfig+0x7ae>
 800693c:	2304      	movs	r3, #4
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006942:	e150      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006944:	2308      	movs	r3, #8
 8006946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694a:	e14c      	b.n	8006be6 <UART_SetConfig+0x7ae>
 800694c:	2310      	movs	r3, #16
 800694e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006952:	e148      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006954:	2320      	movs	r3, #32
 8006956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800695a:	e144      	b.n	8006be6 <UART_SetConfig+0x7ae>
 800695c:	2340      	movs	r3, #64	@ 0x40
 800695e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006962:	e140      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006964:	2380      	movs	r3, #128	@ 0x80
 8006966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800696a:	e13c      	b.n	8006be6 <UART_SetConfig+0x7ae>
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a41      	ldr	r2, [pc, #260]	@ (8006a78 <UART_SetConfig+0x640>)
 8006972:	4293      	cmp	r3, r2
 8006974:	f040 8082 	bne.w	8006a7c <UART_SetConfig+0x644>
 8006978:	4b3c      	ldr	r3, [pc, #240]	@ (8006a6c <UART_SetConfig+0x634>)
 800697a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800697c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006980:	2b28      	cmp	r3, #40	@ 0x28
 8006982:	d86d      	bhi.n	8006a60 <UART_SetConfig+0x628>
 8006984:	a201      	add	r2, pc, #4	@ (adr r2, 800698c <UART_SetConfig+0x554>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	08006a31 	.word	0x08006a31
 8006990:	08006a61 	.word	0x08006a61
 8006994:	08006a61 	.word	0x08006a61
 8006998:	08006a61 	.word	0x08006a61
 800699c:	08006a61 	.word	0x08006a61
 80069a0:	08006a61 	.word	0x08006a61
 80069a4:	08006a61 	.word	0x08006a61
 80069a8:	08006a61 	.word	0x08006a61
 80069ac:	08006a39 	.word	0x08006a39
 80069b0:	08006a61 	.word	0x08006a61
 80069b4:	08006a61 	.word	0x08006a61
 80069b8:	08006a61 	.word	0x08006a61
 80069bc:	08006a61 	.word	0x08006a61
 80069c0:	08006a61 	.word	0x08006a61
 80069c4:	08006a61 	.word	0x08006a61
 80069c8:	08006a61 	.word	0x08006a61
 80069cc:	08006a41 	.word	0x08006a41
 80069d0:	08006a61 	.word	0x08006a61
 80069d4:	08006a61 	.word	0x08006a61
 80069d8:	08006a61 	.word	0x08006a61
 80069dc:	08006a61 	.word	0x08006a61
 80069e0:	08006a61 	.word	0x08006a61
 80069e4:	08006a61 	.word	0x08006a61
 80069e8:	08006a61 	.word	0x08006a61
 80069ec:	08006a49 	.word	0x08006a49
 80069f0:	08006a61 	.word	0x08006a61
 80069f4:	08006a61 	.word	0x08006a61
 80069f8:	08006a61 	.word	0x08006a61
 80069fc:	08006a61 	.word	0x08006a61
 8006a00:	08006a61 	.word	0x08006a61
 8006a04:	08006a61 	.word	0x08006a61
 8006a08:	08006a61 	.word	0x08006a61
 8006a0c:	08006a51 	.word	0x08006a51
 8006a10:	08006a61 	.word	0x08006a61
 8006a14:	08006a61 	.word	0x08006a61
 8006a18:	08006a61 	.word	0x08006a61
 8006a1c:	08006a61 	.word	0x08006a61
 8006a20:	08006a61 	.word	0x08006a61
 8006a24:	08006a61 	.word	0x08006a61
 8006a28:	08006a61 	.word	0x08006a61
 8006a2c:	08006a59 	.word	0x08006a59
 8006a30:	2301      	movs	r3, #1
 8006a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a36:	e0d6      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006a38:	2304      	movs	r3, #4
 8006a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a3e:	e0d2      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006a40:	2308      	movs	r3, #8
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a46:	e0ce      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4e:	e0ca      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006a50:	2320      	movs	r3, #32
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a56:	e0c6      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006a58:	2340      	movs	r3, #64	@ 0x40
 8006a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5e:	e0c2      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006a60:	2380      	movs	r3, #128	@ 0x80
 8006a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a66:	e0be      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006a68:	40011400 	.word	0x40011400
 8006a6c:	58024400 	.word	0x58024400
 8006a70:	40007800 	.word	0x40007800
 8006a74:	40007c00 	.word	0x40007c00
 8006a78:	40011800 	.word	0x40011800
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4aad      	ldr	r2, [pc, #692]	@ (8006d38 <UART_SetConfig+0x900>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d176      	bne.n	8006b74 <UART_SetConfig+0x73c>
 8006a86:	4bad      	ldr	r3, [pc, #692]	@ (8006d3c <UART_SetConfig+0x904>)
 8006a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a8e:	2b28      	cmp	r3, #40	@ 0x28
 8006a90:	d86c      	bhi.n	8006b6c <UART_SetConfig+0x734>
 8006a92:	a201      	add	r2, pc, #4	@ (adr r2, 8006a98 <UART_SetConfig+0x660>)
 8006a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a98:	08006b3d 	.word	0x08006b3d
 8006a9c:	08006b6d 	.word	0x08006b6d
 8006aa0:	08006b6d 	.word	0x08006b6d
 8006aa4:	08006b6d 	.word	0x08006b6d
 8006aa8:	08006b6d 	.word	0x08006b6d
 8006aac:	08006b6d 	.word	0x08006b6d
 8006ab0:	08006b6d 	.word	0x08006b6d
 8006ab4:	08006b6d 	.word	0x08006b6d
 8006ab8:	08006b45 	.word	0x08006b45
 8006abc:	08006b6d 	.word	0x08006b6d
 8006ac0:	08006b6d 	.word	0x08006b6d
 8006ac4:	08006b6d 	.word	0x08006b6d
 8006ac8:	08006b6d 	.word	0x08006b6d
 8006acc:	08006b6d 	.word	0x08006b6d
 8006ad0:	08006b6d 	.word	0x08006b6d
 8006ad4:	08006b6d 	.word	0x08006b6d
 8006ad8:	08006b4d 	.word	0x08006b4d
 8006adc:	08006b6d 	.word	0x08006b6d
 8006ae0:	08006b6d 	.word	0x08006b6d
 8006ae4:	08006b6d 	.word	0x08006b6d
 8006ae8:	08006b6d 	.word	0x08006b6d
 8006aec:	08006b6d 	.word	0x08006b6d
 8006af0:	08006b6d 	.word	0x08006b6d
 8006af4:	08006b6d 	.word	0x08006b6d
 8006af8:	08006b55 	.word	0x08006b55
 8006afc:	08006b6d 	.word	0x08006b6d
 8006b00:	08006b6d 	.word	0x08006b6d
 8006b04:	08006b6d 	.word	0x08006b6d
 8006b08:	08006b6d 	.word	0x08006b6d
 8006b0c:	08006b6d 	.word	0x08006b6d
 8006b10:	08006b6d 	.word	0x08006b6d
 8006b14:	08006b6d 	.word	0x08006b6d
 8006b18:	08006b5d 	.word	0x08006b5d
 8006b1c:	08006b6d 	.word	0x08006b6d
 8006b20:	08006b6d 	.word	0x08006b6d
 8006b24:	08006b6d 	.word	0x08006b6d
 8006b28:	08006b6d 	.word	0x08006b6d
 8006b2c:	08006b6d 	.word	0x08006b6d
 8006b30:	08006b6d 	.word	0x08006b6d
 8006b34:	08006b6d 	.word	0x08006b6d
 8006b38:	08006b65 	.word	0x08006b65
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b42:	e050      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006b44:	2304      	movs	r3, #4
 8006b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b4a:	e04c      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006b4c:	2308      	movs	r3, #8
 8006b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b52:	e048      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006b54:	2310      	movs	r3, #16
 8006b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b5a:	e044      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006b5c:	2320      	movs	r3, #32
 8006b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b62:	e040      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006b64:	2340      	movs	r3, #64	@ 0x40
 8006b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b6a:	e03c      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006b6c:	2380      	movs	r3, #128	@ 0x80
 8006b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b72:	e038      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a71      	ldr	r2, [pc, #452]	@ (8006d40 <UART_SetConfig+0x908>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d130      	bne.n	8006be0 <UART_SetConfig+0x7a8>
 8006b7e:	4b6f      	ldr	r3, [pc, #444]	@ (8006d3c <UART_SetConfig+0x904>)
 8006b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	2b05      	cmp	r3, #5
 8006b88:	d826      	bhi.n	8006bd8 <UART_SetConfig+0x7a0>
 8006b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b90 <UART_SetConfig+0x758>)
 8006b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b90:	08006ba9 	.word	0x08006ba9
 8006b94:	08006bb1 	.word	0x08006bb1
 8006b98:	08006bb9 	.word	0x08006bb9
 8006b9c:	08006bc1 	.word	0x08006bc1
 8006ba0:	08006bc9 	.word	0x08006bc9
 8006ba4:	08006bd1 	.word	0x08006bd1
 8006ba8:	2302      	movs	r3, #2
 8006baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bae:	e01a      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006bb0:	2304      	movs	r3, #4
 8006bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bb6:	e016      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006bb8:	2308      	movs	r3, #8
 8006bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bbe:	e012      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bc6:	e00e      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006bc8:	2320      	movs	r3, #32
 8006bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bce:	e00a      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006bd0:	2340      	movs	r3, #64	@ 0x40
 8006bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bd6:	e006      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006bd8:	2380      	movs	r3, #128	@ 0x80
 8006bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bde:	e002      	b.n	8006be6 <UART_SetConfig+0x7ae>
 8006be0:	2380      	movs	r3, #128	@ 0x80
 8006be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a55      	ldr	r2, [pc, #340]	@ (8006d40 <UART_SetConfig+0x908>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	f040 80f8 	bne.w	8006de2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bf2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	dc46      	bgt.n	8006c88 <UART_SetConfig+0x850>
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	db75      	blt.n	8006cea <UART_SetConfig+0x8b2>
 8006bfe:	3b02      	subs	r3, #2
 8006c00:	2b1e      	cmp	r3, #30
 8006c02:	d872      	bhi.n	8006cea <UART_SetConfig+0x8b2>
 8006c04:	a201      	add	r2, pc, #4	@ (adr r2, 8006c0c <UART_SetConfig+0x7d4>)
 8006c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0a:	bf00      	nop
 8006c0c:	08006c8f 	.word	0x08006c8f
 8006c10:	08006ceb 	.word	0x08006ceb
 8006c14:	08006c97 	.word	0x08006c97
 8006c18:	08006ceb 	.word	0x08006ceb
 8006c1c:	08006ceb 	.word	0x08006ceb
 8006c20:	08006ceb 	.word	0x08006ceb
 8006c24:	08006ca7 	.word	0x08006ca7
 8006c28:	08006ceb 	.word	0x08006ceb
 8006c2c:	08006ceb 	.word	0x08006ceb
 8006c30:	08006ceb 	.word	0x08006ceb
 8006c34:	08006ceb 	.word	0x08006ceb
 8006c38:	08006ceb 	.word	0x08006ceb
 8006c3c:	08006ceb 	.word	0x08006ceb
 8006c40:	08006ceb 	.word	0x08006ceb
 8006c44:	08006cb7 	.word	0x08006cb7
 8006c48:	08006ceb 	.word	0x08006ceb
 8006c4c:	08006ceb 	.word	0x08006ceb
 8006c50:	08006ceb 	.word	0x08006ceb
 8006c54:	08006ceb 	.word	0x08006ceb
 8006c58:	08006ceb 	.word	0x08006ceb
 8006c5c:	08006ceb 	.word	0x08006ceb
 8006c60:	08006ceb 	.word	0x08006ceb
 8006c64:	08006ceb 	.word	0x08006ceb
 8006c68:	08006ceb 	.word	0x08006ceb
 8006c6c:	08006ceb 	.word	0x08006ceb
 8006c70:	08006ceb 	.word	0x08006ceb
 8006c74:	08006ceb 	.word	0x08006ceb
 8006c78:	08006ceb 	.word	0x08006ceb
 8006c7c:	08006ceb 	.word	0x08006ceb
 8006c80:	08006ceb 	.word	0x08006ceb
 8006c84:	08006cdd 	.word	0x08006cdd
 8006c88:	2b40      	cmp	r3, #64	@ 0x40
 8006c8a:	d02a      	beq.n	8006ce2 <UART_SetConfig+0x8aa>
 8006c8c:	e02d      	b.n	8006cea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006c8e:	f7fe fe21 	bl	80058d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006c92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c94:	e02f      	b.n	8006cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fe30 	bl	8005900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ca4:	e027      	b.n	8006cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ca6:	f107 0318 	add.w	r3, r7, #24
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fe ff7c 	bl	8005ba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cb4:	e01f      	b.n	8006cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cb6:	4b21      	ldr	r3, [pc, #132]	@ (8006d3c <UART_SetConfig+0x904>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d009      	beq.n	8006cd6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d3c <UART_SetConfig+0x904>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	08db      	lsrs	r3, r3, #3
 8006cc8:	f003 0303 	and.w	r3, r3, #3
 8006ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d44 <UART_SetConfig+0x90c>)
 8006cce:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cd4:	e00f      	b.n	8006cf6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8006d44 <UART_SetConfig+0x90c>)
 8006cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cda:	e00c      	b.n	8006cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8006d48 <UART_SetConfig+0x910>)
 8006cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce0:	e009      	b.n	8006cf6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce8:	e005      	b.n	8006cf6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006cf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 81ee 	beq.w	80070da <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d02:	4a12      	ldr	r2, [pc, #72]	@ (8006d4c <UART_SetConfig+0x914>)
 8006d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d10:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	4613      	mov	r3, r2
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	4413      	add	r3, r2
 8006d1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d305      	bcc.n	8006d2e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d910      	bls.n	8006d50 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006d34:	e1d1      	b.n	80070da <UART_SetConfig+0xca2>
 8006d36:	bf00      	nop
 8006d38:	40011c00 	.word	0x40011c00
 8006d3c:	58024400 	.word	0x58024400
 8006d40:	58000c00 	.word	0x58000c00
 8006d44:	03d09000 	.word	0x03d09000
 8006d48:	003d0900 	.word	0x003d0900
 8006d4c:	08007c08 	.word	0x08007c08
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d52:	2200      	movs	r2, #0
 8006d54:	60bb      	str	r3, [r7, #8]
 8006d56:	60fa      	str	r2, [r7, #12]
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5c:	4ac0      	ldr	r2, [pc, #768]	@ (8007060 <UART_SetConfig+0xc28>)
 8006d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	2200      	movs	r2, #0
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	607a      	str	r2, [r7, #4]
 8006d6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d72:	f7f9 facb 	bl	800030c <__aeabi_uldivmod>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	f04f 0200 	mov.w	r2, #0
 8006d82:	f04f 0300 	mov.w	r3, #0
 8006d86:	020b      	lsls	r3, r1, #8
 8006d88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d8c:	0202      	lsls	r2, r0, #8
 8006d8e:	6979      	ldr	r1, [r7, #20]
 8006d90:	6849      	ldr	r1, [r1, #4]
 8006d92:	0849      	lsrs	r1, r1, #1
 8006d94:	2000      	movs	r0, #0
 8006d96:	460c      	mov	r4, r1
 8006d98:	4605      	mov	r5, r0
 8006d9a:	eb12 0804 	adds.w	r8, r2, r4
 8006d9e:	eb43 0905 	adc.w	r9, r3, r5
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	469a      	mov	sl, r3
 8006daa:	4693      	mov	fp, r2
 8006dac:	4652      	mov	r2, sl
 8006dae:	465b      	mov	r3, fp
 8006db0:	4640      	mov	r0, r8
 8006db2:	4649      	mov	r1, r9
 8006db4:	f7f9 faaa 	bl	800030c <__aeabi_uldivmod>
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dc6:	d308      	bcc.n	8006dda <UART_SetConfig+0x9a2>
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dce:	d204      	bcs.n	8006dda <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dd6:	60da      	str	r2, [r3, #12]
 8006dd8:	e17f      	b.n	80070da <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006de0:	e17b      	b.n	80070da <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dea:	f040 80bd 	bne.w	8006f68 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006dee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	dc48      	bgt.n	8006e88 <UART_SetConfig+0xa50>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	db7b      	blt.n	8006ef2 <UART_SetConfig+0xaba>
 8006dfa:	2b20      	cmp	r3, #32
 8006dfc:	d879      	bhi.n	8006ef2 <UART_SetConfig+0xaba>
 8006dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8006e04 <UART_SetConfig+0x9cc>)
 8006e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e04:	08006e8f 	.word	0x08006e8f
 8006e08:	08006e97 	.word	0x08006e97
 8006e0c:	08006ef3 	.word	0x08006ef3
 8006e10:	08006ef3 	.word	0x08006ef3
 8006e14:	08006e9f 	.word	0x08006e9f
 8006e18:	08006ef3 	.word	0x08006ef3
 8006e1c:	08006ef3 	.word	0x08006ef3
 8006e20:	08006ef3 	.word	0x08006ef3
 8006e24:	08006eaf 	.word	0x08006eaf
 8006e28:	08006ef3 	.word	0x08006ef3
 8006e2c:	08006ef3 	.word	0x08006ef3
 8006e30:	08006ef3 	.word	0x08006ef3
 8006e34:	08006ef3 	.word	0x08006ef3
 8006e38:	08006ef3 	.word	0x08006ef3
 8006e3c:	08006ef3 	.word	0x08006ef3
 8006e40:	08006ef3 	.word	0x08006ef3
 8006e44:	08006ebf 	.word	0x08006ebf
 8006e48:	08006ef3 	.word	0x08006ef3
 8006e4c:	08006ef3 	.word	0x08006ef3
 8006e50:	08006ef3 	.word	0x08006ef3
 8006e54:	08006ef3 	.word	0x08006ef3
 8006e58:	08006ef3 	.word	0x08006ef3
 8006e5c:	08006ef3 	.word	0x08006ef3
 8006e60:	08006ef3 	.word	0x08006ef3
 8006e64:	08006ef3 	.word	0x08006ef3
 8006e68:	08006ef3 	.word	0x08006ef3
 8006e6c:	08006ef3 	.word	0x08006ef3
 8006e70:	08006ef3 	.word	0x08006ef3
 8006e74:	08006ef3 	.word	0x08006ef3
 8006e78:	08006ef3 	.word	0x08006ef3
 8006e7c:	08006ef3 	.word	0x08006ef3
 8006e80:	08006ef3 	.word	0x08006ef3
 8006e84:	08006ee5 	.word	0x08006ee5
 8006e88:	2b40      	cmp	r3, #64	@ 0x40
 8006e8a:	d02e      	beq.n	8006eea <UART_SetConfig+0xab2>
 8006e8c:	e031      	b.n	8006ef2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e8e:	f7fd fb55 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8006e92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e94:	e033      	b.n	8006efe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e96:	f7fd fb67 	bl	8004568 <HAL_RCC_GetPCLK2Freq>
 8006e9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e9c:	e02f      	b.n	8006efe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fe fd2c 	bl	8005900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eac:	e027      	b.n	8006efe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eae:	f107 0318 	add.w	r3, r7, #24
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe fe78 	bl	8005ba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ebc:	e01f      	b.n	8006efe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ebe:	4b69      	ldr	r3, [pc, #420]	@ (8007064 <UART_SetConfig+0xc2c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d009      	beq.n	8006ede <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006eca:	4b66      	ldr	r3, [pc, #408]	@ (8007064 <UART_SetConfig+0xc2c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	08db      	lsrs	r3, r3, #3
 8006ed0:	f003 0303 	and.w	r3, r3, #3
 8006ed4:	4a64      	ldr	r2, [pc, #400]	@ (8007068 <UART_SetConfig+0xc30>)
 8006ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006edc:	e00f      	b.n	8006efe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006ede:	4b62      	ldr	r3, [pc, #392]	@ (8007068 <UART_SetConfig+0xc30>)
 8006ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee2:	e00c      	b.n	8006efe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ee4:	4b61      	ldr	r3, [pc, #388]	@ (800706c <UART_SetConfig+0xc34>)
 8006ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee8:	e009      	b.n	8006efe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ef0:	e005      	b.n	8006efe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006efc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80ea 	beq.w	80070da <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0a:	4a55      	ldr	r2, [pc, #340]	@ (8007060 <UART_SetConfig+0xc28>)
 8006f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f10:	461a      	mov	r2, r3
 8006f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f14:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f18:	005a      	lsls	r2, r3, #1
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	085b      	lsrs	r3, r3, #1
 8006f20:	441a      	add	r2, r3
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2e:	2b0f      	cmp	r3, #15
 8006f30:	d916      	bls.n	8006f60 <UART_SetConfig+0xb28>
 8006f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f38:	d212      	bcs.n	8006f60 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	f023 030f 	bic.w	r3, r3, #15
 8006f42:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f46:	085b      	lsrs	r3, r3, #1
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	f003 0307 	and.w	r3, r3, #7
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f52:	4313      	orrs	r3, r2
 8006f54:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006f5c:	60da      	str	r2, [r3, #12]
 8006f5e:	e0bc      	b.n	80070da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f66:	e0b8      	b.n	80070da <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f68:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f6c:	2b20      	cmp	r3, #32
 8006f6e:	dc4b      	bgt.n	8007008 <UART_SetConfig+0xbd0>
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f2c0 8087 	blt.w	8007084 <UART_SetConfig+0xc4c>
 8006f76:	2b20      	cmp	r3, #32
 8006f78:	f200 8084 	bhi.w	8007084 <UART_SetConfig+0xc4c>
 8006f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f84 <UART_SetConfig+0xb4c>)
 8006f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f82:	bf00      	nop
 8006f84:	0800700f 	.word	0x0800700f
 8006f88:	08007017 	.word	0x08007017
 8006f8c:	08007085 	.word	0x08007085
 8006f90:	08007085 	.word	0x08007085
 8006f94:	0800701f 	.word	0x0800701f
 8006f98:	08007085 	.word	0x08007085
 8006f9c:	08007085 	.word	0x08007085
 8006fa0:	08007085 	.word	0x08007085
 8006fa4:	0800702f 	.word	0x0800702f
 8006fa8:	08007085 	.word	0x08007085
 8006fac:	08007085 	.word	0x08007085
 8006fb0:	08007085 	.word	0x08007085
 8006fb4:	08007085 	.word	0x08007085
 8006fb8:	08007085 	.word	0x08007085
 8006fbc:	08007085 	.word	0x08007085
 8006fc0:	08007085 	.word	0x08007085
 8006fc4:	0800703f 	.word	0x0800703f
 8006fc8:	08007085 	.word	0x08007085
 8006fcc:	08007085 	.word	0x08007085
 8006fd0:	08007085 	.word	0x08007085
 8006fd4:	08007085 	.word	0x08007085
 8006fd8:	08007085 	.word	0x08007085
 8006fdc:	08007085 	.word	0x08007085
 8006fe0:	08007085 	.word	0x08007085
 8006fe4:	08007085 	.word	0x08007085
 8006fe8:	08007085 	.word	0x08007085
 8006fec:	08007085 	.word	0x08007085
 8006ff0:	08007085 	.word	0x08007085
 8006ff4:	08007085 	.word	0x08007085
 8006ff8:	08007085 	.word	0x08007085
 8006ffc:	08007085 	.word	0x08007085
 8007000:	08007085 	.word	0x08007085
 8007004:	08007077 	.word	0x08007077
 8007008:	2b40      	cmp	r3, #64	@ 0x40
 800700a:	d037      	beq.n	800707c <UART_SetConfig+0xc44>
 800700c:	e03a      	b.n	8007084 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800700e:	f7fd fa95 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 8007012:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007014:	e03c      	b.n	8007090 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007016:	f7fd faa7 	bl	8004568 <HAL_RCC_GetPCLK2Freq>
 800701a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800701c:	e038      	b.n	8007090 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800701e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe fc6c 	bl	8005900 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800702c:	e030      	b.n	8007090 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800702e:	f107 0318 	add.w	r3, r7, #24
 8007032:	4618      	mov	r0, r3
 8007034:	f7fe fdb8 	bl	8005ba8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800703c:	e028      	b.n	8007090 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800703e:	4b09      	ldr	r3, [pc, #36]	@ (8007064 <UART_SetConfig+0xc2c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0320 	and.w	r3, r3, #32
 8007046:	2b00      	cmp	r3, #0
 8007048:	d012      	beq.n	8007070 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800704a:	4b06      	ldr	r3, [pc, #24]	@ (8007064 <UART_SetConfig+0xc2c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	08db      	lsrs	r3, r3, #3
 8007050:	f003 0303 	and.w	r3, r3, #3
 8007054:	4a04      	ldr	r2, [pc, #16]	@ (8007068 <UART_SetConfig+0xc30>)
 8007056:	fa22 f303 	lsr.w	r3, r2, r3
 800705a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800705c:	e018      	b.n	8007090 <UART_SetConfig+0xc58>
 800705e:	bf00      	nop
 8007060:	08007c08 	.word	0x08007c08
 8007064:	58024400 	.word	0x58024400
 8007068:	03d09000 	.word	0x03d09000
 800706c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007070:	4b24      	ldr	r3, [pc, #144]	@ (8007104 <UART_SetConfig+0xccc>)
 8007072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007074:	e00c      	b.n	8007090 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007076:	4b24      	ldr	r3, [pc, #144]	@ (8007108 <UART_SetConfig+0xcd0>)
 8007078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800707a:	e009      	b.n	8007090 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800707c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007082:	e005      	b.n	8007090 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800708e:	bf00      	nop
    }

    if (pclk != 0U)
 8007090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d021      	beq.n	80070da <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709a:	4a1c      	ldr	r2, [pc, #112]	@ (800710c <UART_SetConfig+0xcd4>)
 800709c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070a0:	461a      	mov	r2, r3
 80070a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	085b      	lsrs	r3, r3, #1
 80070ae:	441a      	add	r2, r3
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070bc:	2b0f      	cmp	r3, #15
 80070be:	d909      	bls.n	80070d4 <UART_SetConfig+0xc9c>
 80070c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070c6:	d205      	bcs.n	80070d4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	60da      	str	r2, [r3, #12]
 80070d2:	e002      	b.n	80070da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2201      	movs	r2, #1
 80070de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2200      	movs	r2, #0
 80070ee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2200      	movs	r2, #0
 80070f4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80070f6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3748      	adds	r7, #72	@ 0x48
 80070fe:	46bd      	mov	sp, r7
 8007100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007104:	03d09000 	.word	0x03d09000
 8007108:	003d0900 	.word	0x003d0900
 800710c:	08007c08 	.word	0x08007c08

08007110 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711c:	f003 0308 	and.w	r3, r3, #8
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00a      	beq.n	800713a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007160:	f003 0302 	and.w	r3, r3, #2
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00a      	beq.n	800717e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a4:	f003 0310 	and.w	r3, r3, #16
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00a      	beq.n	80071c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01a      	beq.n	8007226 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800720e:	d10a      	bne.n	8007226 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	605a      	str	r2, [r3, #4]
  }
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b098      	sub	sp, #96	@ 0x60
 8007258:	af02      	add	r7, sp, #8
 800725a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007264:	f7fa fe96 	bl	8001f94 <HAL_GetTick>
 8007268:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0308 	and.w	r3, r3, #8
 8007274:	2b08      	cmp	r3, #8
 8007276:	d12f      	bne.n	80072d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007278:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007280:	2200      	movs	r2, #0
 8007282:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f88e 	bl	80073a8 <UART_WaitOnFlagUntilTimeout>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d022      	beq.n	80072d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729a:	e853 3f00 	ldrex	r3, [r3]
 800729e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80072b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072b8:	e841 2300 	strex	r3, r2, [r1]
 80072bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e6      	bne.n	8007292 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2220      	movs	r2, #32
 80072c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e063      	b.n	80073a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0304 	and.w	r3, r3, #4
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	d149      	bne.n	800737a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072ee:	2200      	movs	r2, #0
 80072f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f857 	bl	80073a8 <UART_WaitOnFlagUntilTimeout>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d03c      	beq.n	800737a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	623b      	str	r3, [r7, #32]
   return(result);
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007314:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800731e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007320:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007322:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007324:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007326:	e841 2300 	strex	r3, r2, [r1]
 800732a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800732c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1e6      	bne.n	8007300 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3308      	adds	r3, #8
 8007338:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	60fb      	str	r3, [r7, #12]
   return(result);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	64bb      	str	r3, [r7, #72]	@ 0x48
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3308      	adds	r3, #8
 8007350:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007352:	61fa      	str	r2, [r7, #28]
 8007354:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	69b9      	ldr	r1, [r7, #24]
 8007358:	69fa      	ldr	r2, [r7, #28]
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	617b      	str	r3, [r7, #20]
   return(result);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e5      	bne.n	8007332 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2220      	movs	r2, #32
 800736a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e012      	b.n	80073a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2220      	movs	r2, #32
 800737e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2220      	movs	r2, #32
 8007386:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3758      	adds	r7, #88	@ 0x58
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	603b      	str	r3, [r7, #0]
 80073b4:	4613      	mov	r3, r2
 80073b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073b8:	e04f      	b.n	800745a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c0:	d04b      	beq.n	800745a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c2:	f7fa fde7 	bl	8001f94 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d302      	bcc.n	80073d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e04e      	b.n	800747a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0304 	and.w	r3, r3, #4
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d037      	beq.n	800745a <UART_WaitOnFlagUntilTimeout+0xb2>
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2b80      	cmp	r3, #128	@ 0x80
 80073ee:	d034      	beq.n	800745a <UART_WaitOnFlagUntilTimeout+0xb2>
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b40      	cmp	r3, #64	@ 0x40
 80073f4:	d031      	beq.n	800745a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b08      	cmp	r3, #8
 8007402:	d110      	bne.n	8007426 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2208      	movs	r2, #8
 800740a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 f839 	bl	8007484 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2208      	movs	r2, #8
 8007416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e029      	b.n	800747a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007434:	d111      	bne.n	800745a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800743e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 f81f 	bl	8007484 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2220      	movs	r2, #32
 800744a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e00f      	b.n	800747a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69da      	ldr	r2, [r3, #28]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	4013      	ands	r3, r2
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	429a      	cmp	r2, r3
 8007468:	bf0c      	ite	eq
 800746a:	2301      	moveq	r3, #1
 800746c:	2300      	movne	r3, #0
 800746e:	b2db      	uxtb	r3, r3
 8007470:	461a      	mov	r2, r3
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	429a      	cmp	r2, r3
 8007476:	d0a0      	beq.n	80073ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007484:	b480      	push	{r7}
 8007486:	b095      	sub	sp, #84	@ 0x54
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80074ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e6      	bne.n	800748c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3308      	adds	r3, #8
 80074c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80074ce:	69fa      	ldr	r2, [r7, #28]
 80074d0:	4b1e      	ldr	r3, [pc, #120]	@ (800754c <UART_EndRxTransfer+0xc8>)
 80074d2:	4013      	ands	r3, r2
 80074d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3308      	adds	r3, #8
 80074dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e5      	bne.n	80074be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d118      	bne.n	800752c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	60bb      	str	r3, [r7, #8]
   return(result);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f023 0310 	bic.w	r3, r3, #16
 800750e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	461a      	mov	r2, r3
 8007516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007518:	61bb      	str	r3, [r7, #24]
 800751a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	6979      	ldr	r1, [r7, #20]
 800751e:	69ba      	ldr	r2, [r7, #24]
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	613b      	str	r3, [r7, #16]
   return(result);
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e6      	bne.n	80074fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2220      	movs	r2, #32
 8007530:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007540:	bf00      	nop
 8007542:	3754      	adds	r7, #84	@ 0x54
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	effffffe 	.word	0xeffffffe

08007550 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800755e:	2b01      	cmp	r3, #1
 8007560:	d101      	bne.n	8007566 <HAL_UARTEx_DisableFifoMode+0x16>
 8007562:	2302      	movs	r3, #2
 8007564:	e027      	b.n	80075b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2224      	movs	r2, #36	@ 0x24
 8007572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f022 0201 	bic.w	r2, r2, #1
 800758c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007594:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d101      	bne.n	80075da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80075d6:	2302      	movs	r3, #2
 80075d8:	e02d      	b.n	8007636 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2224      	movs	r2, #36	@ 0x24
 80075e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0201 	bic.w	r2, r2, #1
 8007600:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f850 	bl	80076bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800764e:	2b01      	cmp	r3, #1
 8007650:	d101      	bne.n	8007656 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007652:	2302      	movs	r3, #2
 8007654:	e02d      	b.n	80076b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2224      	movs	r2, #36	@ 0x24
 8007662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 0201 	bic.w	r2, r2, #1
 800767c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f812 	bl	80076bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
	...

080076bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d108      	bne.n	80076de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80076dc:	e031      	b.n	8007742 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80076de:	2310      	movs	r3, #16
 80076e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80076e2:	2310      	movs	r3, #16
 80076e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	0e5b      	lsrs	r3, r3, #25
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	f003 0307 	and.w	r3, r3, #7
 80076f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	0f5b      	lsrs	r3, r3, #29
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	f003 0307 	and.w	r3, r3, #7
 8007704:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007706:	7bbb      	ldrb	r3, [r7, #14]
 8007708:	7b3a      	ldrb	r2, [r7, #12]
 800770a:	4911      	ldr	r1, [pc, #68]	@ (8007750 <UARTEx_SetNbDataToProcess+0x94>)
 800770c:	5c8a      	ldrb	r2, [r1, r2]
 800770e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007712:	7b3a      	ldrb	r2, [r7, #12]
 8007714:	490f      	ldr	r1, [pc, #60]	@ (8007754 <UARTEx_SetNbDataToProcess+0x98>)
 8007716:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007718:	fb93 f3f2 	sdiv	r3, r3, r2
 800771c:	b29a      	uxth	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007724:	7bfb      	ldrb	r3, [r7, #15]
 8007726:	7b7a      	ldrb	r2, [r7, #13]
 8007728:	4909      	ldr	r1, [pc, #36]	@ (8007750 <UARTEx_SetNbDataToProcess+0x94>)
 800772a:	5c8a      	ldrb	r2, [r1, r2]
 800772c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007730:	7b7a      	ldrb	r2, [r7, #13]
 8007732:	4908      	ldr	r1, [pc, #32]	@ (8007754 <UARTEx_SetNbDataToProcess+0x98>)
 8007734:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007736:	fb93 f3f2 	sdiv	r3, r3, r2
 800773a:	b29a      	uxth	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007742:	bf00      	nop
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	08007c20 	.word	0x08007c20
 8007754:	08007c28 	.word	0x08007c28

08007758 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007758:	b084      	sub	sp, #16
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	f107 001c 	add.w	r0, r7, #28
 8007766:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800776a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800776e:	2b01      	cmp	r3, #1
 8007770:	d121      	bne.n	80077b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007776:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68da      	ldr	r2, [r3, #12]
 8007782:	4b2c      	ldr	r3, [pc, #176]	@ (8007834 <USB_CoreInit+0xdc>)
 8007784:	4013      	ands	r3, r2
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007796:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800779a:	2b01      	cmp	r3, #1
 800779c:	d105      	bne.n	80077aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f911 	bl	80079d2 <USB_CoreReset>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]
 80077b4:	e01b      	b.n	80077ee <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f905 	bl	80079d2 <USB_CoreReset>
 80077c8:	4603      	mov	r3, r0
 80077ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80077cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d106      	bne.n	80077e2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	639a      	str	r2, [r3, #56]	@ 0x38
 80077e0:	e005      	b.n	80077ee <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80077ee:	7fbb      	ldrb	r3, [r7, #30]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d116      	bne.n	8007822 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007802:	4b0d      	ldr	r3, [pc, #52]	@ (8007838 <USB_CoreInit+0xe0>)
 8007804:	4313      	orrs	r3, r2
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f043 0206 	orr.w	r2, r3, #6
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f043 0220 	orr.w	r2, r3, #32
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007822:	7bfb      	ldrb	r3, [r7, #15]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800782e:	b004      	add	sp, #16
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	ffbdffbf 	.word	0xffbdffbf
 8007838:	03ee0000 	.word	0x03ee0000

0800783c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f023 0201 	bic.w	r2, r3, #1
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800787a:	78fb      	ldrb	r3, [r7, #3]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d115      	bne.n	80078ac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800788c:	200a      	movs	r0, #10
 800788e:	f7fa fb8d 	bl	8001fac <HAL_Delay>
      ms += 10U;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	330a      	adds	r3, #10
 8007896:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f88c 	bl	80079b6 <USB_GetMode>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d01e      	beq.n	80078e2 <USB_SetCurrentMode+0x84>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80078a8:	d9f0      	bls.n	800788c <USB_SetCurrentMode+0x2e>
 80078aa:	e01a      	b.n	80078e2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d115      	bne.n	80078de <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078be:	200a      	movs	r0, #10
 80078c0:	f7fa fb74 	bl	8001fac <HAL_Delay>
      ms += 10U;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	330a      	adds	r3, #10
 80078c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f873 	bl	80079b6 <USB_GetMode>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d005      	beq.n	80078e2 <USB_SetCurrentMode+0x84>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80078da:	d9f0      	bls.n	80078be <USB_SetCurrentMode+0x60>
 80078dc:	e001      	b.n	80078e2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e005      	b.n	80078ee <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2bc8      	cmp	r3, #200	@ 0xc8
 80078e6:	d101      	bne.n	80078ec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e000      	b.n	80078ee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3301      	adds	r3, #1
 8007908:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007910:	d901      	bls.n	8007916 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e01b      	b.n	800794e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	daf2      	bge.n	8007904 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	019b      	lsls	r3, r3, #6
 8007926:	f043 0220 	orr.w	r2, r3, #32
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3301      	adds	r3, #1
 8007932:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800793a:	d901      	bls.n	8007940 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e006      	b.n	800794e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	f003 0320 	and.w	r3, r3, #32
 8007948:	2b20      	cmp	r3, #32
 800794a:	d0f0      	beq.n	800792e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800795a:	b480      	push	{r7}
 800795c:	b085      	sub	sp, #20
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3301      	adds	r3, #1
 800796a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007972:	d901      	bls.n	8007978 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e018      	b.n	80079aa <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	daf2      	bge.n	8007966 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007980:	2300      	movs	r3, #0
 8007982:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2210      	movs	r2, #16
 8007988:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	3301      	adds	r3, #1
 800798e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007996:	d901      	bls.n	800799c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e006      	b.n	80079aa <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	f003 0310 	and.w	r3, r3, #16
 80079a4:	2b10      	cmp	r3, #16
 80079a6:	d0f0      	beq.n	800798a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	f003 0301 	and.w	r3, r3, #1
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b085      	sub	sp, #20
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	3301      	adds	r3, #1
 80079e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079ea:	d901      	bls.n	80079f0 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e01b      	b.n	8007a28 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	daf2      	bge.n	80079de <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	f043 0201 	orr.w	r2, r3, #1
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a14:	d901      	bls.n	8007a1a <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e006      	b.n	8007a28 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d0f0      	beq.n	8007a08 <USB_CoreReset+0x36>

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a34:	b084      	sub	sp, #16
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b086      	sub	sp, #24
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007a42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a54:	461a      	mov	r2, r3
 8007a56:	2300      	movs	r3, #0
 8007a58:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a5e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a6a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	639a      	str	r2, [r3, #56]	@ 0x38


  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d119      	bne.n	8007ab2 <USB_HostInit+0x7e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d10a      	bne.n	8007a9c <USB_HostInit+0x68>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007a94:	f043 0304 	orr.w	r3, r3, #4
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	e014      	b.n	8007ac6 <USB_HostInit+0x92>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007aaa:	f023 0304 	bic.w	r3, r3, #4
 8007aae:	6013      	str	r3, [r2, #0]
 8007ab0:	e009      	b.n	8007ac6 <USB_HostInit+0x92>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007ac0:	f023 0304 	bic.w	r3, r3, #4
 8007ac4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ac6:	2110      	movs	r1, #16
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7ff ff14 	bl	80078f6 <USB_FlushTxFifo>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <USB_HostInit+0xa4>
  {
    ret = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7ff ff3e 	bl	800795a <USB_FlushRxFifo>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <USB_HostInit+0xb4>
  {
    ret = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	613b      	str	r3, [r7, #16]
 8007aec:	e015      	b.n	8007b1a <USB_HostInit+0xe6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007afa:	461a      	mov	r2, r3
 8007afc:	f04f 33ff 	mov.w	r3, #4294967295
 8007b00:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b0e:	461a      	mov	r2, r3
 8007b10:	2300      	movs	r3, #0
 8007b12:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	3301      	adds	r3, #1
 8007b18:	613b      	str	r3, [r7, #16]
 8007b1a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007b1e:	461a      	mov	r2, r3
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d3e3      	bcc.n	8007aee <USB_HostInit+0xba>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b32:	615a      	str	r2, [r3, #20]
  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x200U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b3a:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8007b7c <USB_HostInit+0x148>)
 8007b40:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a0e      	ldr	r2, [pc, #56]	@ (8007b80 <USB_HostInit+0x14c>)
 8007b46:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b4a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d105      	bne.n	8007b5e <USB_HostInit+0x12a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	f043 0210 	orr.w	r2, r3, #16
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	699a      	ldr	r2, [r3, #24]
 8007b62:	4b08      	ldr	r3, [pc, #32]	@ (8007b84 <USB_HostInit+0x150>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b76:	b004      	add	sp, #16
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	01000200 	.word	0x01000200
 8007b80:	00e00300 	.word	0x00e00300
 8007b84:	a3200008 	.word	0xa3200008

08007b88 <memset>:
 8007b88:	4402      	add	r2, r0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d100      	bne.n	8007b92 <memset+0xa>
 8007b90:	4770      	bx	lr
 8007b92:	f803 1b01 	strb.w	r1, [r3], #1
 8007b96:	e7f9      	b.n	8007b8c <memset+0x4>

08007b98 <__libc_init_array>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	4d0d      	ldr	r5, [pc, #52]	@ (8007bd0 <__libc_init_array+0x38>)
 8007b9c:	4c0d      	ldr	r4, [pc, #52]	@ (8007bd4 <__libc_init_array+0x3c>)
 8007b9e:	1b64      	subs	r4, r4, r5
 8007ba0:	10a4      	asrs	r4, r4, #2
 8007ba2:	2600      	movs	r6, #0
 8007ba4:	42a6      	cmp	r6, r4
 8007ba6:	d109      	bne.n	8007bbc <__libc_init_array+0x24>
 8007ba8:	4d0b      	ldr	r5, [pc, #44]	@ (8007bd8 <__libc_init_array+0x40>)
 8007baa:	4c0c      	ldr	r4, [pc, #48]	@ (8007bdc <__libc_init_array+0x44>)
 8007bac:	f000 f818 	bl	8007be0 <_init>
 8007bb0:	1b64      	subs	r4, r4, r5
 8007bb2:	10a4      	asrs	r4, r4, #2
 8007bb4:	2600      	movs	r6, #0
 8007bb6:	42a6      	cmp	r6, r4
 8007bb8:	d105      	bne.n	8007bc6 <__libc_init_array+0x2e>
 8007bba:	bd70      	pop	{r4, r5, r6, pc}
 8007bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc0:	4798      	blx	r3
 8007bc2:	3601      	adds	r6, #1
 8007bc4:	e7ee      	b.n	8007ba4 <__libc_init_array+0xc>
 8007bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bca:	4798      	blx	r3
 8007bcc:	3601      	adds	r6, #1
 8007bce:	e7f2      	b.n	8007bb6 <__libc_init_array+0x1e>
 8007bd0:	08007c38 	.word	0x08007c38
 8007bd4:	08007c38 	.word	0x08007c38
 8007bd8:	08007c38 	.word	0x08007c38
 8007bdc:	08007c3c 	.word	0x08007c3c

08007be0 <_init>:
 8007be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be2:	bf00      	nop
 8007be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007be6:	bc08      	pop	{r3}
 8007be8:	469e      	mov	lr, r3
 8007bea:	4770      	bx	lr

08007bec <_fini>:
 8007bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bee:	bf00      	nop
 8007bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bf2:	bc08      	pop	{r3}
 8007bf4:	469e      	mov	lr, r3
 8007bf6:	4770      	bx	lr

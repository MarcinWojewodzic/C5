
C5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab28  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800adf4  0800adf4  0000bdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ae34  0800ae34  0000be34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ae3c  0800ae3c  0000be3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ae40  0800ae40  0000be40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800ae44  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b00  24000010  0800ae54  0000c010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000b10  0800ae54  0000cb10  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025290  00000000  00000000  0000c03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046dd  00000000  00000000  000312ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001cf8  00000000  00000000  000359b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000016a7  00000000  00000000  000376a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037b10  00000000  00000000  00038d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b388  00000000  00000000  0007085f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015eaed  00000000  00000000  0009bbe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fa6d4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007c68  00000000  00000000  001fa718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  00202380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800addc 	.word	0x0800addc

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800addc 	.word	0x0800addc

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000600:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <MX_DFSDM1_Init+0xb4>)
 8000602:	4a2c      	ldr	r2, [pc, #176]	@ (80006b4 <MX_DFSDM1_Init+0xb8>)
 8000604:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000606:	4b2a      	ldr	r3, [pc, #168]	@ (80006b0 <MX_DFSDM1_Init+0xb4>)
 8000608:	2200      	movs	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 800060c:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <MX_DFSDM1_Init+0xb4>)
 800060e:	2200      	movs	r2, #0
 8000610:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000612:	4b27      	ldr	r3, [pc, #156]	@ (80006b0 <MX_DFSDM1_Init+0xb4>)
 8000614:	2201      	movs	r2, #1
 8000616:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8000618:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <MX_DFSDM1_Init+0xb4>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 1;
 800061e:	4b24      	ldr	r3, [pc, #144]	@ (80006b0 <MX_DFSDM1_Init+0xb4>)
 8000620:	2201      	movs	r2, #1
 8000622:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000624:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <MX_DFSDM1_Init+0xb4>)
 8000626:	2201      	movs	r2, #1
 8000628:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800062a:	4821      	ldr	r0, [pc, #132]	@ (80006b0 <MX_DFSDM1_Init+0xb4>)
 800062c:	f002 f936 	bl	800289c <HAL_DFSDM_FilterInit>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 8000636:	f000 fd81 	bl	800113c <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800063a:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <MX_DFSDM1_Init+0xbc>)
 800063c:	4a1f      	ldr	r2, [pc, #124]	@ (80006bc <MX_DFSDM1_Init+0xc0>)
 800063e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000640:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <MX_DFSDM1_Init+0xbc>)
 8000642:	2201      	movs	r2, #1
 8000644:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000646:	4b1c      	ldr	r3, [pc, #112]	@ (80006b8 <MX_DFSDM1_Init+0xbc>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 800064c:	4b1a      	ldr	r3, [pc, #104]	@ (80006b8 <MX_DFSDM1_Init+0xbc>)
 800064e:	2202      	movs	r2, #2
 8000650:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000652:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <MX_DFSDM1_Init+0xbc>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000658:	4b17      	ldr	r3, [pc, #92]	@ (80006b8 <MX_DFSDM1_Init+0xbc>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800065e:	4b16      	ldr	r3, [pc, #88]	@ (80006b8 <MX_DFSDM1_Init+0xbc>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000664:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <MX_DFSDM1_Init+0xbc>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800066a:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <MX_DFSDM1_Init+0xbc>)
 800066c:	2204      	movs	r2, #4
 800066e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000670:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <MX_DFSDM1_Init+0xbc>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000676:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <MX_DFSDM1_Init+0xbc>)
 8000678:	2201      	movs	r2, #1
 800067a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800067c:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <MX_DFSDM1_Init+0xbc>)
 800067e:	2200      	movs	r2, #0
 8000680:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000682:	4b0d      	ldr	r3, [pc, #52]	@ (80006b8 <MX_DFSDM1_Init+0xbc>)
 8000684:	2200      	movs	r2, #0
 8000686:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000688:	480b      	ldr	r0, [pc, #44]	@ (80006b8 <MX_DFSDM1_Init+0xbc>)
 800068a:	f002 f83f 	bl	800270c <HAL_DFSDM_ChannelInit>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_DFSDM1_Init+0x9c>
  {
    Error_Handler();
 8000694:	f000 fd52 	bl	800113c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000698:	2201      	movs	r2, #1
 800069a:	4909      	ldr	r1, [pc, #36]	@ (80006c0 <MX_DFSDM1_Init+0xc4>)
 800069c:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <MX_DFSDM1_Init+0xb4>)
 800069e:	f002 f9d9 	bl	8002a54 <HAL_DFSDM_FilterConfigRegChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_DFSDM1_Init+0xb0>
  {
    Error_Handler();
 80006a8:	f000 fd48 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2400002c 	.word	0x2400002c
 80006b4:	40017900 	.word	0x40017900
 80006b8:	24000080 	.word	0x24000080
 80006bc:	40017840 	.word	0x40017840
 80006c0:	00020004 	.word	0x00020004

080006c4 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0b8      	sub	sp, #224	@ 0xe0
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	22b8      	movs	r2, #184	@ 0xb8
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f00a fb4d 	bl	800ad84 <memset>
  if(DFSDM1_Init == 0)
 80006ea:	4b4a      	ldr	r3, [pc, #296]	@ (8000814 <HAL_DFSDM_FilterMspInit+0x150>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d153      	bne.n	800079a <HAL_DFSDM_FilterMspInit+0xd6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80006f2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80006f6:	f04f 0300 	mov.w	r3, #0
 80006fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 80006fe:	2300      	movs	r3, #0
 8000700:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	4618      	mov	r0, r3
 8000708:	f006 f8bc 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <HAL_DFSDM_FilterMspInit+0x52>
    {
      Error_Handler();
 8000712:	f000 fd13 	bl	800113c <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000716:	4b40      	ldr	r3, [pc, #256]	@ (8000818 <HAL_DFSDM_FilterMspInit+0x154>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	4a3e      	ldr	r2, [pc, #248]	@ (8000818 <HAL_DFSDM_FilterMspInit+0x154>)
 800071e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000720:	4b3d      	ldr	r3, [pc, #244]	@ (8000818 <HAL_DFSDM_FilterMspInit+0x154>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d10e      	bne.n	8000746 <HAL_DFSDM_FilterMspInit+0x82>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000728:	4b3c      	ldr	r3, [pc, #240]	@ (800081c <HAL_DFSDM_FilterMspInit+0x158>)
 800072a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800072e:	4a3b      	ldr	r2, [pc, #236]	@ (800081c <HAL_DFSDM_FilterMspInit+0x158>)
 8000730:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000734:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000738:	4b38      	ldr	r3, [pc, #224]	@ (800081c <HAL_DFSDM_FilterMspInit+0x158>)
 800073a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800073e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000746:	4b35      	ldr	r3, [pc, #212]	@ (800081c <HAL_DFSDM_FilterMspInit+0x158>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074c:	4a33      	ldr	r2, [pc, #204]	@ (800081c <HAL_DFSDM_FilterMspInit+0x158>)
 800074e:	f043 0310 	orr.w	r3, r3, #16
 8000752:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000756:	4b31      	ldr	r3, [pc, #196]	@ (800081c <HAL_DFSDM_FilterMspInit+0x158>)
 8000758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075c:	f003 0310 	and.w	r3, r3, #16
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000764:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000768:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800077e:	2303      	movs	r3, #3
 8000780:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000784:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000788:	4619      	mov	r1, r3
 800078a:	4825      	ldr	r0, [pc, #148]	@ (8000820 <HAL_DFSDM_FilterMspInit+0x15c>)
 800078c:	f003 feb2 	bl	80044f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000790:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <HAL_DFSDM_FilterMspInit+0x150>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	4a1f      	ldr	r2, [pc, #124]	@ (8000814 <HAL_DFSDM_FilterMspInit+0x150>)
 8000798:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a21      	ldr	r2, [pc, #132]	@ (8000824 <HAL_DFSDM_FilterMspInit+0x160>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d132      	bne.n	800080a <HAL_DFSDM_FilterMspInit+0x146>
    hdma_dfsdm1_flt0.Instance = DMA1_Stream1;
 80007a4:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <HAL_DFSDM_FilterMspInit+0x164>)
 80007a6:	4a21      	ldr	r2, [pc, #132]	@ (800082c <HAL_DFSDM_FilterMspInit+0x168>)
 80007a8:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 80007aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <HAL_DFSDM_FilterMspInit+0x164>)
 80007ac:	2265      	movs	r2, #101	@ 0x65
 80007ae:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <HAL_DFSDM_FilterMspInit+0x164>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80007b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <HAL_DFSDM_FilterMspInit+0x164>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80007bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <HAL_DFSDM_FilterMspInit+0x164>)
 80007be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007c2:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007c4:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <HAL_DFSDM_FilterMspInit+0x164>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <HAL_DFSDM_FilterMspInit+0x164>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <HAL_DFSDM_FilterMspInit+0x164>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <HAL_DFSDM_FilterMspInit+0x164>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <HAL_DFSDM_FilterMspInit+0x164>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80007e2:	4811      	ldr	r0, [pc, #68]	@ (8000828 <HAL_DFSDM_FilterMspInit+0x164>)
 80007e4:	f002 f9c8 	bl	8002b78 <HAL_DMA_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <HAL_DFSDM_FilterMspInit+0x12e>
    {
      Error_Handler();
 80007ee:	f000 fca5 	bl	800113c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000828 <HAL_DFSDM_FilterMspInit+0x164>)
 80007f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000828 <HAL_DFSDM_FilterMspInit+0x164>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a09      	ldr	r2, [pc, #36]	@ (8000828 <HAL_DFSDM_FilterMspInit+0x164>)
 8000802:	629a      	str	r2, [r3, #40]	@ 0x28
 8000804:	4a08      	ldr	r2, [pc, #32]	@ (8000828 <HAL_DFSDM_FilterMspInit+0x164>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6393      	str	r3, [r2, #56]	@ 0x38
  }

}
 800080a:	bf00      	nop
 800080c:	37e0      	adds	r7, #224	@ 0xe0
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	24000134 	.word	0x24000134
 8000818:	24000130 	.word	0x24000130
 800081c:	58024400 	.word	0x58024400
 8000820:	58021000 	.word	0x58021000
 8000824:	40017900 	.word	0x40017900
 8000828:	240000b8 	.word	0x240000b8
 800082c:	40020028 	.word	0x40020028

08000830 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b0b8      	sub	sp, #224	@ 0xe0
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	22b8      	movs	r2, #184	@ 0xb8
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f00a fa97 	bl	800ad84 <memset>
  if(DFSDM1_Init == 0)
 8000856:	4b2e      	ldr	r3, [pc, #184]	@ (8000910 <HAL_DFSDM_ChannelMspInit+0xe0>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d153      	bne.n	8000906 <HAL_DFSDM_ChannelMspInit+0xd6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800085e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000862:	f04f 0300 	mov.w	r3, #0
 8000866:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 800086a:	2300      	movs	r3, #0
 800086c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	4618      	mov	r0, r3
 8000874:	f006 f806 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <HAL_DFSDM_ChannelMspInit+0x52>
    {
      Error_Handler();
 800087e:	f000 fc5d 	bl	800113c <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000882:	4b24      	ldr	r3, [pc, #144]	@ (8000914 <HAL_DFSDM_ChannelMspInit+0xe4>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	4a22      	ldr	r2, [pc, #136]	@ (8000914 <HAL_DFSDM_ChannelMspInit+0xe4>)
 800088a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800088c:	4b21      	ldr	r3, [pc, #132]	@ (8000914 <HAL_DFSDM_ChannelMspInit+0xe4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d10e      	bne.n	80008b2 <HAL_DFSDM_ChannelMspInit+0x82>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000894:	4b20      	ldr	r3, [pc, #128]	@ (8000918 <HAL_DFSDM_ChannelMspInit+0xe8>)
 8000896:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800089a:	4a1f      	ldr	r2, [pc, #124]	@ (8000918 <HAL_DFSDM_ChannelMspInit+0xe8>)
 800089c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80008a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80008a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <HAL_DFSDM_ChannelMspInit+0xe8>)
 80008a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80008aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <HAL_DFSDM_ChannelMspInit+0xe8>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b8:	4a17      	ldr	r2, [pc, #92]	@ (8000918 <HAL_DFSDM_ChannelMspInit+0xe8>)
 80008ba:	f043 0310 	orr.w	r3, r3, #16
 80008be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c2:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <HAL_DFSDM_ChannelMspInit+0xe8>)
 80008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c8:	f003 0310 	and.w	r3, r3, #16
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80008d0:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80008d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80008ea:	2303      	movs	r3, #3
 80008ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80008f4:	4619      	mov	r1, r3
 80008f6:	4809      	ldr	r0, [pc, #36]	@ (800091c <HAL_DFSDM_ChannelMspInit+0xec>)
 80008f8:	f003 fdfc 	bl	80044f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80008fc:	4b04      	ldr	r3, [pc, #16]	@ (8000910 <HAL_DFSDM_ChannelMspInit+0xe0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	4a03      	ldr	r2, [pc, #12]	@ (8000910 <HAL_DFSDM_ChannelMspInit+0xe0>)
 8000904:	6013      	str	r3, [r2, #0]
  }
}
 8000906:	bf00      	nop
 8000908:	37e0      	adds	r7, #224	@ 0xe0
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	24000134 	.word	0x24000134
 8000914:	24000130 	.word	0x24000130
 8000918:	58024400 	.word	0x58024400
 800091c:	58021000 	.word	0x58021000

08000920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_DMA_Init+0x4c>)
 8000928:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800092c:	4a0f      	ldr	r2, [pc, #60]	@ (800096c <MX_DMA_Init+0x4c>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000936:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <MX_DMA_Init+0x4c>)
 8000938:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	200b      	movs	r0, #11
 800094a:	f001 feaa 	bl	80026a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800094e:	200b      	movs	r0, #11
 8000950:	f001 fec1 	bl	80026d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	200c      	movs	r0, #12
 800095a:	f001 fea2 	bl	80026a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800095e:	200c      	movs	r0, #12
 8000960:	f001 feb9 	bl	80026d6 <HAL_NVIC_EnableIRQ>

}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	58024400 	.word	0x58024400

08000970 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08e      	sub	sp, #56	@ 0x38
 8000974:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000986:	4ba2      	ldr	r3, [pc, #648]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098c:	4aa0      	ldr	r2, [pc, #640]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 800098e:	f043 0310 	orr.w	r3, r3, #16
 8000992:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000996:	4b9e      	ldr	r3, [pc, #632]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099c:	f003 0310 	and.w	r3, r3, #16
 80009a0:	623b      	str	r3, [r7, #32]
 80009a2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a4:	4b9a      	ldr	r3, [pc, #616]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009aa:	4a99      	ldr	r2, [pc, #612]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b4:	4b96      	ldr	r3, [pc, #600]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	61fb      	str	r3, [r7, #28]
 80009c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c2:	4b93      	ldr	r3, [pc, #588]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c8:	4a91      	ldr	r2, [pc, #580]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 80009ca:	f043 0320 	orr.w	r3, r3, #32
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d2:	4b8f      	ldr	r3, [pc, #572]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d8:	f003 0320 	and.w	r3, r3, #32
 80009dc:	61bb      	str	r3, [r7, #24]
 80009de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e0:	4b8b      	ldr	r3, [pc, #556]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e6:	4a8a      	ldr	r2, [pc, #552]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f0:	4b87      	ldr	r3, [pc, #540]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	4b84      	ldr	r3, [pc, #528]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a04:	4a82      	ldr	r2, [pc, #520]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a0e:	4b80      	ldr	r3, [pc, #512]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1c:	4b7c      	ldr	r3, [pc, #496]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a22:	4a7b      	ldr	r2, [pc, #492]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a2c:	4b78      	ldr	r3, [pc, #480]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3a:	4b75      	ldr	r3, [pc, #468]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a40:	4a73      	ldr	r2, [pc, #460]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 8000a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4a:	4b71      	ldr	r3, [pc, #452]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a58:	4b6d      	ldr	r3, [pc, #436]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5e:	4a6c      	ldr	r2, [pc, #432]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a68:	4b69      	ldr	r3, [pc, #420]	@ (8000c10 <MX_GPIO_Init+0x2a0>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD1331_RES_GPIO_Port, SSD1331_RES_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2108      	movs	r1, #8
 8000a7a:	4866      	ldr	r0, [pc, #408]	@ (8000c14 <MX_GPIO_Init+0x2a4>)
 8000a7c:	f003 fee2 	bl	8004844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD1331_DC_GPIO_Port, SSD1331_DC_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2110      	movs	r1, #16
 8000a84:	4863      	ldr	r0, [pc, #396]	@ (8000c14 <MX_GPIO_Init+0x2a4>)
 8000a86:	f003 fedd 	bl	8004844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD1331_CS_GPIO_Port, SSD1331_CS_Pin, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a90:	4861      	ldr	r0, [pc, #388]	@ (8000c18 <MX_GPIO_Init+0x2a8>)
 8000a92:	f003 fed7 	bl	8004844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	2104      	movs	r1, #4
 8000a9a:	4860      	ldr	r0, [pc, #384]	@ (8000c1c <MX_GPIO_Init+0x2ac>)
 8000a9c:	f003 fed2 	bl	8004844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin|FRAM_CS_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000aa6:	485e      	ldr	r0, [pc, #376]	@ (8000c20 <MX_GPIO_Init+0x2b0>)
 8000aa8:	f003 fecc 	bl	8004844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM330_CS_GPIO_Port, ISM330_CS_Pin, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2101      	movs	r1, #1
 8000ab0:	485c      	ldr	r0, [pc, #368]	@ (8000c24 <MX_GPIO_Init+0x2b4>)
 8000ab2:	f003 fec7 	bl	8004844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1331_RES_Pin;
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SSD1331_RES_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aca:	4619      	mov	r1, r3
 8000acc:	4851      	ldr	r0, [pc, #324]	@ (8000c14 <MX_GPIO_Init+0x2a4>)
 8000ace:	f003 fd11 	bl	80044f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1331_DC_Pin;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SSD1331_DC_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	484a      	ldr	r0, [pc, #296]	@ (8000c14 <MX_GPIO_Init+0x2a4>)
 8000aea:	f003 fd03 	bl	80044f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1331_CS_Pin;
 8000aee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SSD1331_CS_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	4844      	ldr	r0, [pc, #272]	@ (8000c18 <MX_GPIO_Init+0x2a8>)
 8000b08:	f003 fcf4 	bl	80044f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	483e      	ldr	r0, [pc, #248]	@ (8000c1c <MX_GPIO_Init+0x2ac>)
 8000b24:	f003 fce6 	bl	80044f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STM_ESP_PIN1_Pin|STM_ESP_PIN2_Pin;
 8000b28:	2318      	movs	r3, #24
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4838      	ldr	r0, [pc, #224]	@ (8000c1c <MX_GPIO_Init+0x2ac>)
 8000b3c:	f003 fcda 	bl	80044f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LSM303_INT2_Pin|LSM303_INT1_Pin;
 8000b40:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b46:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	482f      	ldr	r0, [pc, #188]	@ (8000c14 <MX_GPIO_Init+0x2a4>)
 8000b58:	f003 fccc 	bl	80044f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LSM303_INT_MAG_Pin;
 8000b5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b62:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LSM303_INT_MAG_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	482d      	ldr	r0, [pc, #180]	@ (8000c28 <MX_GPIO_Init+0x2b8>)
 8000b74:	f003 fcbe 	bl	80044f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000b78:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4823      	ldr	r0, [pc, #140]	@ (8000c20 <MX_GPIO_Init+0x2b0>)
 8000b92:	f003 fcaf 	bl	80044f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53_INT_Pin|VL53_EN_Pin;
 8000b96:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	481a      	ldr	r0, [pc, #104]	@ (8000c18 <MX_GPIO_Init+0x2a8>)
 8000bae:	f003 fca1 	bl	80044f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISM330_CS_Pin;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ISM330_CS_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4816      	ldr	r0, [pc, #88]	@ (8000c24 <MX_GPIO_Init+0x2b4>)
 8000bca:	f003 fc93 	bl	80044f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = ISM330_INT1_Pin|ISM330_INT2_Pin;
 8000bce:	2306      	movs	r3, #6
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be0:	4619      	mov	r1, r3
 8000be2:	4810      	ldr	r0, [pc, #64]	@ (8000c24 <MX_GPIO_Init+0x2b4>)
 8000be4:	f003 fc86 	bl	80044f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FRAM_CS_Pin;
 8000be8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FRAM_CS_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4807      	ldr	r0, [pc, #28]	@ (8000c20 <MX_GPIO_Init+0x2b0>)
 8000c02:	f003 fc77 	bl	80044f4 <HAL_GPIO_Init>

}
 8000c06:	bf00      	nop
 8000c08:	3738      	adds	r7, #56	@ 0x38
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	58024400 	.word	0x58024400
 8000c14:	58021000 	.word	0x58021000
 8000c18:	58020800 	.word	0x58020800
 8000c1c:	58020000 	.word	0x58020000
 8000c20:	58021800 	.word	0x58021800
 8000c24:	58020c00 	.word	0x58020c00
 8000c28:	58020400 	.word	0x58020400

08000c2c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <MX_I2C1_Init+0x74>)
 8000c32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca4 <MX_I2C1_Init+0x78>)
 8000c34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <MX_I2C1_Init+0x74>)
 8000c38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca8 <MX_I2C1_Init+0x7c>)
 8000c3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <MX_I2C1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c42:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <MX_I2C1_Init+0x74>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c48:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <MX_I2C1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <MX_I2C1_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <MX_I2C1_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_I2C1_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_I2C1_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c66:	480e      	ldr	r0, [pc, #56]	@ (8000ca0 <MX_I2C1_Init+0x74>)
 8000c68:	f003 fe62 	bl	8004930 <HAL_I2C_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c72:	f000 fa63 	bl	800113c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c76:	2100      	movs	r1, #0
 8000c78:	4809      	ldr	r0, [pc, #36]	@ (8000ca0 <MX_I2C1_Init+0x74>)
 8000c7a:	f003 fef5 	bl	8004a68 <HAL_I2CEx_ConfigAnalogFilter>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c84:	f000 fa5a 	bl	800113c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_I2C1_Init+0x74>)
 8000c8c:	f003 ff37 	bl	8004afe <HAL_I2CEx_ConfigDigitalFilter>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c96:	f000 fa51 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	24000138 	.word	0x24000138
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	60404e72 	.word	0x60404e72

08000cac <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <MX_I2C2_Init+0x74>)
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d24 <MX_I2C2_Init+0x78>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_I2C2_Init+0x74>)
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d28 <MX_I2C2_Init+0x7c>)
 8000cba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <MX_I2C2_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_I2C2_Init+0x74>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <MX_I2C2_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cce:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_I2C2_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <MX_I2C2_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_I2C2_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_I2C2_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ce6:	480e      	ldr	r0, [pc, #56]	@ (8000d20 <MX_I2C2_Init+0x74>)
 8000ce8:	f003 fe22 	bl	8004930 <HAL_I2C_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cf2:	f000 fa23 	bl	800113c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4809      	ldr	r0, [pc, #36]	@ (8000d20 <MX_I2C2_Init+0x74>)
 8000cfa:	f003 feb5 	bl	8004a68 <HAL_I2CEx_ConfigAnalogFilter>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d04:	f000 fa1a 	bl	800113c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_I2C2_Init+0x74>)
 8000d0c:	f003 fef7 	bl	8004afe <HAL_I2CEx_ConfigDigitalFilter>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d16:	f000 fa11 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2400018c 	.word	0x2400018c
 8000d24:	40005800 	.word	0x40005800
 8000d28:	60404e72 	.word	0x60404e72

08000d2c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <MX_I2C3_Init+0x74>)
 8000d32:	4a1c      	ldr	r2, [pc, #112]	@ (8000da4 <MX_I2C3_Init+0x78>)
 8000d34:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x60404E72;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <MX_I2C3_Init+0x74>)
 8000d38:	4a1b      	ldr	r2, [pc, #108]	@ (8000da8 <MX_I2C3_Init+0x7c>)
 8000d3a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <MX_I2C3_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d42:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <MX_I2C3_Init+0x74>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d48:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <MX_I2C3_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <MX_I2C3_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d54:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <MX_I2C3_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <MX_I2C3_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <MX_I2C3_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d66:	480e      	ldr	r0, [pc, #56]	@ (8000da0 <MX_I2C3_Init+0x74>)
 8000d68:	f003 fde2 	bl	8004930 <HAL_I2C_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000d72:	f000 f9e3 	bl	800113c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d76:	2100      	movs	r1, #0
 8000d78:	4809      	ldr	r0, [pc, #36]	@ (8000da0 <MX_I2C3_Init+0x74>)
 8000d7a:	f003 fe75 	bl	8004a68 <HAL_I2CEx_ConfigAnalogFilter>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000d84:	f000 f9da 	bl	800113c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_I2C3_Init+0x74>)
 8000d8c:	f003 feb7 	bl	8004afe <HAL_I2CEx_ConfigDigitalFilter>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000d96:	f000 f9d1 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	240001e0 	.word	0x240001e0
 8000da4:	40005c00 	.word	0x40005c00
 8000da8:	60404e72 	.word	0x60404e72

08000dac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0be      	sub	sp, #248	@ 0xf8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dc8:	22b8      	movs	r2, #184	@ 0xb8
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f009 ffd9 	bl	800ad84 <memset>
  if(i2cHandle->Instance==I2C1)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a86      	ldr	r2, [pc, #536]	@ (8000ff0 <HAL_I2C_MspInit+0x244>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d146      	bne.n	8000e6a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ddc:	f04f 0208 	mov.w	r2, #8
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000df2:	4618      	mov	r0, r3
 8000df4:	f005 fd46 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000dfe:	f000 f99d 	bl	800113c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b7c      	ldr	r3, [pc, #496]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	4a7a      	ldr	r2, [pc, #488]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000e0a:	f043 0302 	orr.w	r3, r3, #2
 8000e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e12:	4b78      	ldr	r3, [pc, #480]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e20:	23c0      	movs	r3, #192	@ 0xc0
 8000e22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e26:	2312      	movs	r3, #18
 8000e28:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e42:	4619      	mov	r1, r3
 8000e44:	486c      	ldr	r0, [pc, #432]	@ (8000ff8 <HAL_I2C_MspInit+0x24c>)
 8000e46:	f003 fb55 	bl	80044f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e4a:	4b6a      	ldr	r3, [pc, #424]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e50:	4a68      	ldr	r2, [pc, #416]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000e52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e56:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e5a:	4b66      	ldr	r3, [pc, #408]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e64:	623b      	str	r3, [r7, #32]
 8000e66:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000e68:	e0bd      	b.n	8000fe6 <HAL_I2C_MspInit+0x23a>
  else if(i2cHandle->Instance==I2C2)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a63      	ldr	r2, [pc, #396]	@ (8000ffc <HAL_I2C_MspInit+0x250>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d147      	bne.n	8000f04 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e74:	f04f 0208 	mov.w	r2, #8
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f005 fcfa 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000e96:	f000 f951 	bl	800113c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b56      	ldr	r3, [pc, #344]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea0:	4a54      	ldr	r2, [pc, #336]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eaa:	4b52      	ldr	r3, [pc, #328]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000eb8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ebc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec0:	2312      	movs	r3, #18
 8000ec2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000edc:	4619      	mov	r1, r3
 8000ede:	4846      	ldr	r0, [pc, #280]	@ (8000ff8 <HAL_I2C_MspInit+0x24c>)
 8000ee0:	f003 fb08 	bl	80044f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ee4:	4b43      	ldr	r3, [pc, #268]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000ee6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eea:	4a42      	ldr	r2, [pc, #264]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000eec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ef0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000ef6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000efe:	61bb      	str	r3, [r7, #24]
 8000f00:	69bb      	ldr	r3, [r7, #24]
}
 8000f02:	e070      	b.n	8000fe6 <HAL_I2C_MspInit+0x23a>
  else if(i2cHandle->Instance==I2C3)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a3d      	ldr	r2, [pc, #244]	@ (8001000 <HAL_I2C_MspInit+0x254>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d16b      	bne.n	8000fe6 <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000f0e:	f04f 0208 	mov.w	r2, #8
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f24:	4618      	mov	r0, r3
 8000f26:	f005 fcad 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8000f30:	f000 f904 	bl	800113c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f34:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f44:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b28      	ldr	r3, [pc, #160]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f58:	4a26      	ldr	r2, [pc, #152]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f62:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f78:	2312      	movs	r3, #18
 8000f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f90:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f94:	4619      	mov	r1, r3
 8000f96:	481b      	ldr	r0, [pc, #108]	@ (8001004 <HAL_I2C_MspInit+0x258>)
 8000f98:	f003 faac 	bl	80044f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fa0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa4:	2312      	movs	r3, #18
 8000fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4811      	ldr	r0, [pc, #68]	@ (8001008 <HAL_I2C_MspInit+0x25c>)
 8000fc4:	f003 fa96 	bl	80044f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fce:	4a09      	ldr	r2, [pc, #36]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000fd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000fd4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_I2C_MspInit+0x248>)
 8000fda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
}
 8000fe6:	bf00      	nop
 8000fe8:	37f8      	adds	r7, #248	@ 0xf8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	58024400 	.word	0x58024400
 8000ff8:	58020400 	.word	0x58020400
 8000ffc:	40005800 	.word	0x40005800
 8001000:	40005c00 	.word	0x40005c00
 8001004:	58020800 	.word	0x58020800
 8001008:	58020000 	.word	0x58020000

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001010:	f001 f992 	bl	8002338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001014:	f000 f822 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001018:	f7ff fcaa 	bl	8000970 <MX_GPIO_Init>
  MX_DMA_Init();
 800101c:	f7ff fc80 	bl	8000920 <MX_DMA_Init>
  MX_OCTOSPI1_Init();
 8001020:	f000 f892 	bl	8001148 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8001024:	f000 f8ee 	bl	8001204 <MX_OCTOSPI2_Init>
  MX_SPI1_Init();
 8001028:	f000 fad6 	bl	80015d8 <MX_SPI1_Init>
  MX_SPI3_Init();
 800102c:	f000 fb2a 	bl	8001684 <MX_SPI3_Init>
  MX_SPI4_Init();
 8001030:	f000 fb7e 	bl	8001730 <MX_SPI4_Init>
  MX_UART4_Init();
 8001034:	f000 ff04 	bl	8001e40 <MX_UART4_Init>
  MX_USB_OTG_HS_HCD_Init();
 8001038:	f001 f8ee 	bl	8002218 <MX_USB_OTG_HS_HCD_Init>
  MX_UART7_Init();
 800103c:	f000 ff4c 	bl	8001ed8 <MX_UART7_Init>
  MX_USART1_UART_Init();
 8001040:	f000 ff96 	bl	8001f70 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001044:	f7ff fdf2 	bl	8000c2c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001048:	f7ff fe30 	bl	8000cac <MX_I2C2_Init>
  MX_TIM3_Init();
 800104c:	f000 fdf2 	bl	8001c34 <MX_TIM3_Init>
  MX_I2C3_Init();
 8001050:	f7ff fe6c 	bl	8000d2c <MX_I2C3_Init>
  MX_DFSDM1_Init();
 8001054:	f7ff fad2 	bl	80005fc <MX_DFSDM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <main+0x4c>

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b09c      	sub	sp, #112	@ 0x70
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001066:	224c      	movs	r2, #76	@ 0x4c
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f009 fe8a 	bl	800ad84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2220      	movs	r2, #32
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f009 fe84 	bl	800ad84 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800107c:	2004      	movs	r0, #4
 800107e:	f004 fc31 	bl	80058e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001082:	2300      	movs	r3, #0
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	4b2c      	ldr	r3, [pc, #176]	@ (8001138 <SystemClock_Config+0xdc>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	4a2b      	ldr	r2, [pc, #172]	@ (8001138 <SystemClock_Config+0xdc>)
 800108c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001090:	6193      	str	r3, [r2, #24]
 8001092:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <SystemClock_Config+0xdc>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800109e:	bf00      	nop
 80010a0:	4b25      	ldr	r3, [pc, #148]	@ (8001138 <SystemClock_Config+0xdc>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010ac:	d1f8      	bne.n	80010a0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80010ae:	2321      	movs	r3, #33	@ 0x21
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010b8:	2301      	movs	r3, #1
 80010ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010bc:	2302      	movs	r3, #2
 80010be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c0:	2302      	movs	r3, #2
 80010c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80010c8:	232c      	movs	r3, #44	@ 0x2c
 80010ca:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80010d0:	2305      	movs	r3, #5
 80010d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010d8:	230c      	movs	r3, #12
 80010da:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010dc:	2300      	movs	r3, #0
 80010de:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e8:	4618      	mov	r0, r3
 80010ea:	f004 fc65 	bl	80059b8 <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010f4:	f000 f822 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f8:	233f      	movs	r3, #63	@ 0x3f
 80010fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fc:	2303      	movs	r3, #3
 80010fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001104:	2308      	movs	r3, #8
 8001106:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001108:	2340      	movs	r3, #64	@ 0x40
 800110a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800110c:	2340      	movs	r3, #64	@ 0x40
 800110e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001114:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001116:	2340      	movs	r3, #64	@ 0x40
 8001118:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2103      	movs	r1, #3
 800111e:	4618      	mov	r0, r3
 8001120:	f005 f824 	bl	800616c <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800112a:	f000 f807 	bl	800113c <Error_Handler>
  }
}
 800112e:	bf00      	nop
 8001130:	3770      	adds	r7, #112	@ 0x70
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	58024800 	.word	0x58024800

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <Error_Handler+0x8>

08001148 <MX_OCTOSPI1_Init>:
OSPI_HandleTypeDef hospi1;
OSPI_HandleTypeDef hospi2;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800114e:	463b      	mov	r3, r7
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 800115e:	4b27      	ldr	r3, [pc, #156]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 8001160:	4a27      	ldr	r2, [pc, #156]	@ (8001200 <MX_OCTOSPI1_Init+0xb8>)
 8001162:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001164:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 8001166:	2201      	movs	r2, #1
 8001168:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800116a:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001170:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001176:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 8001178:	2220      	movs	r2, #32
 800117a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800117c:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 800117e:	2201      	movs	r2, #1
 8001180:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001182:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001188:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800118e:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 8001196:	2201      	movs	r2, #1
 8001198:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800119a:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 80011ae:	2208      	movs	r2, #8
 80011b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 80011b2:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 80011b8:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80011be:	480f      	ldr	r0, [pc, #60]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 80011c0:	f003 fcea 	bl	8004b98 <HAL_OSPI_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_OCTOSPI1_Init+0x86>
  {
    Error_Handler();
 80011ca:	f7ff ffb7 	bl	800113c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 80011d2:	2301      	movs	r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80011d6:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80011da:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011dc:	463b      	mov	r3, r7
 80011de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_OCTOSPI1_Init+0xb4>)
 80011e6:	f003 fda3 	bl	8004d30 <HAL_OSPIM_Config>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_OCTOSPI1_Init+0xac>
  {
    Error_Handler();
 80011f0:	f7ff ffa4 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	24000234 	.word	0x24000234
 8001200:	52005000 	.word	0x52005000

08001204 <MX_OCTOSPI2_Init>:
/* OCTOSPI2 init function */
void MX_OCTOSPI2_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800120a:	463b      	mov	r3, r7
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  hospi2.Instance = OCTOSPI2;
 800121a:	4b27      	ldr	r3, [pc, #156]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 800121c:	4a27      	ldr	r2, [pc, #156]	@ (80012bc <MX_OCTOSPI2_Init+0xb8>)
 800121e:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8001220:	4b25      	ldr	r3, [pc, #148]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 8001222:	2201      	movs	r2, #1
 8001224:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001226:	4b24      	ldr	r3, [pc, #144]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 800122c:	4b22      	ldr	r3, [pc, #136]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8001232:	4b21      	ldr	r3, [pc, #132]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 8001234:	2220      	movs	r2, #32
 8001236:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8001238:	4b1f      	ldr	r3, [pc, #124]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 800123a:	2201      	movs	r2, #1
 800123c:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800123e:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001244:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800124a:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 8001250:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 8001252:	2201      	movs	r2, #1
 8001254:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001256:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 8001258:	2200      	movs	r2, #0
 800125a:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800125c:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 800125e:	2200      	movs	r2, #0
 8001260:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 8001264:	2200      	movs	r2, #0
 8001266:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001268:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 800126a:	2208      	movs	r2, #8
 800126c:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 800126e:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 8001270:	2200      	movs	r2, #0
 8001272:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 8001274:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 8001276:	2200      	movs	r2, #0
 8001278:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 800127a:	480f      	ldr	r0, [pc, #60]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 800127c:	f003 fc8c 	bl	8004b98 <HAL_OSPI_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_OCTOSPI2_Init+0x86>
  {
    Error_Handler();
 8001286:	f7ff ff59 	bl	800113c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 800128a:	2302      	movs	r3, #2
 800128c:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 2;
 800128e:	2302      	movs	r3, #2
 8001290:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001292:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <MX_OCTOSPI2_Init+0xbc>)
 8001294:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001296:	463b      	mov	r3, r7
 8001298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <MX_OCTOSPI2_Init+0xb4>)
 80012a0:	f003 fd46 	bl	8004d30 <HAL_OSPIM_Config>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_OCTOSPI2_Init+0xaa>
  {
    Error_Handler();
 80012aa:	f7ff ff47 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	24000290 	.word	0x24000290
 80012bc:	5200a000 	.word	0x5200a000
 80012c0:	00010002 	.word	0x00010002

080012c4 <HAL_OSPI_MspInit>:

static uint32_t HAL_RCC_OCTOSPIM_CLK_ENABLED=0;

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b0c0      	sub	sp, #256	@ 0x100
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012e0:	22b8      	movs	r2, #184	@ 0xb8
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f009 fd4d 	bl	800ad84 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4ab1      	ldr	r2, [pc, #708]	@ (80015b4 <HAL_OSPI_MspInit+0x2f0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	f040 80d1 	bne.w	8001498 <HAL_OSPI_MspInit+0x1d4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80012f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8001302:	2300      	movs	r3, #0
 8001304:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001306:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800130a:	4618      	mov	r0, r3
 800130c:	f005 faba 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8001316:	f7ff ff11 	bl	800113c <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 800131a:	4ba7      	ldr	r3, [pc, #668]	@ (80015b8 <HAL_OSPI_MspInit+0x2f4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	4aa5      	ldr	r2, [pc, #660]	@ (80015b8 <HAL_OSPI_MspInit+0x2f4>)
 8001322:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8001324:	4ba4      	ldr	r3, [pc, #656]	@ (80015b8 <HAL_OSPI_MspInit+0x2f4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d10e      	bne.n	800134a <HAL_OSPI_MspInit+0x86>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800132c:	4ba3      	ldr	r3, [pc, #652]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 800132e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001332:	4aa2      	ldr	r2, [pc, #648]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 8001334:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001338:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800133c:	4b9f      	ldr	r3, [pc, #636]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 800133e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001342:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800134a:	4b9c      	ldr	r3, [pc, #624]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 800134c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001350:	4a9a      	ldr	r2, [pc, #616]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 8001352:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001356:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800135a:	4b98      	ldr	r3, [pc, #608]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 800135c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001360:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001366:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001368:	4b94      	ldr	r3, [pc, #592]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136e:	4a93      	ldr	r2, [pc, #588]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001378:	4b90      	ldr	r3, [pc, #576]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 800137a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
 8001384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b8d      	ldr	r3, [pc, #564]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138c:	4a8b      	ldr	r2, [pc, #556]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001396:	4b89      	ldr	r3, [pc, #548]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	623b      	str	r3, [r7, #32]
 80013a2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013a4:	4b85      	ldr	r3, [pc, #532]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013aa:	4a84      	ldr	r2, [pc, #528]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 80013ac:	f043 0310 	orr.w	r3, r3, #16
 80013b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b4:	4b81      	ldr	r3, [pc, #516]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	69fb      	ldr	r3, [r7, #28]
    PB0     ------> OCTOSPIM_P1_IO1
    PB1     ------> OCTOSPIM_P1_IO0
    PB2     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013c2:	2340      	movs	r3, #64	@ 0x40
 80013c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPIM_P1;
 80013da:	2306      	movs	r3, #6
 80013dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80013e4:	4619      	mov	r1, r3
 80013e6:	4876      	ldr	r0, [pc, #472]	@ (80015c0 <HAL_OSPI_MspInit+0x2fc>)
 80013e8:	f003 f884 	bl	80044f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013ec:	2380      	movs	r3, #128	@ 0x80
 80013ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001404:	230a      	movs	r3, #10
 8001406:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800140e:	4619      	mov	r1, r3
 8001410:	486b      	ldr	r0, [pc, #428]	@ (80015c0 <HAL_OSPI_MspInit+0x2fc>)
 8001412:	f003 f86f 	bl	80044f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001416:	2303      	movs	r3, #3
 8001418:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 800142e:	2304      	movs	r3, #4
 8001430:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001438:	4619      	mov	r1, r3
 800143a:	4862      	ldr	r0, [pc, #392]	@ (80015c4 <HAL_OSPI_MspInit+0x300>)
 800143c:	f003 f85a 	bl	80044f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001440:	2304      	movs	r3, #4
 8001442:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001458:	2309      	movs	r3, #9
 800145a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001462:	4619      	mov	r1, r3
 8001464:	4857      	ldr	r0, [pc, #348]	@ (80015c4 <HAL_OSPI_MspInit+0x300>)
 8001466:	f003 f845 	bl	80044f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800146a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800146e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8001484:	230b      	movs	r3, #11
 8001486:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800148e:	4619      	mov	r1, r3
 8001490:	484d      	ldr	r0, [pc, #308]	@ (80015c8 <HAL_OSPI_MspInit+0x304>)
 8001492:	f003 f82f 	bl	80044f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }
}
 8001496:	e087      	b.n	80015a8 <HAL_OSPI_MspInit+0x2e4>
  else if(ospiHandle->Instance==OCTOSPI2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a4b      	ldr	r2, [pc, #300]	@ (80015cc <HAL_OSPI_MspInit+0x308>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	f040 8082 	bne.w	80015a8 <HAL_OSPI_MspInit+0x2e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80014a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014b8:	4618      	mov	r0, r3
 80014ba:	f005 f9e3 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_OSPI_MspInit+0x204>
      Error_Handler();
 80014c4:	f7ff fe3a 	bl	800113c <Error_Handler>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80014c8:	4b3b      	ldr	r3, [pc, #236]	@ (80015b8 <HAL_OSPI_MspInit+0x2f4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	4a3a      	ldr	r2, [pc, #232]	@ (80015b8 <HAL_OSPI_MspInit+0x2f4>)
 80014d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80014d2:	4b39      	ldr	r3, [pc, #228]	@ (80015b8 <HAL_OSPI_MspInit+0x2f4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d10e      	bne.n	80014f8 <HAL_OSPI_MspInit+0x234>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80014da:	4b38      	ldr	r3, [pc, #224]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 80014dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014e0:	4a36      	ldr	r2, [pc, #216]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 80014e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014e6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80014ea:	4b34      	ldr	r3, [pc, #208]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 80014ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80014f8:	4b30      	ldr	r3, [pc, #192]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 80014fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014fe:	4a2f      	ldr	r2, [pc, #188]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 8001500:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001504:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001508:	4b2c      	ldr	r3, [pc, #176]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 800150a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800150e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001516:	4b29      	ldr	r3, [pc, #164]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151c:	4a27      	ldr	r2, [pc, #156]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 800151e:	f043 0320 	orr.w	r3, r3, #32
 8001522:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001526:	4b25      	ldr	r3, [pc, #148]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800152c:	f003 0320 	and.w	r3, r3, #32
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001534:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153a:	4a20      	ldr	r2, [pc, #128]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 800153c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001540:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001544:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <HAL_OSPI_MspInit+0x2f8>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001552:	231f      	movs	r3, #31
 8001554:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 800156a:	2309      	movs	r3, #9
 800156c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001570:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001574:	4619      	mov	r1, r3
 8001576:	4816      	ldr	r0, [pc, #88]	@ (80015d0 <HAL_OSPI_MspInit+0x30c>)
 8001578:	f002 ffbc 	bl	80044f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800157c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001580:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8001596:	2303      	movs	r3, #3
 8001598:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800159c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80015a0:	4619      	mov	r1, r3
 80015a2:	480c      	ldr	r0, [pc, #48]	@ (80015d4 <HAL_OSPI_MspInit+0x310>)
 80015a4:	f002 ffa6 	bl	80044f4 <HAL_GPIO_Init>
}
 80015a8:	bf00      	nop
 80015aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	52005000 	.word	0x52005000
 80015b8:	240002ec 	.word	0x240002ec
 80015bc:	58024400 	.word	0x58024400
 80015c0:	58020000 	.word	0x58020000
 80015c4:	58020400 	.word	0x58020400
 80015c8:	58021000 	.word	0x58021000
 80015cc:	5200a000 	.word	0x5200a000
 80015d0:	58021400 	.word	0x58021400
 80015d4:	58021800 	.word	0x58021800

080015d8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015dc:	4b27      	ldr	r3, [pc, #156]	@ (800167c <MX_SPI1_Init+0xa4>)
 80015de:	4a28      	ldr	r2, [pc, #160]	@ (8001680 <MX_SPI1_Init+0xa8>)
 80015e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015e2:	4b26      	ldr	r3, [pc, #152]	@ (800167c <MX_SPI1_Init+0xa4>)
 80015e4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ea:	4b24      	ldr	r3, [pc, #144]	@ (800167c <MX_SPI1_Init+0xa4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80015f0:	4b22      	ldr	r3, [pc, #136]	@ (800167c <MX_SPI1_Init+0xa4>)
 80015f2:	2203      	movs	r2, #3
 80015f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015f6:	4b21      	ldr	r3, [pc, #132]	@ (800167c <MX_SPI1_Init+0xa4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015fc:	4b1f      	ldr	r3, [pc, #124]	@ (800167c <MX_SPI1_Init+0xa4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001602:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <MX_SPI1_Init+0xa4>)
 8001604:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001608:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800160a:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <MX_SPI1_Init+0xa4>)
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <MX_SPI1_Init+0xa4>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001616:	4b19      	ldr	r3, [pc, #100]	@ (800167c <MX_SPI1_Init+0xa4>)
 8001618:	2200      	movs	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800161c:	4b17      	ldr	r3, [pc, #92]	@ (800167c <MX_SPI1_Init+0xa4>)
 800161e:	2200      	movs	r2, #0
 8001620:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <MX_SPI1_Init+0xa4>)
 8001624:	2200      	movs	r2, #0
 8001626:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001628:	4b14      	ldr	r3, [pc, #80]	@ (800167c <MX_SPI1_Init+0xa4>)
 800162a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800162e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <MX_SPI1_Init+0xa4>)
 8001632:	2200      	movs	r2, #0
 8001634:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001636:	4b11      	ldr	r3, [pc, #68]	@ (800167c <MX_SPI1_Init+0xa4>)
 8001638:	2200      	movs	r2, #0
 800163a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800163c:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <MX_SPI1_Init+0xa4>)
 800163e:	2200      	movs	r2, #0
 8001640:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001642:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <MX_SPI1_Init+0xa4>)
 8001644:	2200      	movs	r2, #0
 8001646:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001648:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <MX_SPI1_Init+0xa4>)
 800164a:	2200      	movs	r2, #0
 800164c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <MX_SPI1_Init+0xa4>)
 8001650:	2200      	movs	r2, #0
 8001652:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001654:	4b09      	ldr	r3, [pc, #36]	@ (800167c <MX_SPI1_Init+0xa4>)
 8001656:	2200      	movs	r2, #0
 8001658:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800165a:	4b08      	ldr	r3, [pc, #32]	@ (800167c <MX_SPI1_Init+0xa4>)
 800165c:	2200      	movs	r2, #0
 800165e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <MX_SPI1_Init+0xa4>)
 8001662:	2200      	movs	r2, #0
 8001664:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	@ (800167c <MX_SPI1_Init+0xa4>)
 8001668:	f006 fece 	bl	8008408 <HAL_SPI_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001672:	f7ff fd63 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	240002f0 	.word	0x240002f0
 8001680:	40013000 	.word	0x40013000

08001684 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <MX_SPI3_Init+0xa4>)
 800168a:	4a28      	ldr	r2, [pc, #160]	@ (800172c <MX_SPI3_Init+0xa8>)
 800168c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800168e:	4b26      	ldr	r3, [pc, #152]	@ (8001728 <MX_SPI3_Init+0xa4>)
 8001690:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001694:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001696:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <MX_SPI3_Init+0xa4>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800169c:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <MX_SPI3_Init+0xa4>)
 800169e:	2203      	movs	r2, #3
 80016a0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a2:	4b21      	ldr	r3, [pc, #132]	@ (8001728 <MX_SPI3_Init+0xa4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001728 <MX_SPI3_Init+0xa4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <MX_SPI3_Init+0xa4>)
 80016b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016b4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <MX_SPI3_Init+0xa4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <MX_SPI3_Init+0xa4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c2:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <MX_SPI3_Init+0xa4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c8:	4b17      	ldr	r3, [pc, #92]	@ (8001728 <MX_SPI3_Init+0xa4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80016ce:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <MX_SPI3_Init+0xa4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016d4:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <MX_SPI3_Init+0xa4>)
 80016d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016da:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <MX_SPI3_Init+0xa4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016e2:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <MX_SPI3_Init+0xa4>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <MX_SPI3_Init+0xa4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <MX_SPI3_Init+0xa4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <MX_SPI3_Init+0xa4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <MX_SPI3_Init+0xa4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <MX_SPI3_Init+0xa4>)
 8001702:	2200      	movs	r2, #0
 8001704:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <MX_SPI3_Init+0xa4>)
 8001708:	2200      	movs	r2, #0
 800170a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <MX_SPI3_Init+0xa4>)
 800170e:	2200      	movs	r2, #0
 8001710:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <MX_SPI3_Init+0xa4>)
 8001714:	f006 fe78 	bl	8008408 <HAL_SPI_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800171e:	f7ff fd0d 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	24000378 	.word	0x24000378
 800172c:	40003c00 	.word	0x40003c00

08001730 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001734:	4b27      	ldr	r3, [pc, #156]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 8001736:	4a28      	ldr	r2, [pc, #160]	@ (80017d8 <MX_SPI4_Init+0xa8>)
 8001738:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800173a:	4b26      	ldr	r3, [pc, #152]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 800173c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001740:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001742:	4b24      	ldr	r3, [pc, #144]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 8001744:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001748:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800174a:	4b22      	ldr	r3, [pc, #136]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 800174c:	2203      	movs	r2, #3
 800174e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001750:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001756:	4b1f      	ldr	r3, [pc, #124]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800175c:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 800175e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001762:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001764:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800176a:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 8001772:	2200      	movs	r2, #0
 8001774:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001776:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 8001778:	2200      	movs	r2, #0
 800177a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800177c:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 800177e:	2200      	movs	r2, #0
 8001780:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001782:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 8001784:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001788:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 800178c:	2200      	movs	r2, #0
 800178e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001790:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 8001792:	2200      	movs	r2, #0
 8001794:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001796:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 8001798:	2200      	movs	r2, #0
 800179a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800179c:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017a2:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017b4:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80017c0:	4804      	ldr	r0, [pc, #16]	@ (80017d4 <MX_SPI4_Init+0xa4>)
 80017c2:	f006 fe21 	bl	8008408 <HAL_SPI_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80017cc:	f7ff fcb6 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	24000400 	.word	0x24000400
 80017d8:	40013400 	.word	0x40013400

080017dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b0be      	sub	sp, #248	@ 0xf8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017f8:	22b8      	movs	r2, #184	@ 0xb8
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f009 fac1 	bl	800ad84 <memset>
  if(spiHandle->Instance==SPI1)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a85      	ldr	r2, [pc, #532]	@ (8001a1c <HAL_SPI_MspInit+0x240>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d16b      	bne.n	80018e4 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800180c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800181e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001822:	4618      	mov	r0, r3
 8001824:	f005 f82e 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800182e:	f7ff fc85 	bl	800113c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001832:	4b7b      	ldr	r3, [pc, #492]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 8001834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001838:	4a79      	ldr	r2, [pc, #484]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 800183a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800183e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001842:	4b77      	ldr	r3, [pc, #476]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 8001844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001848:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
 800184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001850:	4b73      	ldr	r3, [pc, #460]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 8001852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001856:	4a72      	ldr	r2, [pc, #456]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001860:	4b6f      	ldr	r3, [pc, #444]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 8001862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	623b      	str	r3, [r7, #32]
 800186c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800186e:	4b6c      	ldr	r3, [pc, #432]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 8001870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001874:	4a6a      	ldr	r2, [pc, #424]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 8001876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800187a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800187e:	4b68      	ldr	r3, [pc, #416]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 8001880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800188c:	2380      	movs	r3, #128	@ 0x80
 800188e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018a4:	2305      	movs	r3, #5
 80018a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018aa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018ae:	4619      	mov	r1, r3
 80018b0:	485c      	ldr	r0, [pc, #368]	@ (8001a24 <HAL_SPI_MspInit+0x248>)
 80018b2:	f002 fe1f 	bl	80044f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80018b6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80018ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018d0:	2305      	movs	r3, #5
 80018d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018d6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018da:	4619      	mov	r1, r3
 80018dc:	4852      	ldr	r0, [pc, #328]	@ (8001a28 <HAL_SPI_MspInit+0x24c>)
 80018de:	f002 fe09 	bl	80044f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80018e2:	e097      	b.n	8001a14 <HAL_SPI_MspInit+0x238>
  else if(spiHandle->Instance==SPI3)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a50      	ldr	r2, [pc, #320]	@ (8001a2c <HAL_SPI_MspInit+0x250>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d147      	bne.n	800197e <HAL_SPI_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80018ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001900:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001904:	4618      	mov	r0, r3
 8001906:	f004 ffbd 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8001910:	f7ff fc14 	bl	800113c <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001914:	4b42      	ldr	r3, [pc, #264]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 8001916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800191a:	4a41      	ldr	r2, [pc, #260]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 800191c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001920:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001924:	4b3e      	ldr	r3, [pc, #248]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 8001926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800192a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800192e:	61bb      	str	r3, [r7, #24]
 8001930:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001932:	4b3b      	ldr	r3, [pc, #236]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 8001934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001938:	4a39      	ldr	r2, [pc, #228]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001942:	4b37      	ldr	r3, [pc, #220]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001950:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001954:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800196a:	2306      	movs	r3, #6
 800196c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001970:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001974:	4619      	mov	r1, r3
 8001976:	482e      	ldr	r0, [pc, #184]	@ (8001a30 <HAL_SPI_MspInit+0x254>)
 8001978:	f002 fdbc 	bl	80044f4 <HAL_GPIO_Init>
}
 800197c:	e04a      	b.n	8001a14 <HAL_SPI_MspInit+0x238>
  else if(spiHandle->Instance==SPI4)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a2c      	ldr	r2, [pc, #176]	@ (8001a34 <HAL_SPI_MspInit+0x258>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d145      	bne.n	8001a14 <HAL_SPI_MspInit+0x238>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001988:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800199a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800199e:	4618      	mov	r0, r3
 80019a0:	f004 ff70 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_SPI_MspInit+0x1d2>
      Error_Handler();
 80019aa:	f7ff fbc7 	bl	800113c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80019ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 80019b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 80019b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80019be:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 80019c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019cc:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 80019ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d2:	4a13      	ldr	r2, [pc, #76]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 80019d4:	f043 0310 	orr.w	r3, r3, #16
 80019d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019dc:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <HAL_SPI_MspInit+0x244>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80019ea:	2344      	movs	r3, #68	@ 0x44
 80019ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001a02:	2305      	movs	r3, #5
 8001a04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a08:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480a      	ldr	r0, [pc, #40]	@ (8001a38 <HAL_SPI_MspInit+0x25c>)
 8001a10:	f002 fd70 	bl	80044f4 <HAL_GPIO_Init>
}
 8001a14:	bf00      	nop
 8001a16:	37f8      	adds	r7, #248	@ 0xf8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40013000 	.word	0x40013000
 8001a20:	58024400 	.word	0x58024400
 8001a24:	58020c00 	.word	0x58020c00
 8001a28:	58021800 	.word	0x58021800
 8001a2c:	40003c00 	.word	0x40003c00
 8001a30:	58020800 	.word	0x58020800
 8001a34:	40013400 	.word	0x40013400
 8001a38:	58021000 	.word	0x58021000

08001a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	4b13      	ldr	r3, [pc, #76]	@ (8001a90 <HAL_MspInit+0x54>)
 8001a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a48:	4a11      	ldr	r2, [pc, #68]	@ (8001a90 <HAL_MspInit+0x54>)
 8001a4a:	f043 0302 	orr.w	r3, r3, #2
 8001a4e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a52:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <HAL_MspInit+0x54>)
 8001a54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001a60:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <HAL_MspInit+0x54>)
 8001a62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <HAL_MspInit+0x54>)
 8001a68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a6c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a70:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <HAL_MspInit+0x54>)
 8001a72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001a7e:	f000 fd25 	bl	80024cc <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001a82:	2002      	movs	r0, #2
 8001a84:	f000 fd0e 	bl	80024a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	58024400 	.word	0x58024400

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <NMI_Handler+0x4>

08001a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <HardFault_Handler+0x4>

08001aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <MemManage_Handler+0x4>

08001aac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <BusFault_Handler+0x4>

08001ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <UsageFault_Handler+0x4>

08001abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aea:	f000 fc97 	bl	800241c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001af8:	4802      	ldr	r0, [pc, #8]	@ (8001b04 <DMA1_Stream0_IRQHandler+0x10>)
 8001afa:	f001 fb95 	bl	8003228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	240004d4 	.word	0x240004d4

08001b08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <DMA1_Stream1_IRQHandler+0x10>)
 8001b0e:	f001 fb8b 	bl	8003228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	240000b8 	.word	0x240000b8

08001b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b22:	4b3c      	ldr	r3, [pc, #240]	@ (8001c14 <SystemInit+0xf8>)
 8001b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b28:	4a3a      	ldr	r2, [pc, #232]	@ (8001c14 <SystemInit+0xf8>)
 8001b2a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b2e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b32:	4b39      	ldr	r3, [pc, #228]	@ (8001c18 <SystemInit+0xfc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d807      	bhi.n	8001b4e <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b3e:	4b36      	ldr	r3, [pc, #216]	@ (8001c18 <SystemInit+0xfc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 030f 	bic.w	r3, r3, #15
 8001b46:	4a34      	ldr	r2, [pc, #208]	@ (8001c18 <SystemInit+0xfc>)
 8001b48:	f043 0307 	orr.w	r3, r3, #7
 8001b4c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b4e:	4b33      	ldr	r3, [pc, #204]	@ (8001c1c <SystemInit+0x100>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a32      	ldr	r2, [pc, #200]	@ (8001c1c <SystemInit+0x100>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b5a:	4b30      	ldr	r3, [pc, #192]	@ (8001c1c <SystemInit+0x100>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b60:	4b2e      	ldr	r3, [pc, #184]	@ (8001c1c <SystemInit+0x100>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	492d      	ldr	r1, [pc, #180]	@ (8001c1c <SystemInit+0x100>)
 8001b66:	4b2e      	ldr	r3, [pc, #184]	@ (8001c20 <SystemInit+0x104>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c18 <SystemInit+0xfc>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d007      	beq.n	8001b88 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b78:	4b27      	ldr	r3, [pc, #156]	@ (8001c18 <SystemInit+0xfc>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 030f 	bic.w	r3, r3, #15
 8001b80:	4a25      	ldr	r2, [pc, #148]	@ (8001c18 <SystemInit+0xfc>)
 8001b82:	f043 0307 	orr.w	r3, r3, #7
 8001b86:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b88:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <SystemInit+0x100>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b8e:	4b23      	ldr	r3, [pc, #140]	@ (8001c1c <SystemInit+0x100>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b94:	4b21      	ldr	r3, [pc, #132]	@ (8001c1c <SystemInit+0x100>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b9a:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <SystemInit+0x100>)
 8001b9c:	4a21      	ldr	r2, [pc, #132]	@ (8001c24 <SystemInit+0x108>)
 8001b9e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <SystemInit+0x100>)
 8001ba2:	4a21      	ldr	r2, [pc, #132]	@ (8001c28 <SystemInit+0x10c>)
 8001ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <SystemInit+0x100>)
 8001ba8:	4a20      	ldr	r2, [pc, #128]	@ (8001c2c <SystemInit+0x110>)
 8001baa:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <SystemInit+0x100>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <SystemInit+0x100>)
 8001bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <SystemInit+0x110>)
 8001bb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bb8:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <SystemInit+0x100>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <SystemInit+0x100>)
 8001bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c2c <SystemInit+0x110>)
 8001bc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bc4:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <SystemInit+0x100>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bca:	4b14      	ldr	r3, [pc, #80]	@ (8001c1c <SystemInit+0x100>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a13      	ldr	r2, [pc, #76]	@ (8001c1c <SystemInit+0x100>)
 8001bd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bd4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <SystemInit+0x100>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <SystemInit+0x100>)
 8001bde:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001be2:	4a0e      	ldr	r2, [pc, #56]	@ (8001c1c <SystemInit+0x100>)
 8001be4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8001be8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001bec:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <SystemInit+0x100>)
 8001bee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001bf2:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001bf4:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <SystemInit+0x114>)
 8001bf8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001bfc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 8001bfe:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <SystemInit+0xf8>)
 8001c00:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c04:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00
 8001c18:	52002000 	.word	0x52002000
 8001c1c:	58024400 	.word	0x58024400
 8001c20:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c24:	02020200 	.word	0x02020200
 8001c28:	01ff0000 	.word	0x01ff0000
 8001c2c:	01010280 	.word	0x01010280
 8001c30:	52004000 	.word	0x52004000

08001c34 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08e      	sub	sp, #56	@ 0x38
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c54:	463b      	mov	r3, r7
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]
 8001c62:	615a      	str	r2, [r3, #20]
 8001c64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c66:	4b2d      	ldr	r3, [pc, #180]	@ (8001d1c <MX_TIM3_Init+0xe8>)
 8001c68:	4a2d      	ldr	r2, [pc, #180]	@ (8001d20 <MX_TIM3_Init+0xec>)
 8001c6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d1c <MX_TIM3_Init+0xe8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c72:	4b2a      	ldr	r3, [pc, #168]	@ (8001d1c <MX_TIM3_Init+0xe8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c78:	4b28      	ldr	r3, [pc, #160]	@ (8001d1c <MX_TIM3_Init+0xe8>)
 8001c7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c80:	4b26      	ldr	r3, [pc, #152]	@ (8001d1c <MX_TIM3_Init+0xe8>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c86:	4b25      	ldr	r3, [pc, #148]	@ (8001d1c <MX_TIM3_Init+0xe8>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c8c:	4823      	ldr	r0, [pc, #140]	@ (8001d1c <MX_TIM3_Init+0xe8>)
 8001c8e:	f006 fcfa 	bl	8008686 <HAL_TIM_Base_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c98:	f7ff fa50 	bl	800113c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ca2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	481c      	ldr	r0, [pc, #112]	@ (8001d1c <MX_TIM3_Init+0xe8>)
 8001caa:	f006 feb9 	bl	8008a20 <HAL_TIM_ConfigClockSource>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001cb4:	f7ff fa42 	bl	800113c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cb8:	4818      	ldr	r0, [pc, #96]	@ (8001d1c <MX_TIM3_Init+0xe8>)
 8001cba:	f006 fd3b 	bl	8008734 <HAL_TIM_PWM_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001cc4:	f7ff fa3a 	bl	800113c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4811      	ldr	r0, [pc, #68]	@ (8001d1c <MX_TIM3_Init+0xe8>)
 8001cd8:	f007 fbc0 	bl	800945c <HAL_TIMEx_MasterConfigSynchronization>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001ce2:	f7ff fa2b 	bl	800113c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce6:	2360      	movs	r3, #96	@ 0x60
 8001ce8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4807      	ldr	r0, [pc, #28]	@ (8001d1c <MX_TIM3_Init+0xe8>)
 8001cfe:	f006 fd7b 	bl	80087f8 <HAL_TIM_PWM_ConfigChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001d08:	f7ff fa18 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d0c:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <MX_TIM3_Init+0xe8>)
 8001d0e:	f000 f85d 	bl	8001dcc <HAL_TIM_MspPostInit>

}
 8001d12:	bf00      	nop
 8001d14:	3738      	adds	r7, #56	@ 0x38
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	24000488 	.word	0x24000488
 8001d20:	40000400 	.word	0x40000400

08001d24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a22      	ldr	r2, [pc, #136]	@ (8001dbc <HAL_TIM_Base_MspInit+0x98>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d13d      	bne.n	8001db2 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d36:	4b22      	ldr	r3, [pc, #136]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x9c>)
 8001d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d3c:	4a20      	ldr	r2, [pc, #128]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x9c>)
 8001d3e:	f043 0302 	orr.w	r3, r3, #2
 8001d42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d46:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x9c>)
 8001d48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Stream0;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d56:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xa4>)
 8001d58:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d5c:	2217      	movs	r2, #23
 8001d5e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d60:	4b18      	ldr	r3, [pc, #96]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d66:	4b17      	ldr	r3, [pc, #92]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d72:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d74:	4b13      	ldr	r3, [pc, #76]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d7a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d82:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001d96:	480b      	ldr	r0, [pc, #44]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d98:	f000 feee 	bl	8002b78 <HAL_DMA_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001da2:	f7ff f9cb 	bl	800113c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a06      	ldr	r2, [pc, #24]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8001daa:	625a      	str	r2, [r3, #36]	@ 0x24
 8001dac:	4a05      	ldr	r2, [pc, #20]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40000400 	.word	0x40000400
 8001dc0:	58024400 	.word	0x58024400
 8001dc4:	240004d4 	.word	0x240004d4
 8001dc8:	40020010 	.word	0x40020010

08001dcc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a12      	ldr	r2, [pc, #72]	@ (8001e34 <HAL_TIM_MspPostInit+0x68>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d11e      	bne.n	8001e2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dee:	4b12      	ldr	r3, [pc, #72]	@ (8001e38 <HAL_TIM_MspPostInit+0x6c>)
 8001df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df4:	4a10      	ldr	r2, [pc, #64]	@ (8001e38 <HAL_TIM_MspPostInit+0x6c>)
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <HAL_TIM_MspPostInit+0x6c>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = WS2812_Pin;
 8001e0c:	2340      	movs	r3, #64	@ 0x40
 8001e0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	4619      	mov	r1, r3
 8001e26:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <HAL_TIM_MspPostInit+0x70>)
 8001e28:	f002 fb64 	bl	80044f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e2c:	bf00      	nop
 8001e2e:	3720      	adds	r7, #32
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40000400 	.word	0x40000400
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	58020800 	.word	0x58020800

08001e40 <MX_UART4_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e44:	4b22      	ldr	r3, [pc, #136]	@ (8001ed0 <MX_UART4_Init+0x90>)
 8001e46:	4a23      	ldr	r2, [pc, #140]	@ (8001ed4 <MX_UART4_Init+0x94>)
 8001e48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ed0 <MX_UART4_Init+0x90>)
 8001e4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e52:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed0 <MX_UART4_Init+0x90>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed0 <MX_UART4_Init+0x90>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <MX_UART4_Init+0x90>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <MX_UART4_Init+0x90>)
 8001e66:	220c      	movs	r2, #12
 8001e68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <MX_UART4_Init+0x90>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e70:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <MX_UART4_Init+0x90>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e76:	4b16      	ldr	r3, [pc, #88]	@ (8001ed0 <MX_UART4_Init+0x90>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <MX_UART4_Init+0x90>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e82:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <MX_UART4_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e88:	4811      	ldr	r0, [pc, #68]	@ (8001ed0 <MX_UART4_Init+0x90>)
 8001e8a:	f007 fb83 	bl	8009594 <HAL_UART_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001e94:	f7ff f952 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e98:	2100      	movs	r1, #0
 8001e9a:	480d      	ldr	r0, [pc, #52]	@ (8001ed0 <MX_UART4_Init+0x90>)
 8001e9c:	f008 fc8f 	bl	800a7be <HAL_UARTEx_SetTxFifoThreshold>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001ea6:	f7ff f949 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4808      	ldr	r0, [pc, #32]	@ (8001ed0 <MX_UART4_Init+0x90>)
 8001eae:	f008 fcc4 	bl	800a83a <HAL_UARTEx_SetRxFifoThreshold>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001eb8:	f7ff f940 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001ebc:	4804      	ldr	r0, [pc, #16]	@ (8001ed0 <MX_UART4_Init+0x90>)
 8001ebe:	f008 fc45 	bl	800a74c <HAL_UARTEx_DisableFifoMode>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001ec8:	f7ff f938 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	2400054c 	.word	0x2400054c
 8001ed4:	40004c00 	.word	0x40004c00

08001ed8 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001edc:	4b22      	ldr	r3, [pc, #136]	@ (8001f68 <MX_UART7_Init+0x90>)
 8001ede:	4a23      	ldr	r2, [pc, #140]	@ (8001f6c <MX_UART7_Init+0x94>)
 8001ee0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001ee2:	4b21      	ldr	r3, [pc, #132]	@ (8001f68 <MX_UART7_Init+0x90>)
 8001ee4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ee8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001eea:	4b1f      	ldr	r3, [pc, #124]	@ (8001f68 <MX_UART7_Init+0x90>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <MX_UART7_Init+0x90>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f68 <MX_UART7_Init+0x90>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001efc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <MX_UART7_Init+0x90>)
 8001efe:	220c      	movs	r2, #12
 8001f00:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f02:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <MX_UART7_Init+0x90>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f08:	4b17      	ldr	r3, [pc, #92]	@ (8001f68 <MX_UART7_Init+0x90>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f0e:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <MX_UART7_Init+0x90>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f14:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <MX_UART7_Init+0x90>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <MX_UART7_Init+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001f20:	4811      	ldr	r0, [pc, #68]	@ (8001f68 <MX_UART7_Init+0x90>)
 8001f22:	f007 fb37 	bl	8009594 <HAL_UART_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001f2c:	f7ff f906 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f30:	2100      	movs	r1, #0
 8001f32:	480d      	ldr	r0, [pc, #52]	@ (8001f68 <MX_UART7_Init+0x90>)
 8001f34:	f008 fc43 	bl	800a7be <HAL_UARTEx_SetTxFifoThreshold>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001f3e:	f7ff f8fd 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f42:	2100      	movs	r1, #0
 8001f44:	4808      	ldr	r0, [pc, #32]	@ (8001f68 <MX_UART7_Init+0x90>)
 8001f46:	f008 fc78 	bl	800a83a <HAL_UARTEx_SetRxFifoThreshold>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001f50:	f7ff f8f4 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001f54:	4804      	ldr	r0, [pc, #16]	@ (8001f68 <MX_UART7_Init+0x90>)
 8001f56:	f008 fbf9 	bl	800a74c <HAL_UARTEx_DisableFifoMode>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001f60:	f7ff f8ec 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	240005e0 	.word	0x240005e0
 8001f6c:	40007800 	.word	0x40007800

08001f70 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f74:	4b22      	ldr	r3, [pc, #136]	@ (8002000 <MX_USART1_UART_Init+0x90>)
 8001f76:	4a23      	ldr	r2, [pc, #140]	@ (8002004 <MX_USART1_UART_Init+0x94>)
 8001f78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f7a:	4b21      	ldr	r3, [pc, #132]	@ (8002000 <MX_USART1_UART_Init+0x90>)
 8001f7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f82:	4b1f      	ldr	r3, [pc, #124]	@ (8002000 <MX_USART1_UART_Init+0x90>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <MX_USART1_UART_Init+0x90>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002000 <MX_USART1_UART_Init+0x90>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f94:	4b1a      	ldr	r3, [pc, #104]	@ (8002000 <MX_USART1_UART_Init+0x90>)
 8001f96:	220c      	movs	r2, #12
 8001f98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9a:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <MX_USART1_UART_Init+0x90>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa0:	4b17      	ldr	r3, [pc, #92]	@ (8002000 <MX_USART1_UART_Init+0x90>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fa6:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <MX_USART1_UART_Init+0x90>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fac:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <MX_USART1_UART_Init+0x90>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb2:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <MX_USART1_UART_Init+0x90>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fb8:	4811      	ldr	r0, [pc, #68]	@ (8002000 <MX_USART1_UART_Init+0x90>)
 8001fba:	f007 faeb 	bl	8009594 <HAL_UART_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001fc4:	f7ff f8ba 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fc8:	2100      	movs	r1, #0
 8001fca:	480d      	ldr	r0, [pc, #52]	@ (8002000 <MX_USART1_UART_Init+0x90>)
 8001fcc:	f008 fbf7 	bl	800a7be <HAL_UARTEx_SetTxFifoThreshold>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001fd6:	f7ff f8b1 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4808      	ldr	r0, [pc, #32]	@ (8002000 <MX_USART1_UART_Init+0x90>)
 8001fde:	f008 fc2c 	bl	800a83a <HAL_UARTEx_SetRxFifoThreshold>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001fe8:	f7ff f8a8 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001fec:	4804      	ldr	r0, [pc, #16]	@ (8002000 <MX_USART1_UART_Init+0x90>)
 8001fee:	f008 fbad 	bl	800a74c <HAL_UARTEx_DisableFifoMode>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ff8:	f7ff f8a0 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	24000674 	.word	0x24000674
 8002004:	40011000 	.word	0x40011000

08002008 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b0bc      	sub	sp, #240	@ 0xf0
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002020:	f107 0320 	add.w	r3, r7, #32
 8002024:	22b8      	movs	r2, #184	@ 0xb8
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f008 feab 	bl	800ad84 <memset>
  if(uartHandle->Instance==UART4)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a73      	ldr	r2, [pc, #460]	@ (8002200 <HAL_UART_MspInit+0x1f8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d146      	bne.n	80020c6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002038:	f04f 0202 	mov.w	r2, #2
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800204a:	f107 0320 	add.w	r3, r7, #32
 800204e:	4618      	mov	r0, r3
 8002050:	f004 fc18 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800205a:	f7ff f86f 	bl	800113c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800205e:	4b69      	ldr	r3, [pc, #420]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 8002060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002064:	4a67      	ldr	r2, [pc, #412]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 8002066:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800206a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800206e:	4b65      	ldr	r3, [pc, #404]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 8002070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002074:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207c:	4b61      	ldr	r3, [pc, #388]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 800207e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002082:	4a60      	ldr	r2, [pc, #384]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800208c:	4b5d      	ldr	r3, [pc, #372]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 800208e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800209a:	2303      	movs	r3, #3
 800209c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020b2:	2308      	movs	r3, #8
 80020b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80020bc:	4619      	mov	r1, r3
 80020be:	4852      	ldr	r0, [pc, #328]	@ (8002208 <HAL_UART_MspInit+0x200>)
 80020c0:	f002 fa18 	bl	80044f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80020c4:	e097      	b.n	80021f6 <HAL_UART_MspInit+0x1ee>
  else if(uartHandle->Instance==UART7)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a50      	ldr	r2, [pc, #320]	@ (800220c <HAL_UART_MspInit+0x204>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d146      	bne.n	800215e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80020d0:	f04f 0202 	mov.w	r2, #2
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e2:	f107 0320 	add.w	r3, r7, #32
 80020e6:	4618      	mov	r0, r3
 80020e8:	f004 fbcc 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_UART_MspInit+0xee>
      Error_Handler();
 80020f2:	f7ff f823 	bl	800113c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80020f6:	4b43      	ldr	r3, [pc, #268]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 80020f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020fc:	4a41      	ldr	r2, [pc, #260]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 80020fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002102:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002106:	4b3f      	ldr	r3, [pc, #252]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 8002108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800210c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002114:	4b3b      	ldr	r3, [pc, #236]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 8002116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800211a:	4a3a      	ldr	r2, [pc, #232]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 800211c:	f043 0320 	orr.w	r3, r3, #32
 8002120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002124:	4b37      	ldr	r3, [pc, #220]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 8002126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002132:	23c0      	movs	r3, #192	@ 0xc0
 8002134:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800214a:	2307      	movs	r3, #7
 800214c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002150:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002154:	4619      	mov	r1, r3
 8002156:	482e      	ldr	r0, [pc, #184]	@ (8002210 <HAL_UART_MspInit+0x208>)
 8002158:	f002 f9cc 	bl	80044f4 <HAL_GPIO_Init>
}
 800215c:	e04b      	b.n	80021f6 <HAL_UART_MspInit+0x1ee>
  else if(uartHandle->Instance==USART1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a2c      	ldr	r2, [pc, #176]	@ (8002214 <HAL_UART_MspInit+0x20c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d146      	bne.n	80021f6 <HAL_UART_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002168:	f04f 0201 	mov.w	r2, #1
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800217a:	f107 0320 	add.w	r3, r7, #32
 800217e:	4618      	mov	r0, r3
 8002180:	f004 fb80 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_UART_MspInit+0x186>
      Error_Handler();
 800218a:	f7fe ffd7 	bl	800113c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800218e:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 8002190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002194:	4a1b      	ldr	r2, [pc, #108]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 8002196:	f043 0310 	orr.w	r3, r3, #16
 800219a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800219e:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 80021a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ac:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 80021ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b2:	4a14      	ldr	r2, [pc, #80]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021bc:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <HAL_UART_MspInit+0x1fc>)
 80021be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80021ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2300      	movs	r3, #0
 80021e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021e4:	2307      	movs	r3, #7
 80021e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80021ee:	4619      	mov	r1, r3
 80021f0:	4805      	ldr	r0, [pc, #20]	@ (8002208 <HAL_UART_MspInit+0x200>)
 80021f2:	f002 f97f 	bl	80044f4 <HAL_GPIO_Init>
}
 80021f6:	bf00      	nop
 80021f8:	37f0      	adds	r7, #240	@ 0xf0
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40004c00 	.word	0x40004c00
 8002204:	58024400 	.word	0x58024400
 8002208:	58020000 	.word	0x58020000
 800220c:	40007800 	.word	0x40007800
 8002210:	58021400 	.word	0x58021400
 8002214:	40011000 	.word	0x40011000

08002218 <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800221c:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <MX_USB_OTG_HS_HCD_Init+0x48>)
 800221e:	4a11      	ldr	r2, [pc, #68]	@ (8002264 <MX_USB_OTG_HS_HCD_Init+0x4c>)
 8002220:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8002222:	4b0f      	ldr	r3, [pc, #60]	@ (8002260 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8002224:	2210      	movs	r2, #16
 8002226:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8002228:	4b0d      	ldr	r3, [pc, #52]	@ (8002260 <MX_USB_OTG_HS_HCD_Init+0x48>)
 800222a:	2201      	movs	r2, #1
 800222c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800222e:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8002230:	2200      	movs	r2, #0
 8002232:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8002234:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8002236:	2202      	movs	r2, #2
 8002238:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800223a:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <MX_USB_OTG_HS_HCD_Init+0x48>)
 800223c:	2200      	movs	r2, #0
 800223e:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8002240:	4b07      	ldr	r3, [pc, #28]	@ (8002260 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8002242:	2200      	movs	r2, #0
 8002244:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8002248:	2200      	movs	r2, #0
 800224a:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800224c:	4804      	ldr	r0, [pc, #16]	@ (8002260 <MX_USB_OTG_HS_HCD_Init+0x48>)
 800224e:	f002 fb12 	bl	8004876 <HAL_HCD_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_USB_OTG_HS_HCD_Init+0x44>
  {
    Error_Handler();
 8002258:	f7fe ff70 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	24000708 	.word	0x24000708
 8002264:	40040000 	.word	0x40040000

08002268 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b0b2      	sub	sp, #200	@ 0xc8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	22b8      	movs	r2, #184	@ 0xb8
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f008 fd83 	bl	800ad84 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a16      	ldr	r2, [pc, #88]	@ (80022dc <HAL_HCD_MspInit+0x74>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d124      	bne.n	80022d2 <HAL_HCD_MspInit+0x6a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002288:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002294:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002298:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	4618      	mov	r0, r3
 80022a2:	f004 faef 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_HCD_MspInit+0x48>
    {
      Error_Handler();
 80022ac:	f7fe ff46 	bl	800113c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80022b0:	f003 fb72 	bl	8005998 <HAL_PWREx_EnableUSBVoltageDetector>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80022b4:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <HAL_HCD_MspInit+0x78>)
 80022b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022ba:	4a09      	ldr	r2, [pc, #36]	@ (80022e0 <HAL_HCD_MspInit+0x78>)
 80022bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022c0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80022c4:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <HAL_HCD_MspInit+0x78>)
 80022c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80022d2:	bf00      	nop
 80022d4:	37c8      	adds	r7, #200	@ 0xc8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40040000 	.word	0x40040000
 80022e0:	58024400 	.word	0x58024400

080022e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80022e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800231c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022e8:	f7ff fc18 	bl	8001b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022ec:	480c      	ldr	r0, [pc, #48]	@ (8002320 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022ee:	490d      	ldr	r1, [pc, #52]	@ (8002324 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002328 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f4:	e002      	b.n	80022fc <LoopCopyDataInit>

080022f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fa:	3304      	adds	r3, #4

080022fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002300:	d3f9      	bcc.n	80022f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002302:	4a0a      	ldr	r2, [pc, #40]	@ (800232c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002304:	4c0a      	ldr	r4, [pc, #40]	@ (8002330 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002308:	e001      	b.n	800230e <LoopFillZerobss>

0800230a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800230c:	3204      	adds	r2, #4

0800230e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002310:	d3fb      	bcc.n	800230a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002312:	f008 fd3f 	bl	800ad94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002316:	f7fe fe79 	bl	800100c <main>
  bx  lr
 800231a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800231c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002320:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002324:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002328:	0800ae44 	.word	0x0800ae44
  ldr r2, =_sbss
 800232c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8002330:	24000b10 	.word	0x24000b10

08002334 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002334:	e7fe      	b.n	8002334 <ADC3_IRQHandler>
	...

08002338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800233e:	2003      	movs	r0, #3
 8002340:	f000 f9a4 	bl	800268c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002344:	f004 f8c8 	bl	80064d8 <HAL_RCC_GetSysClockFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b15      	ldr	r3, [pc, #84]	@ (80023a0 <HAL_Init+0x68>)
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	4913      	ldr	r1, [pc, #76]	@ (80023a4 <HAL_Init+0x6c>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
 8002360:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002362:	4b0f      	ldr	r3, [pc, #60]	@ (80023a0 <HAL_Init+0x68>)
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	4a0e      	ldr	r2, [pc, #56]	@ (80023a4 <HAL_Init+0x6c>)
 800236c:	5cd3      	ldrb	r3, [r2, r3]
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
 8002378:	4a0b      	ldr	r2, [pc, #44]	@ (80023a8 <HAL_Init+0x70>)
 800237a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800237c:	4a0b      	ldr	r2, [pc, #44]	@ (80023ac <HAL_Init+0x74>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002382:	200f      	movs	r0, #15
 8002384:	f000 f814 	bl	80023b0 <HAL_InitTick>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e002      	b.n	8002398 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002392:	f7ff fb53 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	58024400 	.word	0x58024400
 80023a4:	0800adf4 	.word	0x0800adf4
 80023a8:	24000004 	.word	0x24000004
 80023ac:	24000000 	.word	0x24000000

080023b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023b8:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <HAL_InitTick+0x60>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e021      	b.n	8002408 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023c4:	4b13      	ldr	r3, [pc, #76]	@ (8002414 <HAL_InitTick+0x64>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <HAL_InitTick+0x60>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f989 	bl	80026f2 <HAL_SYSTICK_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00e      	b.n	8002408 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b0f      	cmp	r3, #15
 80023ee:	d80a      	bhi.n	8002406 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f0:	2200      	movs	r2, #0
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f000 f953 	bl	80026a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023fc:	4a06      	ldr	r2, [pc, #24]	@ (8002418 <HAL_InitTick+0x68>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	2400000c 	.word	0x2400000c
 8002414:	24000000 	.word	0x24000000
 8002418:	24000008 	.word	0x24000008

0800241c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002420:	4b06      	ldr	r3, [pc, #24]	@ (800243c <HAL_IncTick+0x20>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <HAL_IncTick+0x24>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4413      	add	r3, r2
 800242c:	4a04      	ldr	r2, [pc, #16]	@ (8002440 <HAL_IncTick+0x24>)
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	2400000c 	.word	0x2400000c
 8002440:	24000ae8 	.word	0x24000ae8

08002444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return uwTick;
 8002448:	4b03      	ldr	r3, [pc, #12]	@ (8002458 <HAL_GetTick+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	24000ae8 	.word	0x24000ae8

0800245c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002464:	f7ff ffee 	bl	8002444 <HAL_GetTick>
 8002468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d005      	beq.n	8002482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <HAL_Delay+0x44>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002482:	bf00      	nop
 8002484:	f7ff ffde 	bl	8002444 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d8f7      	bhi.n	8002484 <HAL_Delay+0x28>
  {
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2400000c 	.word	0x2400000c

080024a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80024ac:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f023 0202 	bic.w	r2, r3, #2
 80024b4:	4904      	ldr	r1, [pc, #16]	@ (80024c8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	58003c00 	.word	0x58003c00

080024cc <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a04      	ldr	r2, [pc, #16]	@ (80024e8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80024d6:	f023 0301 	bic.w	r3, r3, #1
 80024da:	6013      	str	r3, [r2, #0]
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	58003c00 	.word	0x58003c00

080024ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024fc:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <__NVIC_SetPriorityGrouping+0x40>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002508:	4013      	ands	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <__NVIC_SetPriorityGrouping+0x44>)
 8002516:	4313      	orrs	r3, r2
 8002518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251a:	4a04      	ldr	r2, [pc, #16]	@ (800252c <__NVIC_SetPriorityGrouping+0x40>)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	60d3      	str	r3, [r2, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00
 8002530:	05fa0000 	.word	0x05fa0000

08002534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002538:	4b04      	ldr	r3, [pc, #16]	@ (800254c <__NVIC_GetPriorityGrouping+0x18>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	f003 0307 	and.w	r3, r3, #7
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800255a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800255e:	2b00      	cmp	r3, #0
 8002560:	db0b      	blt.n	800257a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	f003 021f 	and.w	r2, r3, #31
 8002568:	4907      	ldr	r1, [pc, #28]	@ (8002588 <__NVIC_EnableIRQ+0x38>)
 800256a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	2001      	movs	r0, #1
 8002572:	fa00 f202 	lsl.w	r2, r0, r2
 8002576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000e100 	.word	0xe000e100

0800258c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	6039      	str	r1, [r7, #0]
 8002596:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800259c:	2b00      	cmp	r3, #0
 800259e:	db0a      	blt.n	80025b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	490c      	ldr	r1, [pc, #48]	@ (80025d8 <__NVIC_SetPriority+0x4c>)
 80025a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025aa:	0112      	lsls	r2, r2, #4
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	440b      	add	r3, r1
 80025b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b4:	e00a      	b.n	80025cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4908      	ldr	r1, [pc, #32]	@ (80025dc <__NVIC_SetPriority+0x50>)
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	3b04      	subs	r3, #4
 80025c4:	0112      	lsls	r2, r2, #4
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	440b      	add	r3, r1
 80025ca:	761a      	strb	r2, [r3, #24]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000e100 	.word	0xe000e100
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	@ 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f1c3 0307 	rsb	r3, r3, #7
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	bf28      	it	cs
 80025fe:	2304      	movcs	r3, #4
 8002600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3304      	adds	r3, #4
 8002606:	2b06      	cmp	r3, #6
 8002608:	d902      	bls.n	8002610 <NVIC_EncodePriority+0x30>
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3b03      	subs	r3, #3
 800260e:	e000      	b.n	8002612 <NVIC_EncodePriority+0x32>
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	f04f 32ff 	mov.w	r2, #4294967295
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	401a      	ands	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002628:	f04f 31ff 	mov.w	r1, #4294967295
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	43d9      	mvns	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	4313      	orrs	r3, r2
         );
}
 800263a:	4618      	mov	r0, r3
 800263c:	3724      	adds	r7, #36	@ 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002658:	d301      	bcc.n	800265e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800265a:	2301      	movs	r3, #1
 800265c:	e00f      	b.n	800267e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265e:	4a0a      	ldr	r2, [pc, #40]	@ (8002688 <SysTick_Config+0x40>)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002666:	210f      	movs	r1, #15
 8002668:	f04f 30ff 	mov.w	r0, #4294967295
 800266c:	f7ff ff8e 	bl	800258c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002670:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <SysTick_Config+0x40>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002676:	4b04      	ldr	r3, [pc, #16]	@ (8002688 <SysTick_Config+0x40>)
 8002678:	2207      	movs	r2, #7
 800267a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	e000e010 	.word	0xe000e010

0800268c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ff29 	bl	80024ec <__NVIC_SetPriorityGrouping>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026b0:	f7ff ff40 	bl	8002534 <__NVIC_GetPriorityGrouping>
 80026b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	6978      	ldr	r0, [r7, #20]
 80026bc:	f7ff ff90 	bl	80025e0 <NVIC_EncodePriority>
 80026c0:	4602      	mov	r2, r0
 80026c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff5f 	bl	800258c <__NVIC_SetPriority>
}
 80026ce:	bf00      	nop
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff33 	bl	8002550 <__NVIC_EnableIRQ>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ffa4 	bl	8002648 <SysTick_Config>
 8002700:	4603      	mov	r3, r0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e0b4      	b.n	8002888 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 800271e:	4b5c      	ldr	r3, [pc, #368]	@ (8002890 <HAL_DFSDM_ChannelInit+0x184>)
 8002720:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 8002722:	4b5c      	ldr	r3, [pc, #368]	@ (8002894 <HAL_DFSDM_ChannelInit+0x188>)
 8002724:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 8002726:	4b5c      	ldr	r3, [pc, #368]	@ (8002898 <HAL_DFSDM_ChannelInit+0x18c>)
 8002728:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f9d6 	bl	8002ae0 <DFSDM_GetChannelFromInstance>
 8002734:	4603      	mov	r3, r0
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0a0      	b.n	8002888 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe f872 	bl	8000830 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d125      	bne.n	80027aa <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	431a      	orrs	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	791b      	ldrb	r3, [r3, #4]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d108      	bne.n	800279e <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	3b01      	subs	r3, #1
 8002796:	041b      	lsls	r3, r3, #16
 8002798:	431a      	orrs	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80027b8:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6819      	ldr	r1, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80027c8:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80027ce:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 020f 	bic.w	r2, r2, #15
 80027e6:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800280e:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6899      	ldr	r1, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281e:	3b01      	subs	r3, #1
 8002820:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f002 0207 	and.w	r2, r2, #7
 800283a:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002846:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284c:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002866:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f000 f933 	bl	8002ae0 <DFSDM_GetChannelFromInstance>
 800287a:	4603      	mov	r3, r0
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	24000aec 	.word	0x24000aec
 8002894:	24000af0 	.word	0x24000af0
 8002898:	40017800 	.word	0x40017800

0800289c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0c8      	b.n	8002a40 <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 80028ae:	4b66      	ldr	r3, [pc, #408]	@ (8002a48 <HAL_DFSDM_FilterInit+0x1ac>)
 80028b0:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d109      	bne.n	80028d0 <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d003      	beq.n	80028cc <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0b7      	b.n	8002a40 <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7fd feeb 	bl	80006c4 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 80028fc:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7a1b      	ldrb	r3, [r3, #8]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d108      	bne.n	8002918 <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	e007      	b.n	8002928 <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8002926:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7a5b      	ldrb	r3, [r3, #9]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d108      	bne.n	8002942 <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	e007      	b.n	8002952 <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002950:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6819      	ldr	r1, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a4c <HAL_DFSDM_FilterInit+0x1b0>)
 800295e:	400b      	ands	r3, r1
 8002960:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d108      	bne.n	800297c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6819      	ldr	r1, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	7c1b      	ldrb	r3, [r3, #16]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d108      	bne.n	8002996 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0210 	orr.w	r2, r2, #16
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e007      	b.n	80029a6 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0210 	bic.w	r2, r2, #16
 80029a4:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	7c5b      	ldrb	r3, [r3, #17]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d108      	bne.n	80029c0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0220 	orr.w	r2, r2, #32
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	e007      	b.n	80029d0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0220 	bic.w	r2, r2, #32
 80029ce:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6959      	ldr	r1, [r3, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4b1d      	ldr	r3, [pc, #116]	@ (8002a50 <HAL_DFSDM_FilterInit+0x1b4>)
 80029dc:	400b      	ands	r3, r1
 80029de:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6959      	ldr	r1, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80029f2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80029fa:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699a      	ldr	r2, [r3, #24]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7c1a      	ldrb	r2, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0201 	orr.w	r2, r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40017900 	.word	0x40017900
 8002a4c:	ffff80f7 	.word	0xffff80f7
 8002a50:	1c00ff00 	.word	0x1c00ff00

08002a54 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d02c      	beq.n	8002ac8 <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002a74:	2bff      	cmp	r3, #255	@ 0xff
 8002a76:	d027      	beq.n	8002ac8 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6819      	ldr	r1, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4b16      	ldr	r3, [pc, #88]	@ (8002adc <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8002a84:	400b      	ands	r3, r1
 8002a86:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d10d      	bne.n	8002aaa <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	e00a      	b.n	8002ac0 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6819      	ldr	r1, [r3, #0]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ac6:	e001      	b.n	8002acc <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	f8fbffff 	.word	0xf8fbffff

08002ae0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a1c      	ldr	r2, [pc, #112]	@ (8002b5c <DFSDM_GetChannelFromInstance+0x7c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d102      	bne.n	8002af6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	e02b      	b.n	8002b4e <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a19      	ldr	r2, [pc, #100]	@ (8002b60 <DFSDM_GetChannelFromInstance+0x80>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d102      	bne.n	8002b04 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002afe:	2301      	movs	r3, #1
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	e024      	b.n	8002b4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a17      	ldr	r2, [pc, #92]	@ (8002b64 <DFSDM_GetChannelFromInstance+0x84>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d102      	bne.n	8002b12 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	e01d      	b.n	8002b4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a14      	ldr	r2, [pc, #80]	@ (8002b68 <DFSDM_GetChannelFromInstance+0x88>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d102      	bne.n	8002b20 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	e016      	b.n	8002b4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a12      	ldr	r2, [pc, #72]	@ (8002b6c <DFSDM_GetChannelFromInstance+0x8c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d102      	bne.n	8002b2e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8002b28:	2304      	movs	r3, #4
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e00f      	b.n	8002b4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a0f      	ldr	r2, [pc, #60]	@ (8002b70 <DFSDM_GetChannelFromInstance+0x90>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d102      	bne.n	8002b3c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8002b36:	2305      	movs	r3, #5
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	e008      	b.n	8002b4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8002b74 <DFSDM_GetChannelFromInstance+0x94>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d102      	bne.n	8002b4a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002b44:	2306      	movs	r3, #6
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	e001      	b.n	8002b4e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	40017800 	.word	0x40017800
 8002b60:	40017820 	.word	0x40017820
 8002b64:	40017840 	.word	0x40017840
 8002b68:	40017860 	.word	0x40017860
 8002b6c:	40017880 	.word	0x40017880
 8002b70:	400178a0 	.word	0x400178a0
 8002b74:	400178c0 	.word	0x400178c0

08002b78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002b80:	f7ff fc60 	bl	8002444 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e312      	b.n	80031b6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a66      	ldr	r2, [pc, #408]	@ (8002d30 <HAL_DMA_Init+0x1b8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d04a      	beq.n	8002c30 <HAL_DMA_Init+0xb8>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a65      	ldr	r2, [pc, #404]	@ (8002d34 <HAL_DMA_Init+0x1bc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d045      	beq.n	8002c30 <HAL_DMA_Init+0xb8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a63      	ldr	r2, [pc, #396]	@ (8002d38 <HAL_DMA_Init+0x1c0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d040      	beq.n	8002c30 <HAL_DMA_Init+0xb8>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a62      	ldr	r2, [pc, #392]	@ (8002d3c <HAL_DMA_Init+0x1c4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d03b      	beq.n	8002c30 <HAL_DMA_Init+0xb8>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a60      	ldr	r2, [pc, #384]	@ (8002d40 <HAL_DMA_Init+0x1c8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d036      	beq.n	8002c30 <HAL_DMA_Init+0xb8>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a5f      	ldr	r2, [pc, #380]	@ (8002d44 <HAL_DMA_Init+0x1cc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d031      	beq.n	8002c30 <HAL_DMA_Init+0xb8>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002d48 <HAL_DMA_Init+0x1d0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d02c      	beq.n	8002c30 <HAL_DMA_Init+0xb8>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a5c      	ldr	r2, [pc, #368]	@ (8002d4c <HAL_DMA_Init+0x1d4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d027      	beq.n	8002c30 <HAL_DMA_Init+0xb8>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a5a      	ldr	r2, [pc, #360]	@ (8002d50 <HAL_DMA_Init+0x1d8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d022      	beq.n	8002c30 <HAL_DMA_Init+0xb8>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a59      	ldr	r2, [pc, #356]	@ (8002d54 <HAL_DMA_Init+0x1dc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d01d      	beq.n	8002c30 <HAL_DMA_Init+0xb8>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a57      	ldr	r2, [pc, #348]	@ (8002d58 <HAL_DMA_Init+0x1e0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d018      	beq.n	8002c30 <HAL_DMA_Init+0xb8>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a56      	ldr	r2, [pc, #344]	@ (8002d5c <HAL_DMA_Init+0x1e4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d013      	beq.n	8002c30 <HAL_DMA_Init+0xb8>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a54      	ldr	r2, [pc, #336]	@ (8002d60 <HAL_DMA_Init+0x1e8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00e      	beq.n	8002c30 <HAL_DMA_Init+0xb8>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a53      	ldr	r2, [pc, #332]	@ (8002d64 <HAL_DMA_Init+0x1ec>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d009      	beq.n	8002c30 <HAL_DMA_Init+0xb8>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a51      	ldr	r2, [pc, #324]	@ (8002d68 <HAL_DMA_Init+0x1f0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d004      	beq.n	8002c30 <HAL_DMA_Init+0xb8>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a50      	ldr	r2, [pc, #320]	@ (8002d6c <HAL_DMA_Init+0x1f4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d101      	bne.n	8002c34 <HAL_DMA_Init+0xbc>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <HAL_DMA_Init+0xbe>
 8002c34:	2300      	movs	r3, #0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 813c 	beq.w	8002eb4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a37      	ldr	r2, [pc, #220]	@ (8002d30 <HAL_DMA_Init+0x1b8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d04a      	beq.n	8002cec <HAL_DMA_Init+0x174>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a36      	ldr	r2, [pc, #216]	@ (8002d34 <HAL_DMA_Init+0x1bc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d045      	beq.n	8002cec <HAL_DMA_Init+0x174>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a34      	ldr	r2, [pc, #208]	@ (8002d38 <HAL_DMA_Init+0x1c0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d040      	beq.n	8002cec <HAL_DMA_Init+0x174>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a33      	ldr	r2, [pc, #204]	@ (8002d3c <HAL_DMA_Init+0x1c4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d03b      	beq.n	8002cec <HAL_DMA_Init+0x174>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a31      	ldr	r2, [pc, #196]	@ (8002d40 <HAL_DMA_Init+0x1c8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d036      	beq.n	8002cec <HAL_DMA_Init+0x174>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a30      	ldr	r2, [pc, #192]	@ (8002d44 <HAL_DMA_Init+0x1cc>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d031      	beq.n	8002cec <HAL_DMA_Init+0x174>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a2e      	ldr	r2, [pc, #184]	@ (8002d48 <HAL_DMA_Init+0x1d0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d02c      	beq.n	8002cec <HAL_DMA_Init+0x174>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a2d      	ldr	r2, [pc, #180]	@ (8002d4c <HAL_DMA_Init+0x1d4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d027      	beq.n	8002cec <HAL_DMA_Init+0x174>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d50 <HAL_DMA_Init+0x1d8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d022      	beq.n	8002cec <HAL_DMA_Init+0x174>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a2a      	ldr	r2, [pc, #168]	@ (8002d54 <HAL_DMA_Init+0x1dc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d01d      	beq.n	8002cec <HAL_DMA_Init+0x174>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a28      	ldr	r2, [pc, #160]	@ (8002d58 <HAL_DMA_Init+0x1e0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d018      	beq.n	8002cec <HAL_DMA_Init+0x174>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a27      	ldr	r2, [pc, #156]	@ (8002d5c <HAL_DMA_Init+0x1e4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d013      	beq.n	8002cec <HAL_DMA_Init+0x174>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a25      	ldr	r2, [pc, #148]	@ (8002d60 <HAL_DMA_Init+0x1e8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00e      	beq.n	8002cec <HAL_DMA_Init+0x174>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a24      	ldr	r2, [pc, #144]	@ (8002d64 <HAL_DMA_Init+0x1ec>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d009      	beq.n	8002cec <HAL_DMA_Init+0x174>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a22      	ldr	r2, [pc, #136]	@ (8002d68 <HAL_DMA_Init+0x1f0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d004      	beq.n	8002cec <HAL_DMA_Init+0x174>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a21      	ldr	r2, [pc, #132]	@ (8002d6c <HAL_DMA_Init+0x1f4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d108      	bne.n	8002cfe <HAL_DMA_Init+0x186>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0201 	bic.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	e007      	b.n	8002d0e <HAL_DMA_Init+0x196>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0201 	bic.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d0e:	e02f      	b.n	8002d70 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d10:	f7ff fb98 	bl	8002444 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b05      	cmp	r3, #5
 8002d1c:	d928      	bls.n	8002d70 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2203      	movs	r2, #3
 8002d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e242      	b.n	80031b6 <HAL_DMA_Init+0x63e>
 8002d30:	40020010 	.word	0x40020010
 8002d34:	40020028 	.word	0x40020028
 8002d38:	40020040 	.word	0x40020040
 8002d3c:	40020058 	.word	0x40020058
 8002d40:	40020070 	.word	0x40020070
 8002d44:	40020088 	.word	0x40020088
 8002d48:	400200a0 	.word	0x400200a0
 8002d4c:	400200b8 	.word	0x400200b8
 8002d50:	40020410 	.word	0x40020410
 8002d54:	40020428 	.word	0x40020428
 8002d58:	40020440 	.word	0x40020440
 8002d5c:	40020458 	.word	0x40020458
 8002d60:	40020470 	.word	0x40020470
 8002d64:	40020488 	.word	0x40020488
 8002d68:	400204a0 	.word	0x400204a0
 8002d6c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1c8      	bne.n	8002d10 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4b83      	ldr	r3, [pc, #524]	@ (8002f98 <HAL_DMA_Init+0x420>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002d96:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d107      	bne.n	8002dd4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b28      	cmp	r3, #40	@ 0x28
 8002dda:	d903      	bls.n	8002de4 <HAL_DMA_Init+0x26c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b2e      	cmp	r3, #46	@ 0x2e
 8002de2:	d91f      	bls.n	8002e24 <HAL_DMA_Init+0x2ac>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b3e      	cmp	r3, #62	@ 0x3e
 8002dea:	d903      	bls.n	8002df4 <HAL_DMA_Init+0x27c>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b42      	cmp	r3, #66	@ 0x42
 8002df2:	d917      	bls.n	8002e24 <HAL_DMA_Init+0x2ac>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b46      	cmp	r3, #70	@ 0x46
 8002dfa:	d903      	bls.n	8002e04 <HAL_DMA_Init+0x28c>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b48      	cmp	r3, #72	@ 0x48
 8002e02:	d90f      	bls.n	8002e24 <HAL_DMA_Init+0x2ac>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b4e      	cmp	r3, #78	@ 0x4e
 8002e0a:	d903      	bls.n	8002e14 <HAL_DMA_Init+0x29c>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b52      	cmp	r3, #82	@ 0x52
 8002e12:	d907      	bls.n	8002e24 <HAL_DMA_Init+0x2ac>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b73      	cmp	r3, #115	@ 0x73
 8002e1a:	d905      	bls.n	8002e28 <HAL_DMA_Init+0x2b0>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b77      	cmp	r3, #119	@ 0x77
 8002e22:	d801      	bhi.n	8002e28 <HAL_DMA_Init+0x2b0>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <HAL_DMA_Init+0x2b2>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e34:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f023 0307 	bic.w	r3, r3, #7
 8002e4c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d117      	bne.n	8002e90 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00e      	beq.n	8002e90 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f001 f9b4 	bl	80041e0 <DMA_CheckFifoParam>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d008      	beq.n	8002e90 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2240      	movs	r2, #64	@ 0x40
 8002e82:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e192      	b.n	80031b6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f001 f8ef 	bl	800407c <DMA_CalcBaseAndBitshift>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	223f      	movs	r2, #63	@ 0x3f
 8002eac:	409a      	lsls	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	e0c8      	b.n	8003046 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a38      	ldr	r2, [pc, #224]	@ (8002f9c <HAL_DMA_Init+0x424>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d022      	beq.n	8002f04 <HAL_DMA_Init+0x38c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a37      	ldr	r2, [pc, #220]	@ (8002fa0 <HAL_DMA_Init+0x428>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d01d      	beq.n	8002f04 <HAL_DMA_Init+0x38c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a35      	ldr	r2, [pc, #212]	@ (8002fa4 <HAL_DMA_Init+0x42c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d018      	beq.n	8002f04 <HAL_DMA_Init+0x38c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a34      	ldr	r2, [pc, #208]	@ (8002fa8 <HAL_DMA_Init+0x430>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <HAL_DMA_Init+0x38c>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a32      	ldr	r2, [pc, #200]	@ (8002fac <HAL_DMA_Init+0x434>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00e      	beq.n	8002f04 <HAL_DMA_Init+0x38c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a31      	ldr	r2, [pc, #196]	@ (8002fb0 <HAL_DMA_Init+0x438>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_DMA_Init+0x38c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a2f      	ldr	r2, [pc, #188]	@ (8002fb4 <HAL_DMA_Init+0x43c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d004      	beq.n	8002f04 <HAL_DMA_Init+0x38c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb8 <HAL_DMA_Init+0x440>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_DMA_Init+0x390>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_DMA_Init+0x392>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 8092 	beq.w	8003034 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a21      	ldr	r2, [pc, #132]	@ (8002f9c <HAL_DMA_Init+0x424>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d021      	beq.n	8002f5e <HAL_DMA_Init+0x3e6>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a20      	ldr	r2, [pc, #128]	@ (8002fa0 <HAL_DMA_Init+0x428>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d01c      	beq.n	8002f5e <HAL_DMA_Init+0x3e6>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1e      	ldr	r2, [pc, #120]	@ (8002fa4 <HAL_DMA_Init+0x42c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d017      	beq.n	8002f5e <HAL_DMA_Init+0x3e6>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa8 <HAL_DMA_Init+0x430>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d012      	beq.n	8002f5e <HAL_DMA_Init+0x3e6>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002fac <HAL_DMA_Init+0x434>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00d      	beq.n	8002f5e <HAL_DMA_Init+0x3e6>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1a      	ldr	r2, [pc, #104]	@ (8002fb0 <HAL_DMA_Init+0x438>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d008      	beq.n	8002f5e <HAL_DMA_Init+0x3e6>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a18      	ldr	r2, [pc, #96]	@ (8002fb4 <HAL_DMA_Init+0x43c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d003      	beq.n	8002f5e <HAL_DMA_Init+0x3e6>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	@ (8002fb8 <HAL_DMA_Init+0x440>)
 8002f5c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2202      	movs	r2, #2
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4b10      	ldr	r3, [pc, #64]	@ (8002fbc <HAL_DMA_Init+0x444>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b40      	cmp	r3, #64	@ 0x40
 8002f84:	d01c      	beq.n	8002fc0 <HAL_DMA_Init+0x448>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b80      	cmp	r3, #128	@ 0x80
 8002f8c:	d102      	bne.n	8002f94 <HAL_DMA_Init+0x41c>
 8002f8e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f92:	e016      	b.n	8002fc2 <HAL_DMA_Init+0x44a>
 8002f94:	2300      	movs	r3, #0
 8002f96:	e014      	b.n	8002fc2 <HAL_DMA_Init+0x44a>
 8002f98:	fe10803f 	.word	0xfe10803f
 8002f9c:	58025408 	.word	0x58025408
 8002fa0:	5802541c 	.word	0x5802541c
 8002fa4:	58025430 	.word	0x58025430
 8002fa8:	58025444 	.word	0x58025444
 8002fac:	58025458 	.word	0x58025458
 8002fb0:	5802546c 	.word	0x5802546c
 8002fb4:	58025480 	.word	0x58025480
 8002fb8:	58025494 	.word	0x58025494
 8002fbc:	fffe000f 	.word	0xfffe000f
 8002fc0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68d2      	ldr	r2, [r2, #12]
 8002fc6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002fc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002fd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002fd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002fe0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002fe8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ff0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	4b6e      	ldr	r3, [pc, #440]	@ (80031c0 <HAL_DMA_Init+0x648>)
 8003008:	4413      	add	r3, r2
 800300a:	4a6e      	ldr	r2, [pc, #440]	@ (80031c4 <HAL_DMA_Init+0x64c>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	009a      	lsls	r2, r3, #2
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f001 f82f 	bl	800407c <DMA_CalcBaseAndBitshift>
 800301e:	4603      	mov	r3, r0
 8003020:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	f003 031f 	and.w	r3, r3, #31
 800302a:	2201      	movs	r2, #1
 800302c:	409a      	lsls	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	e008      	b.n	8003046 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2240      	movs	r2, #64	@ 0x40
 8003038:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2203      	movs	r2, #3
 800303e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e0b7      	b.n	80031b6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a5f      	ldr	r2, [pc, #380]	@ (80031c8 <HAL_DMA_Init+0x650>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d072      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a5d      	ldr	r2, [pc, #372]	@ (80031cc <HAL_DMA_Init+0x654>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d06d      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a5c      	ldr	r2, [pc, #368]	@ (80031d0 <HAL_DMA_Init+0x658>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d068      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a5a      	ldr	r2, [pc, #360]	@ (80031d4 <HAL_DMA_Init+0x65c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d063      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a59      	ldr	r2, [pc, #356]	@ (80031d8 <HAL_DMA_Init+0x660>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d05e      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a57      	ldr	r2, [pc, #348]	@ (80031dc <HAL_DMA_Init+0x664>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d059      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a56      	ldr	r2, [pc, #344]	@ (80031e0 <HAL_DMA_Init+0x668>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d054      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a54      	ldr	r2, [pc, #336]	@ (80031e4 <HAL_DMA_Init+0x66c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d04f      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a53      	ldr	r2, [pc, #332]	@ (80031e8 <HAL_DMA_Init+0x670>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d04a      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a51      	ldr	r2, [pc, #324]	@ (80031ec <HAL_DMA_Init+0x674>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d045      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a50      	ldr	r2, [pc, #320]	@ (80031f0 <HAL_DMA_Init+0x678>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d040      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a4e      	ldr	r2, [pc, #312]	@ (80031f4 <HAL_DMA_Init+0x67c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d03b      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a4d      	ldr	r2, [pc, #308]	@ (80031f8 <HAL_DMA_Init+0x680>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d036      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a4b      	ldr	r2, [pc, #300]	@ (80031fc <HAL_DMA_Init+0x684>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d031      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003200 <HAL_DMA_Init+0x688>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d02c      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a48      	ldr	r2, [pc, #288]	@ (8003204 <HAL_DMA_Init+0x68c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d027      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a47      	ldr	r2, [pc, #284]	@ (8003208 <HAL_DMA_Init+0x690>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d022      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a45      	ldr	r2, [pc, #276]	@ (800320c <HAL_DMA_Init+0x694>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d01d      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a44      	ldr	r2, [pc, #272]	@ (8003210 <HAL_DMA_Init+0x698>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d018      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a42      	ldr	r2, [pc, #264]	@ (8003214 <HAL_DMA_Init+0x69c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a41      	ldr	r2, [pc, #260]	@ (8003218 <HAL_DMA_Init+0x6a0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00e      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a3f      	ldr	r2, [pc, #252]	@ (800321c <HAL_DMA_Init+0x6a4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d009      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a3e      	ldr	r2, [pc, #248]	@ (8003220 <HAL_DMA_Init+0x6a8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d004      	beq.n	8003136 <HAL_DMA_Init+0x5be>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a3c      	ldr	r2, [pc, #240]	@ (8003224 <HAL_DMA_Init+0x6ac>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_DMA_Init+0x5c2>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_DMA_Init+0x5c4>
 800313a:	2300      	movs	r3, #0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d032      	beq.n	80031a6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f001 f8c9 	bl	80042d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b80      	cmp	r3, #128	@ 0x80
 800314c:	d102      	bne.n	8003154 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003168:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d010      	beq.n	8003194 <HAL_DMA_Init+0x61c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b08      	cmp	r3, #8
 8003178:	d80c      	bhi.n	8003194 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f001 f946 	bl	800440c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	e008      	b.n	80031a6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	a7fdabf8 	.word	0xa7fdabf8
 80031c4:	cccccccd 	.word	0xcccccccd
 80031c8:	40020010 	.word	0x40020010
 80031cc:	40020028 	.word	0x40020028
 80031d0:	40020040 	.word	0x40020040
 80031d4:	40020058 	.word	0x40020058
 80031d8:	40020070 	.word	0x40020070
 80031dc:	40020088 	.word	0x40020088
 80031e0:	400200a0 	.word	0x400200a0
 80031e4:	400200b8 	.word	0x400200b8
 80031e8:	40020410 	.word	0x40020410
 80031ec:	40020428 	.word	0x40020428
 80031f0:	40020440 	.word	0x40020440
 80031f4:	40020458 	.word	0x40020458
 80031f8:	40020470 	.word	0x40020470
 80031fc:	40020488 	.word	0x40020488
 8003200:	400204a0 	.word	0x400204a0
 8003204:	400204b8 	.word	0x400204b8
 8003208:	58025408 	.word	0x58025408
 800320c:	5802541c 	.word	0x5802541c
 8003210:	58025430 	.word	0x58025430
 8003214:	58025444 	.word	0x58025444
 8003218:	58025458 	.word	0x58025458
 800321c:	5802546c 	.word	0x5802546c
 8003220:	58025480 	.word	0x58025480
 8003224:	58025494 	.word	0x58025494

08003228 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	@ 0x28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003234:	4b67      	ldr	r3, [pc, #412]	@ (80033d4 <HAL_DMA_IRQHandler+0x1ac>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a67      	ldr	r2, [pc, #412]	@ (80033d8 <HAL_DMA_IRQHandler+0x1b0>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	0a9b      	lsrs	r3, r3, #10
 8003240:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003246:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a5f      	ldr	r2, [pc, #380]	@ (80033dc <HAL_DMA_IRQHandler+0x1b4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d04a      	beq.n	80032fa <HAL_DMA_IRQHandler+0xd2>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a5d      	ldr	r2, [pc, #372]	@ (80033e0 <HAL_DMA_IRQHandler+0x1b8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d045      	beq.n	80032fa <HAL_DMA_IRQHandler+0xd2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a5c      	ldr	r2, [pc, #368]	@ (80033e4 <HAL_DMA_IRQHandler+0x1bc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d040      	beq.n	80032fa <HAL_DMA_IRQHandler+0xd2>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a5a      	ldr	r2, [pc, #360]	@ (80033e8 <HAL_DMA_IRQHandler+0x1c0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d03b      	beq.n	80032fa <HAL_DMA_IRQHandler+0xd2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a59      	ldr	r2, [pc, #356]	@ (80033ec <HAL_DMA_IRQHandler+0x1c4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d036      	beq.n	80032fa <HAL_DMA_IRQHandler+0xd2>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a57      	ldr	r2, [pc, #348]	@ (80033f0 <HAL_DMA_IRQHandler+0x1c8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d031      	beq.n	80032fa <HAL_DMA_IRQHandler+0xd2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a56      	ldr	r2, [pc, #344]	@ (80033f4 <HAL_DMA_IRQHandler+0x1cc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d02c      	beq.n	80032fa <HAL_DMA_IRQHandler+0xd2>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a54      	ldr	r2, [pc, #336]	@ (80033f8 <HAL_DMA_IRQHandler+0x1d0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d027      	beq.n	80032fa <HAL_DMA_IRQHandler+0xd2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a53      	ldr	r2, [pc, #332]	@ (80033fc <HAL_DMA_IRQHandler+0x1d4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d022      	beq.n	80032fa <HAL_DMA_IRQHandler+0xd2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a51      	ldr	r2, [pc, #324]	@ (8003400 <HAL_DMA_IRQHandler+0x1d8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d01d      	beq.n	80032fa <HAL_DMA_IRQHandler+0xd2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a50      	ldr	r2, [pc, #320]	@ (8003404 <HAL_DMA_IRQHandler+0x1dc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d018      	beq.n	80032fa <HAL_DMA_IRQHandler+0xd2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a4e      	ldr	r2, [pc, #312]	@ (8003408 <HAL_DMA_IRQHandler+0x1e0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <HAL_DMA_IRQHandler+0xd2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a4d      	ldr	r2, [pc, #308]	@ (800340c <HAL_DMA_IRQHandler+0x1e4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00e      	beq.n	80032fa <HAL_DMA_IRQHandler+0xd2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003410 <HAL_DMA_IRQHandler+0x1e8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d009      	beq.n	80032fa <HAL_DMA_IRQHandler+0xd2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a4a      	ldr	r2, [pc, #296]	@ (8003414 <HAL_DMA_IRQHandler+0x1ec>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d004      	beq.n	80032fa <HAL_DMA_IRQHandler+0xd2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a48      	ldr	r2, [pc, #288]	@ (8003418 <HAL_DMA_IRQHandler+0x1f0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_DMA_IRQHandler+0xd6>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <HAL_DMA_IRQHandler+0xd8>
 80032fe:	2300      	movs	r3, #0
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 842b 	beq.w	8003b5c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330a:	f003 031f 	and.w	r3, r3, #31
 800330e:	2208      	movs	r2, #8
 8003310:	409a      	lsls	r2, r3
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80a2 	beq.w	8003460 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a2e      	ldr	r2, [pc, #184]	@ (80033dc <HAL_DMA_IRQHandler+0x1b4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d04a      	beq.n	80033bc <HAL_DMA_IRQHandler+0x194>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2d      	ldr	r2, [pc, #180]	@ (80033e0 <HAL_DMA_IRQHandler+0x1b8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d045      	beq.n	80033bc <HAL_DMA_IRQHandler+0x194>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2b      	ldr	r2, [pc, #172]	@ (80033e4 <HAL_DMA_IRQHandler+0x1bc>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d040      	beq.n	80033bc <HAL_DMA_IRQHandler+0x194>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2a      	ldr	r2, [pc, #168]	@ (80033e8 <HAL_DMA_IRQHandler+0x1c0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d03b      	beq.n	80033bc <HAL_DMA_IRQHandler+0x194>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a28      	ldr	r2, [pc, #160]	@ (80033ec <HAL_DMA_IRQHandler+0x1c4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d036      	beq.n	80033bc <HAL_DMA_IRQHandler+0x194>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a27      	ldr	r2, [pc, #156]	@ (80033f0 <HAL_DMA_IRQHandler+0x1c8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d031      	beq.n	80033bc <HAL_DMA_IRQHandler+0x194>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a25      	ldr	r2, [pc, #148]	@ (80033f4 <HAL_DMA_IRQHandler+0x1cc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d02c      	beq.n	80033bc <HAL_DMA_IRQHandler+0x194>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a24      	ldr	r2, [pc, #144]	@ (80033f8 <HAL_DMA_IRQHandler+0x1d0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d027      	beq.n	80033bc <HAL_DMA_IRQHandler+0x194>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a22      	ldr	r2, [pc, #136]	@ (80033fc <HAL_DMA_IRQHandler+0x1d4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d022      	beq.n	80033bc <HAL_DMA_IRQHandler+0x194>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a21      	ldr	r2, [pc, #132]	@ (8003400 <HAL_DMA_IRQHandler+0x1d8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d01d      	beq.n	80033bc <HAL_DMA_IRQHandler+0x194>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1f      	ldr	r2, [pc, #124]	@ (8003404 <HAL_DMA_IRQHandler+0x1dc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d018      	beq.n	80033bc <HAL_DMA_IRQHandler+0x194>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1e      	ldr	r2, [pc, #120]	@ (8003408 <HAL_DMA_IRQHandler+0x1e0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d013      	beq.n	80033bc <HAL_DMA_IRQHandler+0x194>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a1c      	ldr	r2, [pc, #112]	@ (800340c <HAL_DMA_IRQHandler+0x1e4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00e      	beq.n	80033bc <HAL_DMA_IRQHandler+0x194>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003410 <HAL_DMA_IRQHandler+0x1e8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d009      	beq.n	80033bc <HAL_DMA_IRQHandler+0x194>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a19      	ldr	r2, [pc, #100]	@ (8003414 <HAL_DMA_IRQHandler+0x1ec>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d004      	beq.n	80033bc <HAL_DMA_IRQHandler+0x194>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a18      	ldr	r2, [pc, #96]	@ (8003418 <HAL_DMA_IRQHandler+0x1f0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d12f      	bne.n	800341c <HAL_DMA_IRQHandler+0x1f4>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	bf14      	ite	ne
 80033ca:	2301      	movne	r3, #1
 80033cc:	2300      	moveq	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	e02e      	b.n	8003430 <HAL_DMA_IRQHandler+0x208>
 80033d2:	bf00      	nop
 80033d4:	24000000 	.word	0x24000000
 80033d8:	1b4e81b5 	.word	0x1b4e81b5
 80033dc:	40020010 	.word	0x40020010
 80033e0:	40020028 	.word	0x40020028
 80033e4:	40020040 	.word	0x40020040
 80033e8:	40020058 	.word	0x40020058
 80033ec:	40020070 	.word	0x40020070
 80033f0:	40020088 	.word	0x40020088
 80033f4:	400200a0 	.word	0x400200a0
 80033f8:	400200b8 	.word	0x400200b8
 80033fc:	40020410 	.word	0x40020410
 8003400:	40020428 	.word	0x40020428
 8003404:	40020440 	.word	0x40020440
 8003408:	40020458 	.word	0x40020458
 800340c:	40020470 	.word	0x40020470
 8003410:	40020488 	.word	0x40020488
 8003414:	400204a0 	.word	0x400204a0
 8003418:	400204b8 	.word	0x400204b8
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	bf14      	ite	ne
 800342a:	2301      	movne	r3, #1
 800342c:	2300      	moveq	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d015      	beq.n	8003460 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0204 	bic.w	r2, r2, #4
 8003442:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	2208      	movs	r2, #8
 800344e:	409a      	lsls	r2, r3
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003458:	f043 0201 	orr.w	r2, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d06e      	beq.n	8003554 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a69      	ldr	r2, [pc, #420]	@ (8003620 <HAL_DMA_IRQHandler+0x3f8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d04a      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2ee>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a67      	ldr	r2, [pc, #412]	@ (8003624 <HAL_DMA_IRQHandler+0x3fc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d045      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2ee>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a66      	ldr	r2, [pc, #408]	@ (8003628 <HAL_DMA_IRQHandler+0x400>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d040      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2ee>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a64      	ldr	r2, [pc, #400]	@ (800362c <HAL_DMA_IRQHandler+0x404>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d03b      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2ee>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a63      	ldr	r2, [pc, #396]	@ (8003630 <HAL_DMA_IRQHandler+0x408>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d036      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2ee>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a61      	ldr	r2, [pc, #388]	@ (8003634 <HAL_DMA_IRQHandler+0x40c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d031      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2ee>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a60      	ldr	r2, [pc, #384]	@ (8003638 <HAL_DMA_IRQHandler+0x410>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d02c      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2ee>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a5e      	ldr	r2, [pc, #376]	@ (800363c <HAL_DMA_IRQHandler+0x414>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d027      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2ee>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a5d      	ldr	r2, [pc, #372]	@ (8003640 <HAL_DMA_IRQHandler+0x418>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d022      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2ee>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a5b      	ldr	r2, [pc, #364]	@ (8003644 <HAL_DMA_IRQHandler+0x41c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01d      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2ee>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a5a      	ldr	r2, [pc, #360]	@ (8003648 <HAL_DMA_IRQHandler+0x420>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d018      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2ee>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a58      	ldr	r2, [pc, #352]	@ (800364c <HAL_DMA_IRQHandler+0x424>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2ee>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a57      	ldr	r2, [pc, #348]	@ (8003650 <HAL_DMA_IRQHandler+0x428>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00e      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2ee>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a55      	ldr	r2, [pc, #340]	@ (8003654 <HAL_DMA_IRQHandler+0x42c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2ee>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a54      	ldr	r2, [pc, #336]	@ (8003658 <HAL_DMA_IRQHandler+0x430>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2ee>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a52      	ldr	r2, [pc, #328]	@ (800365c <HAL_DMA_IRQHandler+0x434>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10a      	bne.n	800352c <HAL_DMA_IRQHandler+0x304>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	e003      	b.n	8003534 <HAL_DMA_IRQHandler+0x30c>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2300      	movs	r3, #0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00d      	beq.n	8003554 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	2201      	movs	r2, #1
 8003542:	409a      	lsls	r2, r3
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800354c:	f043 0202 	orr.w	r2, r3, #2
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	2204      	movs	r2, #4
 800355e:	409a      	lsls	r2, r3
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 808f 	beq.w	8003688 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a2c      	ldr	r2, [pc, #176]	@ (8003620 <HAL_DMA_IRQHandler+0x3f8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d04a      	beq.n	800360a <HAL_DMA_IRQHandler+0x3e2>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a2a      	ldr	r2, [pc, #168]	@ (8003624 <HAL_DMA_IRQHandler+0x3fc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d045      	beq.n	800360a <HAL_DMA_IRQHandler+0x3e2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a29      	ldr	r2, [pc, #164]	@ (8003628 <HAL_DMA_IRQHandler+0x400>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d040      	beq.n	800360a <HAL_DMA_IRQHandler+0x3e2>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a27      	ldr	r2, [pc, #156]	@ (800362c <HAL_DMA_IRQHandler+0x404>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d03b      	beq.n	800360a <HAL_DMA_IRQHandler+0x3e2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a26      	ldr	r2, [pc, #152]	@ (8003630 <HAL_DMA_IRQHandler+0x408>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d036      	beq.n	800360a <HAL_DMA_IRQHandler+0x3e2>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a24      	ldr	r2, [pc, #144]	@ (8003634 <HAL_DMA_IRQHandler+0x40c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d031      	beq.n	800360a <HAL_DMA_IRQHandler+0x3e2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a23      	ldr	r2, [pc, #140]	@ (8003638 <HAL_DMA_IRQHandler+0x410>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d02c      	beq.n	800360a <HAL_DMA_IRQHandler+0x3e2>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a21      	ldr	r2, [pc, #132]	@ (800363c <HAL_DMA_IRQHandler+0x414>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d027      	beq.n	800360a <HAL_DMA_IRQHandler+0x3e2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a20      	ldr	r2, [pc, #128]	@ (8003640 <HAL_DMA_IRQHandler+0x418>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d022      	beq.n	800360a <HAL_DMA_IRQHandler+0x3e2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003644 <HAL_DMA_IRQHandler+0x41c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01d      	beq.n	800360a <HAL_DMA_IRQHandler+0x3e2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003648 <HAL_DMA_IRQHandler+0x420>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d018      	beq.n	800360a <HAL_DMA_IRQHandler+0x3e2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1b      	ldr	r2, [pc, #108]	@ (800364c <HAL_DMA_IRQHandler+0x424>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_DMA_IRQHandler+0x3e2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003650 <HAL_DMA_IRQHandler+0x428>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00e      	beq.n	800360a <HAL_DMA_IRQHandler+0x3e2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a18      	ldr	r2, [pc, #96]	@ (8003654 <HAL_DMA_IRQHandler+0x42c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_DMA_IRQHandler+0x3e2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a17      	ldr	r2, [pc, #92]	@ (8003658 <HAL_DMA_IRQHandler+0x430>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_DMA_IRQHandler+0x3e2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a15      	ldr	r2, [pc, #84]	@ (800365c <HAL_DMA_IRQHandler+0x434>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d12a      	bne.n	8003660 <HAL_DMA_IRQHandler+0x438>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e023      	b.n	8003668 <HAL_DMA_IRQHandler+0x440>
 8003620:	40020010 	.word	0x40020010
 8003624:	40020028 	.word	0x40020028
 8003628:	40020040 	.word	0x40020040
 800362c:	40020058 	.word	0x40020058
 8003630:	40020070 	.word	0x40020070
 8003634:	40020088 	.word	0x40020088
 8003638:	400200a0 	.word	0x400200a0
 800363c:	400200b8 	.word	0x400200b8
 8003640:	40020410 	.word	0x40020410
 8003644:	40020428 	.word	0x40020428
 8003648:	40020440 	.word	0x40020440
 800364c:	40020458 	.word	0x40020458
 8003650:	40020470 	.word	0x40020470
 8003654:	40020488 	.word	0x40020488
 8003658:	400204a0 	.word	0x400204a0
 800365c:	400204b8 	.word	0x400204b8
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2300      	movs	r3, #0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00d      	beq.n	8003688 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	2204      	movs	r2, #4
 8003676:	409a      	lsls	r2, r3
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003680:	f043 0204 	orr.w	r2, r3, #4
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	2210      	movs	r2, #16
 8003692:	409a      	lsls	r2, r3
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80a6 	beq.w	80037ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a85      	ldr	r2, [pc, #532]	@ (80038b8 <HAL_DMA_IRQHandler+0x690>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d04a      	beq.n	800373e <HAL_DMA_IRQHandler+0x516>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a83      	ldr	r2, [pc, #524]	@ (80038bc <HAL_DMA_IRQHandler+0x694>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d045      	beq.n	800373e <HAL_DMA_IRQHandler+0x516>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a82      	ldr	r2, [pc, #520]	@ (80038c0 <HAL_DMA_IRQHandler+0x698>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d040      	beq.n	800373e <HAL_DMA_IRQHandler+0x516>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a80      	ldr	r2, [pc, #512]	@ (80038c4 <HAL_DMA_IRQHandler+0x69c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d03b      	beq.n	800373e <HAL_DMA_IRQHandler+0x516>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a7f      	ldr	r2, [pc, #508]	@ (80038c8 <HAL_DMA_IRQHandler+0x6a0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d036      	beq.n	800373e <HAL_DMA_IRQHandler+0x516>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a7d      	ldr	r2, [pc, #500]	@ (80038cc <HAL_DMA_IRQHandler+0x6a4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d031      	beq.n	800373e <HAL_DMA_IRQHandler+0x516>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a7c      	ldr	r2, [pc, #496]	@ (80038d0 <HAL_DMA_IRQHandler+0x6a8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d02c      	beq.n	800373e <HAL_DMA_IRQHandler+0x516>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a7a      	ldr	r2, [pc, #488]	@ (80038d4 <HAL_DMA_IRQHandler+0x6ac>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d027      	beq.n	800373e <HAL_DMA_IRQHandler+0x516>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a79      	ldr	r2, [pc, #484]	@ (80038d8 <HAL_DMA_IRQHandler+0x6b0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d022      	beq.n	800373e <HAL_DMA_IRQHandler+0x516>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a77      	ldr	r2, [pc, #476]	@ (80038dc <HAL_DMA_IRQHandler+0x6b4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d01d      	beq.n	800373e <HAL_DMA_IRQHandler+0x516>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a76      	ldr	r2, [pc, #472]	@ (80038e0 <HAL_DMA_IRQHandler+0x6b8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d018      	beq.n	800373e <HAL_DMA_IRQHandler+0x516>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a74      	ldr	r2, [pc, #464]	@ (80038e4 <HAL_DMA_IRQHandler+0x6bc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <HAL_DMA_IRQHandler+0x516>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a73      	ldr	r2, [pc, #460]	@ (80038e8 <HAL_DMA_IRQHandler+0x6c0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00e      	beq.n	800373e <HAL_DMA_IRQHandler+0x516>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a71      	ldr	r2, [pc, #452]	@ (80038ec <HAL_DMA_IRQHandler+0x6c4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d009      	beq.n	800373e <HAL_DMA_IRQHandler+0x516>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a70      	ldr	r2, [pc, #448]	@ (80038f0 <HAL_DMA_IRQHandler+0x6c8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d004      	beq.n	800373e <HAL_DMA_IRQHandler+0x516>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a6e      	ldr	r2, [pc, #440]	@ (80038f4 <HAL_DMA_IRQHandler+0x6cc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d10a      	bne.n	8003754 <HAL_DMA_IRQHandler+0x52c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	bf14      	ite	ne
 800374c:	2301      	movne	r3, #1
 800374e:	2300      	moveq	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	e009      	b.n	8003768 <HAL_DMA_IRQHandler+0x540>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	bf14      	ite	ne
 8003762:	2301      	movne	r3, #1
 8003764:	2300      	moveq	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d03e      	beq.n	80037ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2210      	movs	r2, #16
 8003776:	409a      	lsls	r2, r3
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d018      	beq.n	80037bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d108      	bne.n	80037aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d024      	beq.n	80037ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	4798      	blx	r3
 80037a8:	e01f      	b.n	80037ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d01b      	beq.n	80037ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	4798      	blx	r3
 80037ba:	e016      	b.n	80037ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d107      	bne.n	80037da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0208 	bic.w	r2, r2, #8
 80037d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2220      	movs	r2, #32
 80037f4:	409a      	lsls	r2, r3
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8110 	beq.w	8003a20 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a2c      	ldr	r2, [pc, #176]	@ (80038b8 <HAL_DMA_IRQHandler+0x690>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d04a      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x678>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a2b      	ldr	r2, [pc, #172]	@ (80038bc <HAL_DMA_IRQHandler+0x694>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d045      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x678>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a29      	ldr	r2, [pc, #164]	@ (80038c0 <HAL_DMA_IRQHandler+0x698>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d040      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x678>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a28      	ldr	r2, [pc, #160]	@ (80038c4 <HAL_DMA_IRQHandler+0x69c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d03b      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x678>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a26      	ldr	r2, [pc, #152]	@ (80038c8 <HAL_DMA_IRQHandler+0x6a0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d036      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x678>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a25      	ldr	r2, [pc, #148]	@ (80038cc <HAL_DMA_IRQHandler+0x6a4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d031      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x678>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a23      	ldr	r2, [pc, #140]	@ (80038d0 <HAL_DMA_IRQHandler+0x6a8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d02c      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x678>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a22      	ldr	r2, [pc, #136]	@ (80038d4 <HAL_DMA_IRQHandler+0x6ac>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d027      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x678>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a20      	ldr	r2, [pc, #128]	@ (80038d8 <HAL_DMA_IRQHandler+0x6b0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d022      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x678>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1f      	ldr	r2, [pc, #124]	@ (80038dc <HAL_DMA_IRQHandler+0x6b4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d01d      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x678>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1d      	ldr	r2, [pc, #116]	@ (80038e0 <HAL_DMA_IRQHandler+0x6b8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d018      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x678>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1c      	ldr	r2, [pc, #112]	@ (80038e4 <HAL_DMA_IRQHandler+0x6bc>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x678>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1a      	ldr	r2, [pc, #104]	@ (80038e8 <HAL_DMA_IRQHandler+0x6c0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00e      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x678>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a19      	ldr	r2, [pc, #100]	@ (80038ec <HAL_DMA_IRQHandler+0x6c4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d009      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x678>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a17      	ldr	r2, [pc, #92]	@ (80038f0 <HAL_DMA_IRQHandler+0x6c8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x678>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a16      	ldr	r2, [pc, #88]	@ (80038f4 <HAL_DMA_IRQHandler+0x6cc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d12b      	bne.n	80038f8 <HAL_DMA_IRQHandler+0x6d0>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bf14      	ite	ne
 80038ae:	2301      	movne	r3, #1
 80038b0:	2300      	moveq	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	e02a      	b.n	800390c <HAL_DMA_IRQHandler+0x6e4>
 80038b6:	bf00      	nop
 80038b8:	40020010 	.word	0x40020010
 80038bc:	40020028 	.word	0x40020028
 80038c0:	40020040 	.word	0x40020040
 80038c4:	40020058 	.word	0x40020058
 80038c8:	40020070 	.word	0x40020070
 80038cc:	40020088 	.word	0x40020088
 80038d0:	400200a0 	.word	0x400200a0
 80038d4:	400200b8 	.word	0x400200b8
 80038d8:	40020410 	.word	0x40020410
 80038dc:	40020428 	.word	0x40020428
 80038e0:	40020440 	.word	0x40020440
 80038e4:	40020458 	.word	0x40020458
 80038e8:	40020470 	.word	0x40020470
 80038ec:	40020488 	.word	0x40020488
 80038f0:	400204a0 	.word	0x400204a0
 80038f4:	400204b8 	.word	0x400204b8
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf14      	ite	ne
 8003906:	2301      	movne	r3, #1
 8003908:	2300      	moveq	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 8087 	beq.w	8003a20 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	2220      	movs	r2, #32
 800391c:	409a      	lsls	r2, r3
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b04      	cmp	r3, #4
 800392c:	d139      	bne.n	80039a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0216 	bic.w	r2, r2, #22
 800393c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695a      	ldr	r2, [r3, #20]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800394c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	d103      	bne.n	800395e <HAL_DMA_IRQHandler+0x736>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0208 	bic.w	r2, r2, #8
 800396c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	223f      	movs	r2, #63	@ 0x3f
 8003978:	409a      	lsls	r2, r3
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 834a 	beq.w	800402c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
          }
          return;
 80039a0:	e344      	b.n	800402c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d018      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d108      	bne.n	80039d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d02c      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4798      	blx	r3
 80039ce:	e027      	b.n	8003a20 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d023      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	4798      	blx	r3
 80039e0:	e01e      	b.n	8003a20 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10f      	bne.n	8003a10 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0210 	bic.w	r2, r2, #16
 80039fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8306 	beq.w	8004036 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8088 	beq.w	8003b48 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a7a      	ldr	r2, [pc, #488]	@ (8003c30 <HAL_DMA_IRQHandler+0xa08>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d04a      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x8b8>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a79      	ldr	r2, [pc, #484]	@ (8003c34 <HAL_DMA_IRQHandler+0xa0c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d045      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x8b8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a77      	ldr	r2, [pc, #476]	@ (8003c38 <HAL_DMA_IRQHandler+0xa10>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d040      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x8b8>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a76      	ldr	r2, [pc, #472]	@ (8003c3c <HAL_DMA_IRQHandler+0xa14>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d03b      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x8b8>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a74      	ldr	r2, [pc, #464]	@ (8003c40 <HAL_DMA_IRQHandler+0xa18>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d036      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x8b8>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a73      	ldr	r2, [pc, #460]	@ (8003c44 <HAL_DMA_IRQHandler+0xa1c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d031      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x8b8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a71      	ldr	r2, [pc, #452]	@ (8003c48 <HAL_DMA_IRQHandler+0xa20>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02c      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x8b8>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a70      	ldr	r2, [pc, #448]	@ (8003c4c <HAL_DMA_IRQHandler+0xa24>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d027      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x8b8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a6e      	ldr	r2, [pc, #440]	@ (8003c50 <HAL_DMA_IRQHandler+0xa28>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d022      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x8b8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a6d      	ldr	r2, [pc, #436]	@ (8003c54 <HAL_DMA_IRQHandler+0xa2c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d01d      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x8b8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a6b      	ldr	r2, [pc, #428]	@ (8003c58 <HAL_DMA_IRQHandler+0xa30>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d018      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x8b8>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a6a      	ldr	r2, [pc, #424]	@ (8003c5c <HAL_DMA_IRQHandler+0xa34>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x8b8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a68      	ldr	r2, [pc, #416]	@ (8003c60 <HAL_DMA_IRQHandler+0xa38>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x8b8>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a67      	ldr	r2, [pc, #412]	@ (8003c64 <HAL_DMA_IRQHandler+0xa3c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d009      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x8b8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a65      	ldr	r2, [pc, #404]	@ (8003c68 <HAL_DMA_IRQHandler+0xa40>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x8b8>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a64      	ldr	r2, [pc, #400]	@ (8003c6c <HAL_DMA_IRQHandler+0xa44>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d108      	bne.n	8003af2 <HAL_DMA_IRQHandler+0x8ca>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e007      	b.n	8003b02 <HAL_DMA_IRQHandler+0x8da>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0201 	bic.w	r2, r2, #1
 8003b00:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3301      	adds	r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d307      	bcc.n	8003b1e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f2      	bne.n	8003b02 <HAL_DMA_IRQHandler+0x8da>
 8003b1c:	e000      	b.n	8003b20 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003b1e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d004      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2203      	movs	r2, #3
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003b36:	e003      	b.n	8003b40 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8272 	beq.w	8004036 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
 8003b5a:	e26c      	b.n	8004036 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a43      	ldr	r2, [pc, #268]	@ (8003c70 <HAL_DMA_IRQHandler+0xa48>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d022      	beq.n	8003bac <HAL_DMA_IRQHandler+0x984>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a42      	ldr	r2, [pc, #264]	@ (8003c74 <HAL_DMA_IRQHandler+0xa4c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d01d      	beq.n	8003bac <HAL_DMA_IRQHandler+0x984>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a40      	ldr	r2, [pc, #256]	@ (8003c78 <HAL_DMA_IRQHandler+0xa50>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d018      	beq.n	8003bac <HAL_DMA_IRQHandler+0x984>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a3f      	ldr	r2, [pc, #252]	@ (8003c7c <HAL_DMA_IRQHandler+0xa54>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d013      	beq.n	8003bac <HAL_DMA_IRQHandler+0x984>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a3d      	ldr	r2, [pc, #244]	@ (8003c80 <HAL_DMA_IRQHandler+0xa58>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00e      	beq.n	8003bac <HAL_DMA_IRQHandler+0x984>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a3c      	ldr	r2, [pc, #240]	@ (8003c84 <HAL_DMA_IRQHandler+0xa5c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d009      	beq.n	8003bac <HAL_DMA_IRQHandler+0x984>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a3a      	ldr	r2, [pc, #232]	@ (8003c88 <HAL_DMA_IRQHandler+0xa60>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <HAL_DMA_IRQHandler+0x984>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a39      	ldr	r2, [pc, #228]	@ (8003c8c <HAL_DMA_IRQHandler+0xa64>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d101      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0x988>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <HAL_DMA_IRQHandler+0x98a>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 823f 	beq.w	8004036 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2204      	movs	r2, #4
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80cd 	beq.w	8003d70 <HAL_DMA_IRQHandler+0xb48>
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80c7 	beq.w	8003d70 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	2204      	movs	r2, #4
 8003bec:	409a      	lsls	r2, r3
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d049      	beq.n	8003c90 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8210 	beq.w	8004030 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c18:	e20a      	b.n	8004030 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 8206 	beq.w	8004030 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c2c:	e200      	b.n	8004030 <HAL_DMA_IRQHandler+0xe08>
 8003c2e:	bf00      	nop
 8003c30:	40020010 	.word	0x40020010
 8003c34:	40020028 	.word	0x40020028
 8003c38:	40020040 	.word	0x40020040
 8003c3c:	40020058 	.word	0x40020058
 8003c40:	40020070 	.word	0x40020070
 8003c44:	40020088 	.word	0x40020088
 8003c48:	400200a0 	.word	0x400200a0
 8003c4c:	400200b8 	.word	0x400200b8
 8003c50:	40020410 	.word	0x40020410
 8003c54:	40020428 	.word	0x40020428
 8003c58:	40020440 	.word	0x40020440
 8003c5c:	40020458 	.word	0x40020458
 8003c60:	40020470 	.word	0x40020470
 8003c64:	40020488 	.word	0x40020488
 8003c68:	400204a0 	.word	0x400204a0
 8003c6c:	400204b8 	.word	0x400204b8
 8003c70:	58025408 	.word	0x58025408
 8003c74:	5802541c 	.word	0x5802541c
 8003c78:	58025430 	.word	0x58025430
 8003c7c:	58025444 	.word	0x58025444
 8003c80:	58025458 	.word	0x58025458
 8003c84:	5802546c 	.word	0x5802546c
 8003c88:	58025480 	.word	0x58025480
 8003c8c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d160      	bne.n	8003d5c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a7f      	ldr	r2, [pc, #508]	@ (8003e9c <HAL_DMA_IRQHandler+0xc74>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d04a      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xb12>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a7d      	ldr	r2, [pc, #500]	@ (8003ea0 <HAL_DMA_IRQHandler+0xc78>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d045      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xb12>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ea4 <HAL_DMA_IRQHandler+0xc7c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d040      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xb12>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a7a      	ldr	r2, [pc, #488]	@ (8003ea8 <HAL_DMA_IRQHandler+0xc80>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d03b      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xb12>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a79      	ldr	r2, [pc, #484]	@ (8003eac <HAL_DMA_IRQHandler+0xc84>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d036      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xb12>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a77      	ldr	r2, [pc, #476]	@ (8003eb0 <HAL_DMA_IRQHandler+0xc88>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d031      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xb12>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a76      	ldr	r2, [pc, #472]	@ (8003eb4 <HAL_DMA_IRQHandler+0xc8c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d02c      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xb12>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a74      	ldr	r2, [pc, #464]	@ (8003eb8 <HAL_DMA_IRQHandler+0xc90>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d027      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xb12>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a73      	ldr	r2, [pc, #460]	@ (8003ebc <HAL_DMA_IRQHandler+0xc94>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d022      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xb12>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a71      	ldr	r2, [pc, #452]	@ (8003ec0 <HAL_DMA_IRQHandler+0xc98>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d01d      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xb12>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a70      	ldr	r2, [pc, #448]	@ (8003ec4 <HAL_DMA_IRQHandler+0xc9c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d018      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xb12>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a6e      	ldr	r2, [pc, #440]	@ (8003ec8 <HAL_DMA_IRQHandler+0xca0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xb12>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a6d      	ldr	r2, [pc, #436]	@ (8003ecc <HAL_DMA_IRQHandler+0xca4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00e      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xb12>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a6b      	ldr	r2, [pc, #428]	@ (8003ed0 <HAL_DMA_IRQHandler+0xca8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d009      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xb12>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a6a      	ldr	r2, [pc, #424]	@ (8003ed4 <HAL_DMA_IRQHandler+0xcac>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d004      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xb12>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a68      	ldr	r2, [pc, #416]	@ (8003ed8 <HAL_DMA_IRQHandler+0xcb0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d108      	bne.n	8003d4c <HAL_DMA_IRQHandler+0xb24>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0208 	bic.w	r2, r2, #8
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	e007      	b.n	8003d5c <HAL_DMA_IRQHandler+0xb34>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0204 	bic.w	r2, r2, #4
 8003d5a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8165 	beq.w	8004030 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d6e:	e15f      	b.n	8004030 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	2202      	movs	r2, #2
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80c5 	beq.w	8003f10 <HAL_DMA_IRQHandler+0xce8>
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 80bf 	beq.w	8003f10 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d96:	f003 031f 	and.w	r3, r3, #31
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d018      	beq.n	8003dde <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 813a 	beq.w	8004034 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dc8:	e134      	b.n	8004034 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8130 	beq.w	8004034 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ddc:	e12a      	b.n	8004034 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f040 8089 	bne.w	8003efc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a2b      	ldr	r2, [pc, #172]	@ (8003e9c <HAL_DMA_IRQHandler+0xc74>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d04a      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xc62>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a29      	ldr	r2, [pc, #164]	@ (8003ea0 <HAL_DMA_IRQHandler+0xc78>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d045      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xc62>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a28      	ldr	r2, [pc, #160]	@ (8003ea4 <HAL_DMA_IRQHandler+0xc7c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d040      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xc62>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a26      	ldr	r2, [pc, #152]	@ (8003ea8 <HAL_DMA_IRQHandler+0xc80>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d03b      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xc62>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a25      	ldr	r2, [pc, #148]	@ (8003eac <HAL_DMA_IRQHandler+0xc84>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d036      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xc62>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a23      	ldr	r2, [pc, #140]	@ (8003eb0 <HAL_DMA_IRQHandler+0xc88>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d031      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xc62>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a22      	ldr	r2, [pc, #136]	@ (8003eb4 <HAL_DMA_IRQHandler+0xc8c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d02c      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xc62>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a20      	ldr	r2, [pc, #128]	@ (8003eb8 <HAL_DMA_IRQHandler+0xc90>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d027      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xc62>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ebc <HAL_DMA_IRQHandler+0xc94>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d022      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xc62>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec0 <HAL_DMA_IRQHandler+0xc98>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01d      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xc62>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1c      	ldr	r2, [pc, #112]	@ (8003ec4 <HAL_DMA_IRQHandler+0xc9c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d018      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xc62>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ec8 <HAL_DMA_IRQHandler+0xca0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xc62>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a19      	ldr	r2, [pc, #100]	@ (8003ecc <HAL_DMA_IRQHandler+0xca4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00e      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xc62>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a17      	ldr	r2, [pc, #92]	@ (8003ed0 <HAL_DMA_IRQHandler+0xca8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d009      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xc62>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a16      	ldr	r2, [pc, #88]	@ (8003ed4 <HAL_DMA_IRQHandler+0xcac>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xc62>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a14      	ldr	r2, [pc, #80]	@ (8003ed8 <HAL_DMA_IRQHandler+0xcb0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d128      	bne.n	8003edc <HAL_DMA_IRQHandler+0xcb4>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0214 	bic.w	r2, r2, #20
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	e027      	b.n	8003eec <HAL_DMA_IRQHandler+0xcc4>
 8003e9c:	40020010 	.word	0x40020010
 8003ea0:	40020028 	.word	0x40020028
 8003ea4:	40020040 	.word	0x40020040
 8003ea8:	40020058 	.word	0x40020058
 8003eac:	40020070 	.word	0x40020070
 8003eb0:	40020088 	.word	0x40020088
 8003eb4:	400200a0 	.word	0x400200a0
 8003eb8:	400200b8 	.word	0x400200b8
 8003ebc:	40020410 	.word	0x40020410
 8003ec0:	40020428 	.word	0x40020428
 8003ec4:	40020440 	.word	0x40020440
 8003ec8:	40020458 	.word	0x40020458
 8003ecc:	40020470 	.word	0x40020470
 8003ed0:	40020488 	.word	0x40020488
 8003ed4:	400204a0 	.word	0x400204a0
 8003ed8:	400204b8 	.word	0x400204b8
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 020a 	bic.w	r2, r2, #10
 8003eea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 8097 	beq.w	8004034 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f0e:	e091      	b.n	8004034 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	2208      	movs	r2, #8
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8088 	beq.w	8004036 <HAL_DMA_IRQHandler+0xe0e>
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 8082 	beq.w	8004036 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a41      	ldr	r2, [pc, #260]	@ (800403c <HAL_DMA_IRQHandler+0xe14>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d04a      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xdaa>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a3f      	ldr	r2, [pc, #252]	@ (8004040 <HAL_DMA_IRQHandler+0xe18>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d045      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xdaa>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a3e      	ldr	r2, [pc, #248]	@ (8004044 <HAL_DMA_IRQHandler+0xe1c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d040      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xdaa>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a3c      	ldr	r2, [pc, #240]	@ (8004048 <HAL_DMA_IRQHandler+0xe20>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d03b      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xdaa>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a3b      	ldr	r2, [pc, #236]	@ (800404c <HAL_DMA_IRQHandler+0xe24>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d036      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xdaa>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a39      	ldr	r2, [pc, #228]	@ (8004050 <HAL_DMA_IRQHandler+0xe28>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d031      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xdaa>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a38      	ldr	r2, [pc, #224]	@ (8004054 <HAL_DMA_IRQHandler+0xe2c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d02c      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xdaa>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a36      	ldr	r2, [pc, #216]	@ (8004058 <HAL_DMA_IRQHandler+0xe30>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d027      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xdaa>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a35      	ldr	r2, [pc, #212]	@ (800405c <HAL_DMA_IRQHandler+0xe34>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d022      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xdaa>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a33      	ldr	r2, [pc, #204]	@ (8004060 <HAL_DMA_IRQHandler+0xe38>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d01d      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xdaa>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a32      	ldr	r2, [pc, #200]	@ (8004064 <HAL_DMA_IRQHandler+0xe3c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d018      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xdaa>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a30      	ldr	r2, [pc, #192]	@ (8004068 <HAL_DMA_IRQHandler+0xe40>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xdaa>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2f      	ldr	r2, [pc, #188]	@ (800406c <HAL_DMA_IRQHandler+0xe44>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00e      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xdaa>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8004070 <HAL_DMA_IRQHandler+0xe48>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xdaa>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8004074 <HAL_DMA_IRQHandler+0xe4c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xdaa>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8004078 <HAL_DMA_IRQHandler+0xe50>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d108      	bne.n	8003fe4 <HAL_DMA_IRQHandler+0xdbc>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 021c 	bic.w	r2, r2, #28
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e007      	b.n	8003ff4 <HAL_DMA_IRQHandler+0xdcc>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 020e 	bic.w	r2, r2, #14
 8003ff2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	409a      	lsls	r2, r3
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	4798      	blx	r3
 800402a:	e004      	b.n	8004036 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800402c:	bf00      	nop
 800402e:	e002      	b.n	8004036 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004030:	bf00      	nop
 8004032:	e000      	b.n	8004036 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004034:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004036:	3728      	adds	r7, #40	@ 0x28
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40020010 	.word	0x40020010
 8004040:	40020028 	.word	0x40020028
 8004044:	40020040 	.word	0x40020040
 8004048:	40020058 	.word	0x40020058
 800404c:	40020070 	.word	0x40020070
 8004050:	40020088 	.word	0x40020088
 8004054:	400200a0 	.word	0x400200a0
 8004058:	400200b8 	.word	0x400200b8
 800405c:	40020410 	.word	0x40020410
 8004060:	40020428 	.word	0x40020428
 8004064:	40020440 	.word	0x40020440
 8004068:	40020458 	.word	0x40020458
 800406c:	40020470 	.word	0x40020470
 8004070:	40020488 	.word	0x40020488
 8004074:	400204a0 	.word	0x400204a0
 8004078:	400204b8 	.word	0x400204b8

0800407c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a42      	ldr	r2, [pc, #264]	@ (8004194 <DMA_CalcBaseAndBitshift+0x118>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d04a      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a41      	ldr	r2, [pc, #260]	@ (8004198 <DMA_CalcBaseAndBitshift+0x11c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d045      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a3f      	ldr	r2, [pc, #252]	@ (800419c <DMA_CalcBaseAndBitshift+0x120>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d040      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a3e      	ldr	r2, [pc, #248]	@ (80041a0 <DMA_CalcBaseAndBitshift+0x124>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d03b      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a3c      	ldr	r2, [pc, #240]	@ (80041a4 <DMA_CalcBaseAndBitshift+0x128>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d036      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a3b      	ldr	r2, [pc, #236]	@ (80041a8 <DMA_CalcBaseAndBitshift+0x12c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d031      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a39      	ldr	r2, [pc, #228]	@ (80041ac <DMA_CalcBaseAndBitshift+0x130>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d02c      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a38      	ldr	r2, [pc, #224]	@ (80041b0 <DMA_CalcBaseAndBitshift+0x134>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d027      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a36      	ldr	r2, [pc, #216]	@ (80041b4 <DMA_CalcBaseAndBitshift+0x138>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d022      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a35      	ldr	r2, [pc, #212]	@ (80041b8 <DMA_CalcBaseAndBitshift+0x13c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d01d      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a33      	ldr	r2, [pc, #204]	@ (80041bc <DMA_CalcBaseAndBitshift+0x140>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d018      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a32      	ldr	r2, [pc, #200]	@ (80041c0 <DMA_CalcBaseAndBitshift+0x144>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a30      	ldr	r2, [pc, #192]	@ (80041c4 <DMA_CalcBaseAndBitshift+0x148>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00e      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2f      	ldr	r2, [pc, #188]	@ (80041c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d009      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a2d      	ldr	r2, [pc, #180]	@ (80041cc <DMA_CalcBaseAndBitshift+0x150>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2c      	ldr	r2, [pc, #176]	@ (80041d0 <DMA_CalcBaseAndBitshift+0x154>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d101      	bne.n	8004128 <DMA_CalcBaseAndBitshift+0xac>
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <DMA_CalcBaseAndBitshift+0xae>
 8004128:	2300      	movs	r3, #0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d024      	beq.n	8004178 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	3b10      	subs	r3, #16
 8004136:	4a27      	ldr	r2, [pc, #156]	@ (80041d4 <DMA_CalcBaseAndBitshift+0x158>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	4a24      	ldr	r2, [pc, #144]	@ (80041d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004148:	5cd3      	ldrb	r3, [r2, r3]
 800414a:	461a      	mov	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d908      	bls.n	8004168 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	4b1f      	ldr	r3, [pc, #124]	@ (80041dc <DMA_CalcBaseAndBitshift+0x160>)
 800415e:	4013      	ands	r3, r2
 8004160:	1d1a      	adds	r2, r3, #4
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	659a      	str	r2, [r3, #88]	@ 0x58
 8004166:	e00d      	b.n	8004184 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	4b1b      	ldr	r3, [pc, #108]	@ (80041dc <DMA_CalcBaseAndBitshift+0x160>)
 8004170:	4013      	ands	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6593      	str	r3, [r2, #88]	@ 0x58
 8004176:	e005      	b.n	8004184 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40020010 	.word	0x40020010
 8004198:	40020028 	.word	0x40020028
 800419c:	40020040 	.word	0x40020040
 80041a0:	40020058 	.word	0x40020058
 80041a4:	40020070 	.word	0x40020070
 80041a8:	40020088 	.word	0x40020088
 80041ac:	400200a0 	.word	0x400200a0
 80041b0:	400200b8 	.word	0x400200b8
 80041b4:	40020410 	.word	0x40020410
 80041b8:	40020428 	.word	0x40020428
 80041bc:	40020440 	.word	0x40020440
 80041c0:	40020458 	.word	0x40020458
 80041c4:	40020470 	.word	0x40020470
 80041c8:	40020488 	.word	0x40020488
 80041cc:	400204a0 	.word	0x400204a0
 80041d0:	400204b8 	.word	0x400204b8
 80041d4:	aaaaaaab 	.word	0xaaaaaaab
 80041d8:	0800ae04 	.word	0x0800ae04
 80041dc:	fffffc00 	.word	0xfffffc00

080041e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d120      	bne.n	8004236 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d858      	bhi.n	80042ae <DMA_CheckFifoParam+0xce>
 80041fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004204 <DMA_CheckFifoParam+0x24>)
 80041fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004202:	bf00      	nop
 8004204:	08004215 	.word	0x08004215
 8004208:	08004227 	.word	0x08004227
 800420c:	08004215 	.word	0x08004215
 8004210:	080042af 	.word	0x080042af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d048      	beq.n	80042b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004224:	e045      	b.n	80042b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800422e:	d142      	bne.n	80042b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004234:	e03f      	b.n	80042b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800423e:	d123      	bne.n	8004288 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004244:	2b03      	cmp	r3, #3
 8004246:	d838      	bhi.n	80042ba <DMA_CheckFifoParam+0xda>
 8004248:	a201      	add	r2, pc, #4	@ (adr r2, 8004250 <DMA_CheckFifoParam+0x70>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	08004261 	.word	0x08004261
 8004254:	08004267 	.word	0x08004267
 8004258:	08004261 	.word	0x08004261
 800425c:	08004279 	.word	0x08004279
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
        break;
 8004264:	e030      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d025      	beq.n	80042be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004276:	e022      	b.n	80042be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004280:	d11f      	bne.n	80042c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004286:	e01c      	b.n	80042c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	2b02      	cmp	r3, #2
 800428e:	d902      	bls.n	8004296 <DMA_CheckFifoParam+0xb6>
 8004290:	2b03      	cmp	r3, #3
 8004292:	d003      	beq.n	800429c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004294:	e018      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
        break;
 800429a:	e015      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00e      	beq.n	80042c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
    break;
 80042ac:	e00b      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
        break;
 80042ae:	bf00      	nop
 80042b0:	e00a      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>
        break;
 80042b2:	bf00      	nop
 80042b4:	e008      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>
        break;
 80042b6:	bf00      	nop
 80042b8:	e006      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>
        break;
 80042ba:	bf00      	nop
 80042bc:	e004      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>
        break;
 80042be:	bf00      	nop
 80042c0:	e002      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>
        break;
 80042c2:	bf00      	nop
 80042c4:	e000      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>
    break;
 80042c6:	bf00      	nop
    }
  }

  return status;
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop

080042d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a38      	ldr	r2, [pc, #224]	@ (80043cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d022      	beq.n	8004336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a36      	ldr	r2, [pc, #216]	@ (80043d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d01d      	beq.n	8004336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a35      	ldr	r2, [pc, #212]	@ (80043d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d018      	beq.n	8004336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a33      	ldr	r2, [pc, #204]	@ (80043d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a32      	ldr	r2, [pc, #200]	@ (80043dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00e      	beq.n	8004336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a30      	ldr	r2, [pc, #192]	@ (80043e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d009      	beq.n	8004336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2f      	ldr	r2, [pc, #188]	@ (80043e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a2d      	ldr	r2, [pc, #180]	@ (80043e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d101      	bne.n	800433a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800433a:	2300      	movs	r3, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01a      	beq.n	8004376 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	3b08      	subs	r3, #8
 8004348:	4a28      	ldr	r2, [pc, #160]	@ (80043ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	091b      	lsrs	r3, r3, #4
 8004350:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4b26      	ldr	r3, [pc, #152]	@ (80043f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	461a      	mov	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a24      	ldr	r2, [pc, #144]	@ (80043f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004364:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	2201      	movs	r2, #1
 800436e:	409a      	lsls	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004374:	e024      	b.n	80043c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	3b10      	subs	r3, #16
 800437e:	4a1e      	ldr	r2, [pc, #120]	@ (80043f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4a1c      	ldr	r2, [pc, #112]	@ (80043fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d806      	bhi.n	800439e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4a1b      	ldr	r2, [pc, #108]	@ (8004400 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d902      	bls.n	800439e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3308      	adds	r3, #8
 800439c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4b18      	ldr	r3, [pc, #96]	@ (8004404 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	461a      	mov	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a16      	ldr	r2, [pc, #88]	@ (8004408 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80043b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	2201      	movs	r2, #1
 80043ba:	409a      	lsls	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	58025408 	.word	0x58025408
 80043d0:	5802541c 	.word	0x5802541c
 80043d4:	58025430 	.word	0x58025430
 80043d8:	58025444 	.word	0x58025444
 80043dc:	58025458 	.word	0x58025458
 80043e0:	5802546c 	.word	0x5802546c
 80043e4:	58025480 	.word	0x58025480
 80043e8:	58025494 	.word	0x58025494
 80043ec:	cccccccd 	.word	0xcccccccd
 80043f0:	16009600 	.word	0x16009600
 80043f4:	58025880 	.word	0x58025880
 80043f8:	aaaaaaab 	.word	0xaaaaaaab
 80043fc:	400204b8 	.word	0x400204b8
 8004400:	4002040f 	.word	0x4002040f
 8004404:	10008200 	.word	0x10008200
 8004408:	40020880 	.word	0x40020880

0800440c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d04a      	beq.n	80044b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d847      	bhi.n	80044b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a25      	ldr	r2, [pc, #148]	@ (80044c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d022      	beq.n	8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a24      	ldr	r2, [pc, #144]	@ (80044c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d01d      	beq.n	8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a22      	ldr	r2, [pc, #136]	@ (80044cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d018      	beq.n	8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a21      	ldr	r2, [pc, #132]	@ (80044d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d013      	beq.n	8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1f      	ldr	r2, [pc, #124]	@ (80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00e      	beq.n	8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1e      	ldr	r2, [pc, #120]	@ (80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d009      	beq.n	8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1c      	ldr	r2, [pc, #112]	@ (80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1b      	ldr	r2, [pc, #108]	@ (80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d101      	bne.n	800447c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800447c:	2300      	movs	r3, #0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4b17      	ldr	r3, [pc, #92]	@ (80044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	461a      	mov	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a15      	ldr	r2, [pc, #84]	@ (80044e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004494:	671a      	str	r2, [r3, #112]	@ 0x70
 8004496:	e009      	b.n	80044ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4b14      	ldr	r3, [pc, #80]	@ (80044ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	461a      	mov	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a11      	ldr	r2, [pc, #68]	@ (80044f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80044aa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	2201      	movs	r2, #1
 80044b2:	409a      	lsls	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80044b8:	bf00      	nop
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	58025408 	.word	0x58025408
 80044c8:	5802541c 	.word	0x5802541c
 80044cc:	58025430 	.word	0x58025430
 80044d0:	58025444 	.word	0x58025444
 80044d4:	58025458 	.word	0x58025458
 80044d8:	5802546c 	.word	0x5802546c
 80044dc:	58025480 	.word	0x58025480
 80044e0:	58025494 	.word	0x58025494
 80044e4:	1600963f 	.word	0x1600963f
 80044e8:	58025940 	.word	0x58025940
 80044ec:	1000823f 	.word	0x1000823f
 80044f0:	40020940 	.word	0x40020940

080044f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	@ 0x24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044fe:	2300      	movs	r3, #0
 8004500:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004502:	4b86      	ldr	r3, [pc, #536]	@ (800471c <HAL_GPIO_Init+0x228>)
 8004504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004506:	e18c      	b.n	8004822 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	2101      	movs	r1, #1
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	fa01 f303 	lsl.w	r3, r1, r3
 8004514:	4013      	ands	r3, r2
 8004516:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 817e 	beq.w	800481c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	2b01      	cmp	r3, #1
 800452a:	d005      	beq.n	8004538 <HAL_GPIO_Init+0x44>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d130      	bne.n	800459a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	2203      	movs	r2, #3
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	43db      	mvns	r3, r3
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4013      	ands	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4313      	orrs	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800456e:	2201      	movs	r2, #1
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43db      	mvns	r3, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4013      	ands	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	091b      	lsrs	r3, r3, #4
 8004584:	f003 0201 	and.w	r2, r3, #1
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4313      	orrs	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d017      	beq.n	80045d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	2203      	movs	r2, #3
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43db      	mvns	r3, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4013      	ands	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d123      	bne.n	800462a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	08da      	lsrs	r2, r3, #3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3208      	adds	r2, #8
 80045ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	220f      	movs	r2, #15
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43db      	mvns	r3, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4013      	ands	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4313      	orrs	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	08da      	lsrs	r2, r3, #3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3208      	adds	r2, #8
 8004624:	69b9      	ldr	r1, [r7, #24]
 8004626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	2203      	movs	r2, #3
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43db      	mvns	r3, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4013      	ands	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f003 0203 	and.w	r2, r3, #3
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 80d8 	beq.w	800481c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800466c:	4b2c      	ldr	r3, [pc, #176]	@ (8004720 <HAL_GPIO_Init+0x22c>)
 800466e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004672:	4a2b      	ldr	r2, [pc, #172]	@ (8004720 <HAL_GPIO_Init+0x22c>)
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800467c:	4b28      	ldr	r3, [pc, #160]	@ (8004720 <HAL_GPIO_Init+0x22c>)
 800467e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800468a:	4a26      	ldr	r2, [pc, #152]	@ (8004724 <HAL_GPIO_Init+0x230>)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	089b      	lsrs	r3, r3, #2
 8004690:	3302      	adds	r3, #2
 8004692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	220f      	movs	r2, #15
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004728 <HAL_GPIO_Init+0x234>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d04a      	beq.n	800474c <HAL_GPIO_Init+0x258>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1c      	ldr	r2, [pc, #112]	@ (800472c <HAL_GPIO_Init+0x238>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d02b      	beq.n	8004716 <HAL_GPIO_Init+0x222>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004730 <HAL_GPIO_Init+0x23c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d025      	beq.n	8004712 <HAL_GPIO_Init+0x21e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004734 <HAL_GPIO_Init+0x240>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01f      	beq.n	800470e <HAL_GPIO_Init+0x21a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a19      	ldr	r2, [pc, #100]	@ (8004738 <HAL_GPIO_Init+0x244>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d019      	beq.n	800470a <HAL_GPIO_Init+0x216>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a18      	ldr	r2, [pc, #96]	@ (800473c <HAL_GPIO_Init+0x248>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_GPIO_Init+0x212>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a17      	ldr	r2, [pc, #92]	@ (8004740 <HAL_GPIO_Init+0x24c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00d      	beq.n	8004702 <HAL_GPIO_Init+0x20e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a16      	ldr	r2, [pc, #88]	@ (8004744 <HAL_GPIO_Init+0x250>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d007      	beq.n	80046fe <HAL_GPIO_Init+0x20a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a15      	ldr	r2, [pc, #84]	@ (8004748 <HAL_GPIO_Init+0x254>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d101      	bne.n	80046fa <HAL_GPIO_Init+0x206>
 80046f6:	2309      	movs	r3, #9
 80046f8:	e029      	b.n	800474e <HAL_GPIO_Init+0x25a>
 80046fa:	230a      	movs	r3, #10
 80046fc:	e027      	b.n	800474e <HAL_GPIO_Init+0x25a>
 80046fe:	2307      	movs	r3, #7
 8004700:	e025      	b.n	800474e <HAL_GPIO_Init+0x25a>
 8004702:	2306      	movs	r3, #6
 8004704:	e023      	b.n	800474e <HAL_GPIO_Init+0x25a>
 8004706:	2305      	movs	r3, #5
 8004708:	e021      	b.n	800474e <HAL_GPIO_Init+0x25a>
 800470a:	2304      	movs	r3, #4
 800470c:	e01f      	b.n	800474e <HAL_GPIO_Init+0x25a>
 800470e:	2303      	movs	r3, #3
 8004710:	e01d      	b.n	800474e <HAL_GPIO_Init+0x25a>
 8004712:	2302      	movs	r3, #2
 8004714:	e01b      	b.n	800474e <HAL_GPIO_Init+0x25a>
 8004716:	2301      	movs	r3, #1
 8004718:	e019      	b.n	800474e <HAL_GPIO_Init+0x25a>
 800471a:	bf00      	nop
 800471c:	58000080 	.word	0x58000080
 8004720:	58024400 	.word	0x58024400
 8004724:	58000400 	.word	0x58000400
 8004728:	58020000 	.word	0x58020000
 800472c:	58020400 	.word	0x58020400
 8004730:	58020800 	.word	0x58020800
 8004734:	58020c00 	.word	0x58020c00
 8004738:	58021000 	.word	0x58021000
 800473c:	58021400 	.word	0x58021400
 8004740:	58021800 	.word	0x58021800
 8004744:	58021c00 	.word	0x58021c00
 8004748:	58022400 	.word	0x58022400
 800474c:	2300      	movs	r3, #0
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	f002 0203 	and.w	r2, r2, #3
 8004754:	0092      	lsls	r2, r2, #2
 8004756:	4093      	lsls	r3, r2
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800475e:	4938      	ldr	r1, [pc, #224]	@ (8004840 <HAL_GPIO_Init+0x34c>)
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	089b      	lsrs	r3, r3, #2
 8004764:	3302      	adds	r3, #2
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800476c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	43db      	mvns	r3, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4013      	ands	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004792:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800479a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	43db      	mvns	r3, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4013      	ands	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80047c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	43db      	mvns	r3, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4013      	ands	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	3301      	adds	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	f47f ae6b 	bne.w	8004508 <HAL_GPIO_Init+0x14>
  }
}
 8004832:	bf00      	nop
 8004834:	bf00      	nop
 8004836:	3724      	adds	r7, #36	@ 0x24
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	58000400 	.word	0x58000400

08004844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	807b      	strh	r3, [r7, #2]
 8004850:	4613      	mov	r3, r2
 8004852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004854:	787b      	ldrb	r3, [r7, #1]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800485a:	887a      	ldrh	r2, [r7, #2]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004860:	e003      	b.n	800486a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004862:	887b      	ldrh	r3, [r7, #2]
 8004864:	041a      	lsls	r2, r3, #16
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	619a      	str	r2, [r3, #24]
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af02      	add	r7, sp, #8
 800487c:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e04f      	b.n	8004928 <HAL_HCD_Init+0xb2>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d106      	bne.n	80048a2 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7fd fce3 	bl	8002268 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2203      	movs	r2, #3
 80048a6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f006 f8c2 	bl	800aa38 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	7c1a      	ldrb	r2, [r3, #16]
 80048bc:	f88d 2000 	strb.w	r2, [sp]
 80048c0:	3304      	adds	r3, #4
 80048c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048c4:	f006 f846 	bl	800a954 <USB_CoreInit>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <HAL_HCD_Init+0x64>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2202      	movs	r2, #2
 80048d2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e026      	b.n	8004928 <HAL_HCD_Init+0xb2>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2101      	movs	r1, #1
 80048e0:	4618      	mov	r0, r3
 80048e2:	f006 f8ba 	bl	800aa5a <USB_SetCurrentMode>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_HCD_Init+0x82>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e017      	b.n	8004928 <HAL_HCD_Init+0xb2>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	7c1a      	ldrb	r2, [r3, #16]
 8004900:	f88d 2000 	strb.w	r2, [sp]
 8004904:	3304      	adds	r3, #4
 8004906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004908:	f006 f992 	bl	800ac30 <USB_HostInit>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d005      	beq.n	800491e <HAL_HCD_Init+0xa8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e004      	b.n	8004928 <HAL_HCD_Init+0xb2>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e08b      	b.n	8004a5a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fc fa28 	bl	8000dac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2224      	movs	r2, #36	@ 0x24
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0201 	bic.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004980:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004990:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d107      	bne.n	80049aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049a6:	609a      	str	r2, [r3, #8]
 80049a8:	e006      	b.n	80049b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80049b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d108      	bne.n	80049d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049ce:	605a      	str	r2, [r3, #4]
 80049d0:	e007      	b.n	80049e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6859      	ldr	r1, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004a64 <HAL_I2C_Init+0x134>)
 80049ee:	430b      	orrs	r3, r1
 80049f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69d9      	ldr	r1, [r3, #28]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1a      	ldr	r2, [r3, #32]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	02008000 	.word	0x02008000

08004a68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d138      	bne.n	8004af0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e032      	b.n	8004af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2224      	movs	r2, #36	@ 0x24
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0201 	bic.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004aba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e000      	b.n	8004af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004af0:	2302      	movs	r3, #2
  }
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b085      	sub	sp, #20
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d139      	bne.n	8004b88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e033      	b.n	8004b8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2224      	movs	r2, #36	@ 0x24
 8004b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0201 	bic.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	e000      	b.n	8004b8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b88:	2302      	movs	r3, #2
  }
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004ba4:	f7fd fc4e 	bl	8002444 <HAL_GetTick>
 8004ba8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d102      	bne.n	8004bb6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	73fb      	strb	r3, [r7, #15]
 8004bb4:	e0a5      	b.n	8004d02 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f040 809e 	bne.w	8004d02 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fc fb7c 	bl	80012c4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004bcc:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f89d 	bl	8004d10 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	4b4b      	ldr	r3, [pc, #300]	@ (8004d0c <HAL_OSPI_Init+0x174>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	68d1      	ldr	r1, [r2, #12]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6912      	ldr	r2, [r2, #16]
 8004be8:	3a01      	subs	r2, #1
 8004bea:	0412      	lsls	r2, r2, #16
 8004bec:	4311      	orrs	r1, r2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6952      	ldr	r2, [r2, #20]
 8004bf2:	3a01      	subs	r2, #1
 8004bf4:	0212      	lsls	r2, r2, #8
 8004bf6:	4311      	orrs	r1, r2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004bfc:	4311      	orrs	r1, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	69d2      	ldr	r2, [r2, #28]
 8004c02:	4311      	orrs	r1, r2
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1a      	ldr	r2, [r3, #32]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c26:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c3c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	021a      	lsls	r2, r3, #8
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2200      	movs	r2, #0
 8004c62:	2120      	movs	r1, #32
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fd4b 	bl	8005700 <OSPI_WaitFlagStateUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d146      	bne.n	8004d02 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	1e5a      	subs	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004caa:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0201 	orr.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d107      	bne.n	8004cea <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0202 	orr.w	r2, r2, #2
 8004ce8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cf2:	d103      	bne.n	8004cfc <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	651a      	str	r2, [r3, #80]	@ 0x50
 8004cfa:	e002      	b.n	8004d02 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	f8e0f8f4 	.word	0xf8e0f8f4

08004d10 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b094      	sub	sp, #80	@ 0x50
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a9d      	ldr	r2, [pc, #628]	@ (8004fc4 <HAL_OSPIM_Config+0x294>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d105      	bne.n	8004d5e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8004d5c:	e004      	b.n	8004d68 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8004d6e:	e01d      	b.n	8004dac <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004d70:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004d74:	3301      	adds	r3, #1
 8004d76:	b2d8      	uxtb	r0, r3
 8004d78:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8004d7c:	f107 0114 	add.w	r1, r7, #20
 8004d80:	4613      	mov	r3, r2
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	4413      	add	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	440b      	add	r3, r1
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	f000 fcf0 	bl	8005770 <OSPIM_GetConfig>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d005      	beq.n	8004da2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2208      	movs	r2, #8
 8004da0:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004da2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004da6:	3301      	adds	r3, #1
 8004da8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8004dac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d9dd      	bls.n	8004d70 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8004db4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f040 8495 	bne.w	80056e8 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004dbe:	4b81      	ldr	r3, [pc, #516]	@ (8004fc4 <HAL_OSPIM_Config+0x294>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004dca:	4b7e      	ldr	r3, [pc, #504]	@ (8004fc4 <HAL_OSPIM_Config+0x294>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a7d      	ldr	r2, [pc, #500]	@ (8004fc4 <HAL_OSPIM_Config+0x294>)
 8004dd0:	f023 0301 	bic.w	r3, r3, #1
 8004dd4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004dd6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004dda:	f043 0301 	orr.w	r3, r3, #1
 8004dde:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004de2:	4b79      	ldr	r3, [pc, #484]	@ (8004fc8 <HAL_OSPIM_Config+0x298>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00b      	beq.n	8004e06 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004dee:	4b76      	ldr	r3, [pc, #472]	@ (8004fc8 <HAL_OSPIM_Config+0x298>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a75      	ldr	r2, [pc, #468]	@ (8004fc8 <HAL_OSPIM_Config+0x298>)
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004dfa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004dfe:	f043 0302 	orr.w	r3, r3, #2
 8004e02:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004e06:	4971      	ldr	r1, [pc, #452]	@ (8004fcc <HAL_OSPIM_Config+0x29c>)
 8004e08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	4413      	add	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	3350      	adds	r3, #80	@ 0x50
 8004e14:	443b      	add	r3, r7
 8004e16:	3b34      	subs	r3, #52	@ 0x34
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	440b      	add	r3, r1
 8004e20:	6859      	ldr	r1, [r3, #4]
 8004e22:	486a      	ldr	r0, [pc, #424]	@ (8004fcc <HAL_OSPIM_Config+0x29c>)
 8004e24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	3350      	adds	r3, #80	@ 0x50
 8004e30:	443b      	add	r3, r7
 8004e32:	3b34      	subs	r3, #52	@ 0x34
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4403      	add	r3, r0
 8004e40:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8004e42:	4b62      	ldr	r3, [pc, #392]	@ (8004fcc <HAL_OSPIM_Config+0x29c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 80c0 	beq.w	8004fd0 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8004e50:	4b5e      	ldr	r3, [pc, #376]	@ (8004fcc <HAL_OSPIM_Config+0x29c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a5d      	ldr	r2, [pc, #372]	@ (8004fcc <HAL_OSPIM_Config+0x29c>)
 8004e56:	f023 0301 	bic.w	r3, r3, #1
 8004e5a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8004e5c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	f040 8162 	bne.w	800512a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8004e66:	4959      	ldr	r1, [pc, #356]	@ (8004fcc <HAL_OSPIM_Config+0x29c>)
 8004e68:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	4413      	add	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	3350      	adds	r3, #80	@ 0x50
 8004e76:	443b      	add	r3, r7
 8004e78:	3b3c      	subs	r3, #60	@ 0x3c
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	6859      	ldr	r1, [r3, #4]
 8004e84:	4851      	ldr	r0, [pc, #324]	@ (8004fcc <HAL_OSPIM_Config+0x29c>)
 8004e86:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	4413      	add	r3, r2
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	3350      	adds	r3, #80	@ 0x50
 8004e94:	443b      	add	r3, r7
 8004e96:	3b3c      	subs	r3, #60	@ 0x3c
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	f041 0202 	orr.w	r2, r1, #2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4403      	add	r3, r0
 8004ea4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004ea6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004eaa:	4613      	mov	r3, r2
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	4413      	add	r3, r2
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	3350      	adds	r3, #80	@ 0x50
 8004eb4:	443b      	add	r3, r7
 8004eb6:	3b38      	subs	r3, #56	@ 0x38
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01f      	beq.n	8004efe <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8004ebe:	4943      	ldr	r1, [pc, #268]	@ (8004fcc <HAL_OSPIM_Config+0x29c>)
 8004ec0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	4413      	add	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	3350      	adds	r3, #80	@ 0x50
 8004ece:	443b      	add	r3, r7
 8004ed0:	3b38      	subs	r3, #56	@ 0x38
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	6859      	ldr	r1, [r3, #4]
 8004edc:	483b      	ldr	r0, [pc, #236]	@ (8004fcc <HAL_OSPIM_Config+0x29c>)
 8004ede:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	4413      	add	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	3350      	adds	r3, #80	@ 0x50
 8004eec:	443b      	add	r3, r7
 8004eee:	3b38      	subs	r3, #56	@ 0x38
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	f041 0220 	orr.w	r2, r1, #32
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4403      	add	r3, r0
 8004efc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004efe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004f02:	4613      	mov	r3, r2
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	4413      	add	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	3350      	adds	r3, #80	@ 0x50
 8004f0c:	443b      	add	r3, r7
 8004f0e:	3b30      	subs	r3, #48	@ 0x30
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d023      	beq.n	8004f5e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8004f16:	492d      	ldr	r1, [pc, #180]	@ (8004fcc <HAL_OSPIM_Config+0x29c>)
 8004f18:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	4413      	add	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	3350      	adds	r3, #80	@ 0x50
 8004f26:	443b      	add	r3, r7
 8004f28:	3b30      	subs	r3, #48	@ 0x30
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	6859      	ldr	r1, [r3, #4]
 8004f38:	4824      	ldr	r0, [pc, #144]	@ (8004fcc <HAL_OSPIM_Config+0x29c>)
 8004f3a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004f3e:	4613      	mov	r3, r2
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	4413      	add	r3, r2
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	3350      	adds	r3, #80	@ 0x50
 8004f48:	443b      	add	r3, r7
 8004f4a:	3b30      	subs	r3, #48	@ 0x30
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4403      	add	r3, r0
 8004f5c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004f5e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004f62:	4613      	mov	r3, r2
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	4413      	add	r3, r2
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	3350      	adds	r3, #80	@ 0x50
 8004f6c:	443b      	add	r3, r7
 8004f6e:	3b2c      	subs	r3, #44	@ 0x2c
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80d9 	beq.w	800512a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8004f78:	4914      	ldr	r1, [pc, #80]	@ (8004fcc <HAL_OSPIM_Config+0x29c>)
 8004f7a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004f7e:	4613      	mov	r3, r2
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	4413      	add	r3, r2
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	3350      	adds	r3, #80	@ 0x50
 8004f88:	443b      	add	r3, r7
 8004f8a:	3b2c      	subs	r3, #44	@ 0x2c
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	6859      	ldr	r1, [r3, #4]
 8004f9a:	480c      	ldr	r0, [pc, #48]	@ (8004fcc <HAL_OSPIM_Config+0x29c>)
 8004f9c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	4413      	add	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	3350      	adds	r3, #80	@ 0x50
 8004faa:	443b      	add	r3, r7
 8004fac:	3b2c      	subs	r3, #44	@ 0x2c
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4403      	add	r3, r0
 8004fbe:	605a      	str	r2, [r3, #4]
 8004fc0:	e0b3      	b.n	800512a <HAL_OSPIM_Config+0x3fa>
 8004fc2:	bf00      	nop
 8004fc4:	52005000 	.word	0x52005000
 8004fc8:	5200a000 	.word	0x5200a000
 8004fcc:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8004fd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	4413      	add	r3, r2
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	3350      	adds	r3, #80	@ 0x50
 8004fdc:	443b      	add	r3, r7
 8004fde:	3b3c      	subs	r3, #60	@ 0x3c
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 80a1 	beq.w	800512a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004fe8:	4993      	ldr	r1, [pc, #588]	@ (8005238 <HAL_OSPIM_Config+0x508>)
 8004fea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fec:	4613      	mov	r3, r2
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	4413      	add	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	3350      	adds	r3, #80	@ 0x50
 8004ff6:	443b      	add	r3, r7
 8004ff8:	3b3c      	subs	r3, #60	@ 0x3c
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	6859      	ldr	r1, [r3, #4]
 8005004:	488c      	ldr	r0, [pc, #560]	@ (8005238 <HAL_OSPIM_Config+0x508>)
 8005006:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005008:	4613      	mov	r3, r2
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	4413      	add	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	3350      	adds	r3, #80	@ 0x50
 8005012:	443b      	add	r3, r7
 8005014:	3b3c      	subs	r3, #60	@ 0x3c
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3b01      	subs	r3, #1
 800501a:	f021 0201 	bic.w	r2, r1, #1
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4403      	add	r3, r0
 8005022:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8005024:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005026:	4613      	mov	r3, r2
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	4413      	add	r3, r2
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	3350      	adds	r3, #80	@ 0x50
 8005030:	443b      	add	r3, r7
 8005032:	3b38      	subs	r3, #56	@ 0x38
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01d      	beq.n	8005076 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800503a:	497f      	ldr	r1, [pc, #508]	@ (8005238 <HAL_OSPIM_Config+0x508>)
 800503c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800503e:	4613      	mov	r3, r2
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	4413      	add	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	3350      	adds	r3, #80	@ 0x50
 8005048:	443b      	add	r3, r7
 800504a:	3b38      	subs	r3, #56	@ 0x38
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3b01      	subs	r3, #1
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	6859      	ldr	r1, [r3, #4]
 8005056:	4878      	ldr	r0, [pc, #480]	@ (8005238 <HAL_OSPIM_Config+0x508>)
 8005058:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800505a:	4613      	mov	r3, r2
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	4413      	add	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	3350      	adds	r3, #80	@ 0x50
 8005064:	443b      	add	r3, r7
 8005066:	3b38      	subs	r3, #56	@ 0x38
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3b01      	subs	r3, #1
 800506c:	f021 0210 	bic.w	r2, r1, #16
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4403      	add	r3, r0
 8005074:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005076:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005078:	4613      	mov	r3, r2
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	4413      	add	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	3350      	adds	r3, #80	@ 0x50
 8005082:	443b      	add	r3, r7
 8005084:	3b30      	subs	r3, #48	@ 0x30
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d021      	beq.n	80050d0 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800508c:	496a      	ldr	r1, [pc, #424]	@ (8005238 <HAL_OSPIM_Config+0x508>)
 800508e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005090:	4613      	mov	r3, r2
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	4413      	add	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	3350      	adds	r3, #80	@ 0x50
 800509a:	443b      	add	r3, r7
 800509c:	3b30      	subs	r3, #48	@ 0x30
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	6859      	ldr	r1, [r3, #4]
 80050ac:	4862      	ldr	r0, [pc, #392]	@ (8005238 <HAL_OSPIM_Config+0x508>)
 80050ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050b0:	4613      	mov	r3, r2
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	4413      	add	r3, r2
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	3350      	adds	r3, #80	@ 0x50
 80050ba:	443b      	add	r3, r7
 80050bc:	3b30      	subs	r3, #48	@ 0x30
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4403      	add	r3, r0
 80050ce:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80050d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050d2:	4613      	mov	r3, r2
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	4413      	add	r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	3350      	adds	r3, #80	@ 0x50
 80050dc:	443b      	add	r3, r7
 80050de:	3b2c      	subs	r3, #44	@ 0x2c
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d021      	beq.n	800512a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80050e6:	4954      	ldr	r1, [pc, #336]	@ (8005238 <HAL_OSPIM_Config+0x508>)
 80050e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050ea:	4613      	mov	r3, r2
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	4413      	add	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	3350      	adds	r3, #80	@ 0x50
 80050f4:	443b      	add	r3, r7
 80050f6:	3b2c      	subs	r3, #44	@ 0x2c
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	6859      	ldr	r1, [r3, #4]
 8005106:	484c      	ldr	r0, [pc, #304]	@ (8005238 <HAL_OSPIM_Config+0x508>)
 8005108:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800510a:	4613      	mov	r3, r2
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	4413      	add	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	3350      	adds	r3, #80	@ 0x50
 8005114:	443b      	add	r3, r7
 8005116:	3b2c      	subs	r3, #44	@ 0x2c
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3b01      	subs	r3, #1
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4403      	add	r3, r0
 8005128:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	6819      	ldr	r1, [r3, #0]
 800512e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005132:	4613      	mov	r3, r2
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	4413      	add	r3, r2
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	3350      	adds	r3, #80	@ 0x50
 800513c:	443b      	add	r3, r7
 800513e:	3b3c      	subs	r3, #60	@ 0x3c
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4299      	cmp	r1, r3
 8005144:	d038      	beq.n	80051b8 <HAL_OSPIM_Config+0x488>
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	6859      	ldr	r1, [r3, #4]
 800514a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800514e:	4613      	mov	r3, r2
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	4413      	add	r3, r2
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	3350      	adds	r3, #80	@ 0x50
 8005158:	443b      	add	r3, r7
 800515a:	3b38      	subs	r3, #56	@ 0x38
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4299      	cmp	r1, r3
 8005160:	d02a      	beq.n	80051b8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	6899      	ldr	r1, [r3, #8]
 8005166:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800516a:	4613      	mov	r3, r2
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	4413      	add	r3, r2
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	3350      	adds	r3, #80	@ 0x50
 8005174:	443b      	add	r3, r7
 8005176:	3b34      	subs	r3, #52	@ 0x34
 8005178:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800517a:	4299      	cmp	r1, r3
 800517c:	d01c      	beq.n	80051b8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	68d9      	ldr	r1, [r3, #12]
 8005182:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005186:	4613      	mov	r3, r2
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	4413      	add	r3, r2
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	3350      	adds	r3, #80	@ 0x50
 8005190:	443b      	add	r3, r7
 8005192:	3b30      	subs	r3, #48	@ 0x30
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4299      	cmp	r1, r3
 8005198:	d00e      	beq.n	80051b8 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	6919      	ldr	r1, [r3, #16]
 800519e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80051a2:	4613      	mov	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4413      	add	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	3350      	adds	r3, #80	@ 0x50
 80051ac:	443b      	add	r3, r7
 80051ae:	3b2c      	subs	r3, #44	@ 0x2c
 80051b0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80051b2:	4299      	cmp	r1, r3
 80051b4:	f040 810e 	bne.w	80053d4 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	6819      	ldr	r1, [r3, #0]
 80051bc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80051c0:	4613      	mov	r3, r2
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	4413      	add	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	3350      	adds	r3, #80	@ 0x50
 80051ca:	443b      	add	r3, r7
 80051cc:	3b3c      	subs	r3, #60	@ 0x3c
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4299      	cmp	r1, r3
 80051d2:	d133      	bne.n	800523c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	6859      	ldr	r1, [r3, #4]
 80051d8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80051dc:	4613      	mov	r3, r2
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	4413      	add	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	3350      	adds	r3, #80	@ 0x50
 80051e6:	443b      	add	r3, r7
 80051e8:	3b38      	subs	r3, #56	@ 0x38
 80051ea:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80051ec:	4299      	cmp	r1, r3
 80051ee:	d125      	bne.n	800523c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	68d9      	ldr	r1, [r3, #12]
 80051f4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80051f8:	4613      	mov	r3, r2
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	4413      	add	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	3350      	adds	r3, #80	@ 0x50
 8005202:	443b      	add	r3, r7
 8005204:	3b30      	subs	r3, #48	@ 0x30
 8005206:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8005208:	4299      	cmp	r1, r3
 800520a:	d117      	bne.n	800523c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	6919      	ldr	r1, [r3, #16]
 8005210:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005214:	4613      	mov	r3, r2
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	4413      	add	r3, r2
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	3350      	adds	r3, #80	@ 0x50
 800521e:	443b      	add	r3, r7
 8005220:	3b2c      	subs	r3, #44	@ 0x2c
 8005222:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8005224:	4299      	cmp	r1, r3
 8005226:	d109      	bne.n	800523c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8005228:	4b03      	ldr	r3, [pc, #12]	@ (8005238 <HAL_OSPIM_Config+0x508>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a02      	ldr	r2, [pc, #8]	@ (8005238 <HAL_OSPIM_Config+0x508>)
 800522e:	f043 0301 	orr.w	r3, r3, #1
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	e0ce      	b.n	80053d4 <HAL_OSPIM_Config+0x6a4>
 8005236:	bf00      	nop
 8005238:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800523c:	49bb      	ldr	r1, [pc, #748]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 800523e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005242:	4613      	mov	r3, r2
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	4413      	add	r3, r2
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	3350      	adds	r3, #80	@ 0x50
 800524c:	443b      	add	r3, r7
 800524e:	3b3c      	subs	r3, #60	@ 0x3c
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3b01      	subs	r3, #1
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	6859      	ldr	r1, [r3, #4]
 800525a:	48b4      	ldr	r0, [pc, #720]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 800525c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005260:	4613      	mov	r3, r2
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	4413      	add	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	3350      	adds	r3, #80	@ 0x50
 800526a:	443b      	add	r3, r7
 800526c:	3b3c      	subs	r3, #60	@ 0x3c
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3b01      	subs	r3, #1
 8005272:	f021 0201 	bic.w	r2, r1, #1
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4403      	add	r3, r0
 800527a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800527c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005280:	4613      	mov	r3, r2
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	4413      	add	r3, r2
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	3350      	adds	r3, #80	@ 0x50
 800528a:	443b      	add	r3, r7
 800528c:	3b38      	subs	r3, #56	@ 0x38
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01f      	beq.n	80052d4 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005294:	49a5      	ldr	r1, [pc, #660]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 8005296:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800529a:	4613      	mov	r3, r2
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	4413      	add	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	3350      	adds	r3, #80	@ 0x50
 80052a4:	443b      	add	r3, r7
 80052a6:	3b38      	subs	r3, #56	@ 0x38
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	6859      	ldr	r1, [r3, #4]
 80052b2:	489e      	ldr	r0, [pc, #632]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 80052b4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80052b8:	4613      	mov	r3, r2
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	4413      	add	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	3350      	adds	r3, #80	@ 0x50
 80052c2:	443b      	add	r3, r7
 80052c4:	3b38      	subs	r3, #56	@ 0x38
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	f021 0210 	bic.w	r2, r1, #16
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4403      	add	r3, r0
 80052d2:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80052d4:	4995      	ldr	r1, [pc, #596]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 80052d6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80052da:	4613      	mov	r3, r2
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	4413      	add	r3, r2
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	3350      	adds	r3, #80	@ 0x50
 80052e4:	443b      	add	r3, r7
 80052e6:	3b34      	subs	r3, #52	@ 0x34
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	6859      	ldr	r1, [r3, #4]
 80052f2:	488e      	ldr	r0, [pc, #568]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 80052f4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80052f8:	4613      	mov	r3, r2
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	4413      	add	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	3350      	adds	r3, #80	@ 0x50
 8005302:	443b      	add	r3, r7
 8005304:	3b34      	subs	r3, #52	@ 0x34
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3b01      	subs	r3, #1
 800530a:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4403      	add	r3, r0
 8005312:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005314:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005318:	4613      	mov	r3, r2
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	4413      	add	r3, r2
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	3350      	adds	r3, #80	@ 0x50
 8005322:	443b      	add	r3, r7
 8005324:	3b30      	subs	r3, #48	@ 0x30
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d023      	beq.n	8005374 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800532c:	497f      	ldr	r1, [pc, #508]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 800532e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005332:	4613      	mov	r3, r2
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	4413      	add	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	3350      	adds	r3, #80	@ 0x50
 800533c:	443b      	add	r3, r7
 800533e:	3b30      	subs	r3, #48	@ 0x30
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3b01      	subs	r3, #1
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	440b      	add	r3, r1
 800534c:	6859      	ldr	r1, [r3, #4]
 800534e:	4877      	ldr	r0, [pc, #476]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 8005350:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005354:	4613      	mov	r3, r2
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	4413      	add	r3, r2
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	3350      	adds	r3, #80	@ 0x50
 800535e:	443b      	add	r3, r7
 8005360:	3b30      	subs	r3, #48	@ 0x30
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3b01      	subs	r3, #1
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4403      	add	r3, r0
 8005372:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005374:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005378:	4613      	mov	r3, r2
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	4413      	add	r3, r2
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	3350      	adds	r3, #80	@ 0x50
 8005382:	443b      	add	r3, r7
 8005384:	3b2c      	subs	r3, #44	@ 0x2c
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d023      	beq.n	80053d4 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800538c:	4967      	ldr	r1, [pc, #412]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 800538e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005392:	4613      	mov	r3, r2
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	4413      	add	r3, r2
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	3350      	adds	r3, #80	@ 0x50
 800539c:	443b      	add	r3, r7
 800539e:	3b2c      	subs	r3, #44	@ 0x2c
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	440b      	add	r3, r1
 80053ac:	6859      	ldr	r1, [r3, #4]
 80053ae:	485f      	ldr	r0, [pc, #380]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 80053b0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80053b4:	4613      	mov	r3, r2
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	4413      	add	r3, r2
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	3350      	adds	r3, #80	@ 0x50
 80053be:	443b      	add	r3, r7
 80053c0:	3b2c      	subs	r3, #44	@ 0x2c
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4403      	add	r3, r0
 80053d2:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80053d4:	4a55      	ldr	r2, [pc, #340]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	3b01      	subs	r3, #1
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053e8:	025b      	lsls	r3, r3, #9
 80053ea:	431a      	orrs	r2, r3
 80053ec:	494f      	ldr	r1, [pc, #316]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	1e5a      	subs	r2, r3, #1
 8005404:	4b49      	ldr	r3, [pc, #292]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	0c1b      	lsrs	r3, r3, #16
 800540a:	b2db      	uxtb	r3, r3
 800540c:	429a      	cmp	r2, r3
 800540e:	d90a      	bls.n	8005426 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8005410:	4b46      	ldr	r3, [pc, #280]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	3b01      	subs	r3, #1
 800541e:	041b      	lsls	r3, r3, #16
 8005420:	4942      	ldr	r1, [pc, #264]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 8005422:	4313      	orrs	r3, r2
 8005424:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8005426:	4b41      	ldr	r3, [pc, #260]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 809a 	beq.w	8005568 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8005434:	4a3d      	ldr	r2, [pc, #244]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3b01      	subs	r3, #1
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f023 0203 	bic.w	r2, r3, #3
 8005446:	4939      	ldr	r1, [pc, #228]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3b01      	subs	r3, #1
 800544e:	f042 0201 	orr.w	r2, r2, #1
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d011      	beq.n	8005484 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8005460:	4a32      	ldr	r2, [pc, #200]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	3b01      	subs	r3, #1
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005472:	492e      	ldr	r1, [pc, #184]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	3b01      	subs	r3, #1
 800547a:	f042 0210 	orr.w	r2, r2, #16
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d016      	beq.n	80054be <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005490:	4a26      	ldr	r2, [pc, #152]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	3b01      	subs	r3, #1
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80054a6:	4921      	ldr	r1, [pc, #132]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	605a      	str	r2, [r3, #4]
 80054bc:	e019      	b.n	80054f2 <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d015      	beq.n	80054f2 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80054c6:	4a19      	ldr	r2, [pc, #100]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80054dc:	4913      	ldr	r1, [pc, #76]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d018      	beq.n	8005530 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80054fe:	4a0b      	ldr	r2, [pc, #44]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	3b01      	subs	r3, #1
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005514:	4905      	ldr	r1, [pc, #20]	@ (800552c <HAL_OSPIM_Config+0x7fc>)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	3b01      	subs	r3, #1
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	440b      	add	r3, r1
 8005528:	605a      	str	r2, [r3, #4]
 800552a:	e0c5      	b.n	80056b8 <HAL_OSPIM_Config+0x988>
 800552c:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 80bf 	beq.w	80056b8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800553a:	4a6e      	ldr	r2, [pc, #440]	@ (80056f4 <HAL_OSPIM_Config+0x9c4>)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	3b01      	subs	r3, #1
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005550:	4968      	ldr	r1, [pc, #416]	@ (80056f4 <HAL_OSPIM_Config+0x9c4>)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	3b01      	subs	r3, #1
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	e0a7      	b.n	80056b8 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8005568:	4a62      	ldr	r2, [pc, #392]	@ (80056f4 <HAL_OSPIM_Config+0x9c4>)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3b01      	subs	r3, #1
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f023 0203 	bic.w	r2, r3, #3
 800557a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	431a      	orrs	r2, r3
 8005580:	495c      	ldr	r1, [pc, #368]	@ (80056f4 <HAL_OSPIM_Config+0x9c4>)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3b01      	subs	r3, #1
 8005588:	f042 0201 	orr.w	r2, r2, #1
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d014      	beq.n	80055c4 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800559a:	4a56      	ldr	r2, [pc, #344]	@ (80056f4 <HAL_OSPIM_Config+0x9c4>)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055ae:	015b      	lsls	r3, r3, #5
 80055b0:	431a      	orrs	r2, r3
 80055b2:	4950      	ldr	r1, [pc, #320]	@ (80056f4 <HAL_OSPIM_Config+0x9c4>)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	f042 0210 	orr.w	r2, r2, #16
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d019      	beq.n	8005604 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80055d0:	4a48      	ldr	r2, [pc, #288]	@ (80056f4 <HAL_OSPIM_Config+0x9c4>)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80055e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055e8:	049b      	lsls	r3, r3, #18
 80055ea:	431a      	orrs	r2, r3
 80055ec:	4941      	ldr	r1, [pc, #260]	@ (80056f4 <HAL_OSPIM_Config+0x9c4>)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	605a      	str	r2, [r3, #4]
 8005602:	e01c      	b.n	800563e <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d018      	beq.n	800563e <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800560c:	4a39      	ldr	r2, [pc, #228]	@ (80056f4 <HAL_OSPIM_Config+0x9c4>)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	3b01      	subs	r3, #1
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005624:	069b      	lsls	r3, r3, #26
 8005626:	431a      	orrs	r2, r3
 8005628:	4932      	ldr	r1, [pc, #200]	@ (80056f4 <HAL_OSPIM_Config+0x9c4>)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	3b01      	subs	r3, #1
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d019      	beq.n	800567e <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800564a:	4a2a      	ldr	r2, [pc, #168]	@ (80056f4 <HAL_OSPIM_Config+0x9c4>)
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	3b01      	subs	r3, #1
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005660:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005662:	049b      	lsls	r3, r3, #18
 8005664:	431a      	orrs	r2, r3
 8005666:	4923      	ldr	r1, [pc, #140]	@ (80056f4 <HAL_OSPIM_Config+0x9c4>)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	3b01      	subs	r3, #1
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	440b      	add	r3, r1
 800567a:	605a      	str	r2, [r3, #4]
 800567c:	e01c      	b.n	80056b8 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d018      	beq.n	80056b8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005686:	4a1b      	ldr	r2, [pc, #108]	@ (80056f4 <HAL_OSPIM_Config+0x9c4>)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	3b01      	subs	r3, #1
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800569c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800569e:	069b      	lsls	r3, r3, #26
 80056a0:	431a      	orrs	r2, r3
 80056a2:	4914      	ldr	r1, [pc, #80]	@ (80056f4 <HAL_OSPIM_Config+0x9c4>)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80056b8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80056c4:	4b0c      	ldr	r3, [pc, #48]	@ (80056f8 <HAL_OSPIM_Config+0x9c8>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a0b      	ldr	r2, [pc, #44]	@ (80056f8 <HAL_OSPIM_Config+0x9c8>)
 80056ca:	f043 0301 	orr.w	r3, r3, #1
 80056ce:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80056d0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80056dc:	4b07      	ldr	r3, [pc, #28]	@ (80056fc <HAL_OSPIM_Config+0x9cc>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a06      	ldr	r2, [pc, #24]	@ (80056fc <HAL_OSPIM_Config+0x9cc>)
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80056e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3750      	adds	r7, #80	@ 0x50
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	5200b400 	.word	0x5200b400
 80056f8:	52005000 	.word	0x52005000
 80056fc:	5200a000 	.word	0x5200a000

08005700 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	4613      	mov	r3, r2
 800570e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005710:	e01a      	b.n	8005748 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005718:	d016      	beq.n	8005748 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800571a:	f7fc fe93 	bl	8002444 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	429a      	cmp	r2, r3
 8005728:	d302      	bcc.n	8005730 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10b      	bne.n	8005748 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005736:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573c:	f043 0201 	orr.w	r2, r3, #1
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e00e      	b.n	8005766 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6a1a      	ldr	r2, [r3, #32]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf14      	ite	ne
 8005756:	2301      	movne	r3, #1
 8005758:	2300      	moveq	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	429a      	cmp	r2, r3
 8005762:	d1d6      	bne.n	8005712 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	4603      	mov	r3, r0
 8005778:	6039      	str	r1, [r7, #0]
 800577a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <OSPIM_GetConfig+0x26>
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	2b02      	cmp	r3, #2
 800578e:	d802      	bhi.n	8005796 <OSPIM_GetConfig+0x26>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d102      	bne.n	800579c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	75fb      	strb	r3, [r7, #23]
 800579a:	e098      	b.n	80058ce <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2200      	movs	r2, #0
 80057a6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2200      	movs	r2, #0
 80057ac:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2200      	movs	r2, #0
 80057b2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2200      	movs	r2, #0
 80057b8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d10b      	bne.n	80057d8 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80057c0:	4b46      	ldr	r3, [pc, #280]	@ (80058dc <OSPIM_GetConfig+0x16c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80057cc:	4b44      	ldr	r3, [pc, #272]	@ (80058e0 <OSPIM_GetConfig+0x170>)
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	e002      	b.n	80057d8 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80057d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057d6:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80057d8:	2300      	movs	r3, #0
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	e074      	b.n	80058c8 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80057de:	4a3f      	ldr	r2, [pc, #252]	@ (80058dc <OSPIM_GetConfig+0x16c>)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4053      	eors	r3, r2
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d103      	bne.n	800580a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f003 0310 	and.w	r3, r3, #16
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	4053      	eors	r3, r2
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b00      	cmp	r3, #0
 8005820:	d103      	bne.n	800582a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4053      	eors	r3, r2
 800583a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800583e:	2b00      	cmp	r3, #0
 8005840:	d103      	bne.n	800584a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d018      	beq.n	8005886 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	4053      	eors	r3, r2
 800585a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d111      	bne.n	8005886 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d106      	bne.n	800587a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3301      	adds	r3, #1
 8005870:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	60da      	str	r2, [r3, #12]
 8005878:	e005      	b.n	8005886 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3301      	adds	r3, #1
 800587e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d018      	beq.n	80058c2 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	4053      	eors	r3, r2
 8005896:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d111      	bne.n	80058c2 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d106      	bne.n	80058b6 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3301      	adds	r3, #1
 80058ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	611a      	str	r2, [r3, #16]
 80058b4:	e005      	b.n	80058c2 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3301      	adds	r3, #1
 80058ba:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3301      	adds	r3, #1
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d987      	bls.n	80057de <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	371c      	adds	r7, #28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	5200b400 	.word	0x5200b400
 80058e0:	04040222 	.word	0x04040222

080058e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80058ec:	4b29      	ldr	r3, [pc, #164]	@ (8005994 <HAL_PWREx_ConfigSupply+0xb0>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	2b06      	cmp	r3, #6
 80058f6:	d00a      	beq.n	800590e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80058f8:	4b26      	ldr	r3, [pc, #152]	@ (8005994 <HAL_PWREx_ConfigSupply+0xb0>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	429a      	cmp	r2, r3
 8005904:	d001      	beq.n	800590a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e03f      	b.n	800598a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	e03d      	b.n	800598a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800590e:	4b21      	ldr	r3, [pc, #132]	@ (8005994 <HAL_PWREx_ConfigSupply+0xb0>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005916:	491f      	ldr	r1, [pc, #124]	@ (8005994 <HAL_PWREx_ConfigSupply+0xb0>)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4313      	orrs	r3, r2
 800591c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800591e:	f7fc fd91 	bl	8002444 <HAL_GetTick>
 8005922:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005924:	e009      	b.n	800593a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005926:	f7fc fd8d 	bl	8002444 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005934:	d901      	bls.n	800593a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e027      	b.n	800598a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800593a:	4b16      	ldr	r3, [pc, #88]	@ (8005994 <HAL_PWREx_ConfigSupply+0xb0>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005946:	d1ee      	bne.n	8005926 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b1e      	cmp	r3, #30
 800594c:	d008      	beq.n	8005960 <HAL_PWREx_ConfigSupply+0x7c>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b2e      	cmp	r3, #46	@ 0x2e
 8005952:	d005      	beq.n	8005960 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b1d      	cmp	r3, #29
 8005958:	d002      	beq.n	8005960 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b2d      	cmp	r3, #45	@ 0x2d
 800595e:	d113      	bne.n	8005988 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005960:	f7fc fd70 	bl	8002444 <HAL_GetTick>
 8005964:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005966:	e009      	b.n	800597c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005968:	f7fc fd6c 	bl	8002444 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005976:	d901      	bls.n	800597c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e006      	b.n	800598a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800597c:	4b05      	ldr	r3, [pc, #20]	@ (8005994 <HAL_PWREx_ConfigSupply+0xb0>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0311 	and.w	r3, r3, #17
 8005984:	2b11      	cmp	r3, #17
 8005986:	d1ef      	bne.n	8005968 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	58024800 	.word	0x58024800

08005998 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800599c:	4b05      	ldr	r3, [pc, #20]	@ (80059b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	4a04      	ldr	r2, [pc, #16]	@ (80059b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80059a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059a6:	60d3      	str	r3, [r2, #12]
}
 80059a8:	bf00      	nop
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	58024800 	.word	0x58024800

080059b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08c      	sub	sp, #48	@ 0x30
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e3c8      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 8087 	beq.w	8005ae6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059d8:	4b88      	ldr	r3, [pc, #544]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80059e2:	4b86      	ldr	r3, [pc, #536]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 80059e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80059e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ea:	2b10      	cmp	r3, #16
 80059ec:	d007      	beq.n	80059fe <HAL_RCC_OscConfig+0x46>
 80059ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f0:	2b18      	cmp	r3, #24
 80059f2:	d110      	bne.n	8005a16 <HAL_RCC_OscConfig+0x5e>
 80059f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d10b      	bne.n	8005a16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059fe:	4b7f      	ldr	r3, [pc, #508]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d06c      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x12c>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d168      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e3a2      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a1e:	d106      	bne.n	8005a2e <HAL_RCC_OscConfig+0x76>
 8005a20:	4b76      	ldr	r3, [pc, #472]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a75      	ldr	r2, [pc, #468]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005a26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	e02e      	b.n	8005a8c <HAL_RCC_OscConfig+0xd4>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10c      	bne.n	8005a50 <HAL_RCC_OscConfig+0x98>
 8005a36:	4b71      	ldr	r3, [pc, #452]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a70      	ldr	r2, [pc, #448]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005a3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	4b6e      	ldr	r3, [pc, #440]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a6d      	ldr	r2, [pc, #436]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005a48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	e01d      	b.n	8005a8c <HAL_RCC_OscConfig+0xd4>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a58:	d10c      	bne.n	8005a74 <HAL_RCC_OscConfig+0xbc>
 8005a5a:	4b68      	ldr	r3, [pc, #416]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a67      	ldr	r2, [pc, #412]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005a60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	4b65      	ldr	r3, [pc, #404]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a64      	ldr	r2, [pc, #400]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	e00b      	b.n	8005a8c <HAL_RCC_OscConfig+0xd4>
 8005a74:	4b61      	ldr	r3, [pc, #388]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a60      	ldr	r2, [pc, #384]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005a7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	4b5e      	ldr	r3, [pc, #376]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a5d      	ldr	r2, [pc, #372]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d013      	beq.n	8005abc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a94:	f7fc fcd6 	bl	8002444 <HAL_GetTick>
 8005a98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a9c:	f7fc fcd2 	bl	8002444 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b64      	cmp	r3, #100	@ 0x64
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e356      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005aae:	4b53      	ldr	r3, [pc, #332]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0f0      	beq.n	8005a9c <HAL_RCC_OscConfig+0xe4>
 8005aba:	e014      	b.n	8005ae6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fc fcc2 	bl	8002444 <HAL_GetTick>
 8005ac0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ac4:	f7fc fcbe 	bl	8002444 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b64      	cmp	r3, #100	@ 0x64
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e342      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ad6:	4b49      	ldr	r3, [pc, #292]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f0      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x10c>
 8005ae2:	e000      	b.n	8005ae6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 808c 	beq.w	8005c0c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005af4:	4b41      	ldr	r3, [pc, #260]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005afc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005afe:	4b3f      	ldr	r3, [pc, #252]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b02:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d007      	beq.n	8005b1a <HAL_RCC_OscConfig+0x162>
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	2b18      	cmp	r3, #24
 8005b0e:	d137      	bne.n	8005b80 <HAL_RCC_OscConfig+0x1c8>
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d132      	bne.n	8005b80 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b1a:	4b38      	ldr	r3, [pc, #224]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0304 	and.w	r3, r3, #4
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d005      	beq.n	8005b32 <HAL_RCC_OscConfig+0x17a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e314      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b32:	4b32      	ldr	r3, [pc, #200]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f023 0219 	bic.w	r2, r3, #25
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	492f      	ldr	r1, [pc, #188]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b44:	f7fc fc7e 	bl	8002444 <HAL_GetTick>
 8005b48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b4c:	f7fc fc7a 	bl	8002444 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e2fe      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b5e:	4b27      	ldr	r3, [pc, #156]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f0      	beq.n	8005b4c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6a:	4b24      	ldr	r3, [pc, #144]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	061b      	lsls	r3, r3, #24
 8005b78:	4920      	ldr	r1, [pc, #128]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b7e:	e045      	b.n	8005c0c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d026      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b88:	4b1c      	ldr	r3, [pc, #112]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f023 0219 	bic.w	r2, r3, #25
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	4919      	ldr	r1, [pc, #100]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9a:	f7fc fc53 	bl	8002444 <HAL_GetTick>
 8005b9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ba2:	f7fc fc4f 	bl	8002444 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e2d3      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bb4:	4b11      	ldr	r3, [pc, #68]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0f0      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	061b      	lsls	r3, r3, #24
 8005bce:	490b      	ldr	r1, [pc, #44]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	604b      	str	r3, [r1, #4]
 8005bd4:	e01a      	b.n	8005c0c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bd6:	4b09      	ldr	r3, [pc, #36]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a08      	ldr	r2, [pc, #32]	@ (8005bfc <HAL_RCC_OscConfig+0x244>)
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be2:	f7fc fc2f 	bl	8002444 <HAL_GetTick>
 8005be6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005be8:	e00a      	b.n	8005c00 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bea:	f7fc fc2b 	bl	8002444 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d903      	bls.n	8005c00 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e2af      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
 8005bfc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c00:	4b96      	ldr	r3, [pc, #600]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1ee      	bne.n	8005bea <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d06a      	beq.n	8005cee <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c18:	4b90      	ldr	r3, [pc, #576]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c20:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c22:	4b8e      	ldr	r3, [pc, #568]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c26:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b08      	cmp	r3, #8
 8005c2c:	d007      	beq.n	8005c3e <HAL_RCC_OscConfig+0x286>
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	2b18      	cmp	r3, #24
 8005c32:	d11b      	bne.n	8005c6c <HAL_RCC_OscConfig+0x2b4>
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d116      	bne.n	8005c6c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c3e:	4b87      	ldr	r3, [pc, #540]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <HAL_RCC_OscConfig+0x29e>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	2b80      	cmp	r3, #128	@ 0x80
 8005c50:	d001      	beq.n	8005c56 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e282      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c56:	4b81      	ldr	r3, [pc, #516]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	061b      	lsls	r3, r3, #24
 8005c64:	497d      	ldr	r1, [pc, #500]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c6a:	e040      	b.n	8005cee <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d023      	beq.n	8005cbc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c74:	4b79      	ldr	r3, [pc, #484]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a78      	ldr	r2, [pc, #480]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c80:	f7fc fbe0 	bl	8002444 <HAL_GetTick>
 8005c84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005c88:	f7fc fbdc 	bl	8002444 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e260      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c9a:	4b70      	ldr	r3, [pc, #448]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0f0      	beq.n	8005c88 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ca6:	4b6d      	ldr	r3, [pc, #436]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	061b      	lsls	r3, r3, #24
 8005cb4:	4969      	ldr	r1, [pc, #420]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60cb      	str	r3, [r1, #12]
 8005cba:	e018      	b.n	8005cee <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005cbc:	4b67      	ldr	r3, [pc, #412]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a66      	ldr	r2, [pc, #408]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005cc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc8:	f7fc fbbc 	bl	8002444 <HAL_GetTick>
 8005ccc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005cd0:	f7fc fbb8 	bl	8002444 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e23c      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ce2:	4b5e      	ldr	r3, [pc, #376]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1f0      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0308 	and.w	r3, r3, #8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d036      	beq.n	8005d68 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d019      	beq.n	8005d36 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d02:	4b56      	ldr	r3, [pc, #344]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d06:	4a55      	ldr	r2, [pc, #340]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d0e:	f7fc fb99 	bl	8002444 <HAL_GetTick>
 8005d12:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d14:	e008      	b.n	8005d28 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d16:	f7fc fb95 	bl	8002444 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e219      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d28:	4b4c      	ldr	r3, [pc, #304]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0f0      	beq.n	8005d16 <HAL_RCC_OscConfig+0x35e>
 8005d34:	e018      	b.n	8005d68 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d36:	4b49      	ldr	r3, [pc, #292]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d3a:	4a48      	ldr	r2, [pc, #288]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d42:	f7fc fb7f 	bl	8002444 <HAL_GetTick>
 8005d46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d48:	e008      	b.n	8005d5c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d4a:	f7fc fb7b 	bl	8002444 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e1ff      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005d5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1f0      	bne.n	8005d4a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d036      	beq.n	8005de2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d019      	beq.n	8005db0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d7c:	4b37      	ldr	r3, [pc, #220]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a36      	ldr	r2, [pc, #216]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005d82:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005d86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d88:	f7fc fb5c 	bl	8002444 <HAL_GetTick>
 8005d8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d90:	f7fc fb58 	bl	8002444 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e1dc      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005da2:	4b2e      	ldr	r3, [pc, #184]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f0      	beq.n	8005d90 <HAL_RCC_OscConfig+0x3d8>
 8005dae:	e018      	b.n	8005de2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005db0:	4b2a      	ldr	r3, [pc, #168]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a29      	ldr	r2, [pc, #164]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005db6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005dbc:	f7fc fb42 	bl	8002444 <HAL_GetTick>
 8005dc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dc4:	f7fc fb3e 	bl	8002444 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e1c2      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005dd6:	4b21      	ldr	r3, [pc, #132]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f0      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 8086 	beq.w	8005efc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005df0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e60 <HAL_RCC_OscConfig+0x4a8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a1a      	ldr	r2, [pc, #104]	@ (8005e60 <HAL_RCC_OscConfig+0x4a8>)
 8005df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dfc:	f7fc fb22 	bl	8002444 <HAL_GetTick>
 8005e00:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e04:	f7fc fb1e 	bl	8002444 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b64      	cmp	r3, #100	@ 0x64
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e1a2      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e16:	4b12      	ldr	r3, [pc, #72]	@ (8005e60 <HAL_RCC_OscConfig+0x4a8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0f0      	beq.n	8005e04 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d106      	bne.n	8005e38 <HAL_RCC_OscConfig+0x480>
 8005e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e2e:	4a0b      	ldr	r2, [pc, #44]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e36:	e032      	b.n	8005e9e <HAL_RCC_OscConfig+0x4e6>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d111      	bne.n	8005e64 <HAL_RCC_OscConfig+0x4ac>
 8005e40:	4b06      	ldr	r3, [pc, #24]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e44:	4a05      	ldr	r2, [pc, #20]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005e46:	f023 0301 	bic.w	r3, r3, #1
 8005e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e4c:	4b03      	ldr	r3, [pc, #12]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e50:	4a02      	ldr	r2, [pc, #8]	@ (8005e5c <HAL_RCC_OscConfig+0x4a4>)
 8005e52:	f023 0304 	bic.w	r3, r3, #4
 8005e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e58:	e021      	b.n	8005e9e <HAL_RCC_OscConfig+0x4e6>
 8005e5a:	bf00      	nop
 8005e5c:	58024400 	.word	0x58024400
 8005e60:	58024800 	.word	0x58024800
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	2b05      	cmp	r3, #5
 8005e6a:	d10c      	bne.n	8005e86 <HAL_RCC_OscConfig+0x4ce>
 8005e6c:	4b83      	ldr	r3, [pc, #524]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e70:	4a82      	ldr	r2, [pc, #520]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005e72:	f043 0304 	orr.w	r3, r3, #4
 8005e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e78:	4b80      	ldr	r3, [pc, #512]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7c:	4a7f      	ldr	r2, [pc, #508]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005e7e:	f043 0301 	orr.w	r3, r3, #1
 8005e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e84:	e00b      	b.n	8005e9e <HAL_RCC_OscConfig+0x4e6>
 8005e86:	4b7d      	ldr	r3, [pc, #500]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e8a:	4a7c      	ldr	r2, [pc, #496]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005e8c:	f023 0301 	bic.w	r3, r3, #1
 8005e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e92:	4b7a      	ldr	r3, [pc, #488]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e96:	4a79      	ldr	r2, [pc, #484]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005e98:	f023 0304 	bic.w	r3, r3, #4
 8005e9c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d015      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea6:	f7fc facd 	bl	8002444 <HAL_GetTick>
 8005eaa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005eac:	e00a      	b.n	8005ec4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eae:	f7fc fac9 	bl	8002444 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e14b      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ec4:	4b6d      	ldr	r3, [pc, #436]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0ee      	beq.n	8005eae <HAL_RCC_OscConfig+0x4f6>
 8005ed0:	e014      	b.n	8005efc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed2:	f7fc fab7 	bl	8002444 <HAL_GetTick>
 8005ed6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ed8:	e00a      	b.n	8005ef0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eda:	f7fc fab3 	bl	8002444 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e135      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ef0:	4b62      	ldr	r3, [pc, #392]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1ee      	bne.n	8005eda <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 812a 	beq.w	800615a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f06:	4b5d      	ldr	r3, [pc, #372]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f0e:	2b18      	cmp	r3, #24
 8005f10:	f000 80ba 	beq.w	8006088 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	f040 8095 	bne.w	8006048 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f1e:	4b57      	ldr	r3, [pc, #348]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a56      	ldr	r2, [pc, #344]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005f24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2a:	f7fc fa8b 	bl	8002444 <HAL_GetTick>
 8005f2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f30:	e008      	b.n	8005f44 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f32:	f7fc fa87 	bl	8002444 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e10b      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f44:	4b4d      	ldr	r3, [pc, #308]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1f0      	bne.n	8005f32 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f50:	4b4a      	ldr	r3, [pc, #296]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005f52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f54:	4b4a      	ldr	r3, [pc, #296]	@ (8006080 <HAL_RCC_OscConfig+0x6c8>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f60:	0112      	lsls	r2, r2, #4
 8005f62:	430a      	orrs	r2, r1
 8005f64:	4945      	ldr	r1, [pc, #276]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	628b      	str	r3, [r1, #40]	@ 0x28
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	025b      	lsls	r3, r3, #9
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f84:	3b01      	subs	r3, #1
 8005f86:	041b      	lsls	r3, r3, #16
 8005f88:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f92:	3b01      	subs	r3, #1
 8005f94:	061b      	lsls	r3, r3, #24
 8005f96:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005f9a:	4938      	ldr	r1, [pc, #224]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005fa0:	4b36      	ldr	r3, [pc, #216]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa4:	4a35      	ldr	r2, [pc, #212]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005fa6:	f023 0301 	bic.w	r3, r3, #1
 8005faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005fac:	4b33      	ldr	r3, [pc, #204]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005fae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fb0:	4b34      	ldr	r3, [pc, #208]	@ (8006084 <HAL_RCC_OscConfig+0x6cc>)
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005fb8:	00d2      	lsls	r2, r2, #3
 8005fba:	4930      	ldr	r1, [pc, #192]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc4:	f023 020c 	bic.w	r2, r3, #12
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fcc:	492b      	ldr	r1, [pc, #172]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd6:	f023 0202 	bic.w	r2, r3, #2
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fde:	4927      	ldr	r1, [pc, #156]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005fe4:	4b25      	ldr	r3, [pc, #148]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe8:	4a24      	ldr	r2, [pc, #144]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff0:	4b22      	ldr	r3, [pc, #136]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff4:	4a21      	ldr	r2, [pc, #132]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8005ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006000:	4a1e      	ldr	r2, [pc, #120]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8006002:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006008:	4b1c      	ldr	r3, [pc, #112]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 800600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600c:	4a1b      	ldr	r2, [pc, #108]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 800600e:	f043 0301 	orr.w	r3, r3, #1
 8006012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006014:	4b19      	ldr	r3, [pc, #100]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a18      	ldr	r2, [pc, #96]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 800601a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800601e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006020:	f7fc fa10 	bl	8002444 <HAL_GetTick>
 8006024:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006028:	f7fc fa0c 	bl	8002444 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e090      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800603a:	4b10      	ldr	r3, [pc, #64]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f0      	beq.n	8006028 <HAL_RCC_OscConfig+0x670>
 8006046:	e088      	b.n	800615a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006048:	4b0c      	ldr	r3, [pc, #48]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a0b      	ldr	r2, [pc, #44]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 800604e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006054:	f7fc f9f6 	bl	8002444 <HAL_GetTick>
 8006058:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800605c:	f7fc f9f2 	bl	8002444 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e076      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800606e:	4b03      	ldr	r3, [pc, #12]	@ (800607c <HAL_RCC_OscConfig+0x6c4>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f0      	bne.n	800605c <HAL_RCC_OscConfig+0x6a4>
 800607a:	e06e      	b.n	800615a <HAL_RCC_OscConfig+0x7a2>
 800607c:	58024400 	.word	0x58024400
 8006080:	fffffc0c 	.word	0xfffffc0c
 8006084:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006088:	4b36      	ldr	r3, [pc, #216]	@ (8006164 <HAL_RCC_OscConfig+0x7ac>)
 800608a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800608e:	4b35      	ldr	r3, [pc, #212]	@ (8006164 <HAL_RCC_OscConfig+0x7ac>)
 8006090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006092:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006098:	2b01      	cmp	r3, #1
 800609a:	d031      	beq.n	8006100 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f003 0203 	and.w	r2, r3, #3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d12a      	bne.n	8006100 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	091b      	lsrs	r3, r3, #4
 80060ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d122      	bne.n	8006100 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d11a      	bne.n	8006100 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	0a5b      	lsrs	r3, r3, #9
 80060ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060d8:	429a      	cmp	r2, r3
 80060da:	d111      	bne.n	8006100 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	0c1b      	lsrs	r3, r3, #16
 80060e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d108      	bne.n	8006100 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	0e1b      	lsrs	r3, r3, #24
 80060f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d001      	beq.n	8006104 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e02b      	b.n	800615c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006104:	4b17      	ldr	r3, [pc, #92]	@ (8006164 <HAL_RCC_OscConfig+0x7ac>)
 8006106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006108:	08db      	lsrs	r3, r3, #3
 800610a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800610e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	429a      	cmp	r2, r3
 8006118:	d01f      	beq.n	800615a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800611a:	4b12      	ldr	r3, [pc, #72]	@ (8006164 <HAL_RCC_OscConfig+0x7ac>)
 800611c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611e:	4a11      	ldr	r2, [pc, #68]	@ (8006164 <HAL_RCC_OscConfig+0x7ac>)
 8006120:	f023 0301 	bic.w	r3, r3, #1
 8006124:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006126:	f7fc f98d 	bl	8002444 <HAL_GetTick>
 800612a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800612c:	bf00      	nop
 800612e:	f7fc f989 	bl	8002444 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	4293      	cmp	r3, r2
 8006138:	d0f9      	beq.n	800612e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800613a:	4b0a      	ldr	r3, [pc, #40]	@ (8006164 <HAL_RCC_OscConfig+0x7ac>)
 800613c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800613e:	4b0a      	ldr	r3, [pc, #40]	@ (8006168 <HAL_RCC_OscConfig+0x7b0>)
 8006140:	4013      	ands	r3, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006146:	00d2      	lsls	r2, r2, #3
 8006148:	4906      	ldr	r1, [pc, #24]	@ (8006164 <HAL_RCC_OscConfig+0x7ac>)
 800614a:	4313      	orrs	r3, r2
 800614c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800614e:	4b05      	ldr	r3, [pc, #20]	@ (8006164 <HAL_RCC_OscConfig+0x7ac>)
 8006150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006152:	4a04      	ldr	r2, [pc, #16]	@ (8006164 <HAL_RCC_OscConfig+0x7ac>)
 8006154:	f043 0301 	orr.w	r3, r3, #1
 8006158:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3730      	adds	r7, #48	@ 0x30
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	58024400 	.word	0x58024400
 8006168:	ffff0007 	.word	0xffff0007

0800616c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e19c      	b.n	80064ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006180:	4b8a      	ldr	r3, [pc, #552]	@ (80063ac <HAL_RCC_ClockConfig+0x240>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d910      	bls.n	80061b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618e:	4b87      	ldr	r3, [pc, #540]	@ (80063ac <HAL_RCC_ClockConfig+0x240>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f023 020f 	bic.w	r2, r3, #15
 8006196:	4985      	ldr	r1, [pc, #532]	@ (80063ac <HAL_RCC_ClockConfig+0x240>)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	4313      	orrs	r3, r2
 800619c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800619e:	4b83      	ldr	r3, [pc, #524]	@ (80063ac <HAL_RCC_ClockConfig+0x240>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 030f 	and.w	r3, r3, #15
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d001      	beq.n	80061b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e184      	b.n	80064ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d010      	beq.n	80061de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	691a      	ldr	r2, [r3, #16]
 80061c0:	4b7b      	ldr	r3, [pc, #492]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d908      	bls.n	80061de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061cc:	4b78      	ldr	r3, [pc, #480]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	4975      	ldr	r1, [pc, #468]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d010      	beq.n	800620c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	695a      	ldr	r2, [r3, #20]
 80061ee:	4b70      	ldr	r3, [pc, #448]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d908      	bls.n	800620c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80061fa:	4b6d      	ldr	r3, [pc, #436]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	496a      	ldr	r1, [pc, #424]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 8006208:	4313      	orrs	r3, r2
 800620a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	2b00      	cmp	r3, #0
 8006216:	d010      	beq.n	800623a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699a      	ldr	r2, [r3, #24]
 800621c:	4b64      	ldr	r3, [pc, #400]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006224:	429a      	cmp	r2, r3
 8006226:	d908      	bls.n	800623a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006228:	4b61      	ldr	r3, [pc, #388]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	495e      	ldr	r1, [pc, #376]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 8006236:	4313      	orrs	r3, r2
 8006238:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0320 	and.w	r3, r3, #32
 8006242:	2b00      	cmp	r3, #0
 8006244:	d010      	beq.n	8006268 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	69da      	ldr	r2, [r3, #28]
 800624a:	4b59      	ldr	r3, [pc, #356]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006252:	429a      	cmp	r2, r3
 8006254:	d908      	bls.n	8006268 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006256:	4b56      	ldr	r3, [pc, #344]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	4953      	ldr	r1, [pc, #332]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 8006264:	4313      	orrs	r3, r2
 8006266:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d010      	beq.n	8006296 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	4b4d      	ldr	r3, [pc, #308]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	f003 030f 	and.w	r3, r3, #15
 8006280:	429a      	cmp	r2, r3
 8006282:	d908      	bls.n	8006296 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006284:	4b4a      	ldr	r3, [pc, #296]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	f023 020f 	bic.w	r2, r3, #15
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	4947      	ldr	r1, [pc, #284]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 8006292:	4313      	orrs	r3, r2
 8006294:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d055      	beq.n	800634e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80062a2:	4b43      	ldr	r3, [pc, #268]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	4940      	ldr	r1, [pc, #256]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d107      	bne.n	80062cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062bc:	4b3c      	ldr	r3, [pc, #240]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d121      	bne.n	800630c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0f6      	b.n	80064ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d107      	bne.n	80062e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062d4:	4b36      	ldr	r3, [pc, #216]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d115      	bne.n	800630c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e0ea      	b.n	80064ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d107      	bne.n	80062fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062ec:	4b30      	ldr	r3, [pc, #192]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d109      	bne.n	800630c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e0de      	b.n	80064ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062fc:	4b2c      	ldr	r3, [pc, #176]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e0d6      	b.n	80064ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800630c:	4b28      	ldr	r3, [pc, #160]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f023 0207 	bic.w	r2, r3, #7
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	4925      	ldr	r1, [pc, #148]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 800631a:	4313      	orrs	r3, r2
 800631c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800631e:	f7fc f891 	bl	8002444 <HAL_GetTick>
 8006322:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006324:	e00a      	b.n	800633c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006326:	f7fc f88d 	bl	8002444 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006334:	4293      	cmp	r3, r2
 8006336:	d901      	bls.n	800633c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e0be      	b.n	80064ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800633c:	4b1c      	ldr	r3, [pc, #112]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	429a      	cmp	r2, r3
 800634c:	d1eb      	bne.n	8006326 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d010      	beq.n	800637c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	4b14      	ldr	r3, [pc, #80]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	429a      	cmp	r2, r3
 8006368:	d208      	bcs.n	800637c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800636a:	4b11      	ldr	r3, [pc, #68]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	f023 020f 	bic.w	r2, r3, #15
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	490e      	ldr	r1, [pc, #56]	@ (80063b0 <HAL_RCC_ClockConfig+0x244>)
 8006378:	4313      	orrs	r3, r2
 800637a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800637c:	4b0b      	ldr	r3, [pc, #44]	@ (80063ac <HAL_RCC_ClockConfig+0x240>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 030f 	and.w	r3, r3, #15
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d214      	bcs.n	80063b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800638a:	4b08      	ldr	r3, [pc, #32]	@ (80063ac <HAL_RCC_ClockConfig+0x240>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f023 020f 	bic.w	r2, r3, #15
 8006392:	4906      	ldr	r1, [pc, #24]	@ (80063ac <HAL_RCC_ClockConfig+0x240>)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	4313      	orrs	r3, r2
 8006398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800639a:	4b04      	ldr	r3, [pc, #16]	@ (80063ac <HAL_RCC_ClockConfig+0x240>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d005      	beq.n	80063b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e086      	b.n	80064ba <HAL_RCC_ClockConfig+0x34e>
 80063ac:	52002000 	.word	0x52002000
 80063b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d010      	beq.n	80063e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	4b3f      	ldr	r3, [pc, #252]	@ (80064c4 <HAL_RCC_ClockConfig+0x358>)
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d208      	bcs.n	80063e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063d0:	4b3c      	ldr	r3, [pc, #240]	@ (80064c4 <HAL_RCC_ClockConfig+0x358>)
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	4939      	ldr	r1, [pc, #228]	@ (80064c4 <HAL_RCC_ClockConfig+0x358>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d010      	beq.n	8006410 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695a      	ldr	r2, [r3, #20]
 80063f2:	4b34      	ldr	r3, [pc, #208]	@ (80064c4 <HAL_RCC_ClockConfig+0x358>)
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d208      	bcs.n	8006410 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063fe:	4b31      	ldr	r3, [pc, #196]	@ (80064c4 <HAL_RCC_ClockConfig+0x358>)
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	492e      	ldr	r1, [pc, #184]	@ (80064c4 <HAL_RCC_ClockConfig+0x358>)
 800640c:	4313      	orrs	r3, r2
 800640e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0310 	and.w	r3, r3, #16
 8006418:	2b00      	cmp	r3, #0
 800641a:	d010      	beq.n	800643e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699a      	ldr	r2, [r3, #24]
 8006420:	4b28      	ldr	r3, [pc, #160]	@ (80064c4 <HAL_RCC_ClockConfig+0x358>)
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006428:	429a      	cmp	r2, r3
 800642a:	d208      	bcs.n	800643e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800642c:	4b25      	ldr	r3, [pc, #148]	@ (80064c4 <HAL_RCC_ClockConfig+0x358>)
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	4922      	ldr	r1, [pc, #136]	@ (80064c4 <HAL_RCC_ClockConfig+0x358>)
 800643a:	4313      	orrs	r3, r2
 800643c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0320 	and.w	r3, r3, #32
 8006446:	2b00      	cmp	r3, #0
 8006448:	d010      	beq.n	800646c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69da      	ldr	r2, [r3, #28]
 800644e:	4b1d      	ldr	r3, [pc, #116]	@ (80064c4 <HAL_RCC_ClockConfig+0x358>)
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006456:	429a      	cmp	r2, r3
 8006458:	d208      	bcs.n	800646c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800645a:	4b1a      	ldr	r3, [pc, #104]	@ (80064c4 <HAL_RCC_ClockConfig+0x358>)
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	4917      	ldr	r1, [pc, #92]	@ (80064c4 <HAL_RCC_ClockConfig+0x358>)
 8006468:	4313      	orrs	r3, r2
 800646a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800646c:	f000 f834 	bl	80064d8 <HAL_RCC_GetSysClockFreq>
 8006470:	4602      	mov	r2, r0
 8006472:	4b14      	ldr	r3, [pc, #80]	@ (80064c4 <HAL_RCC_ClockConfig+0x358>)
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	0a1b      	lsrs	r3, r3, #8
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	4912      	ldr	r1, [pc, #72]	@ (80064c8 <HAL_RCC_ClockConfig+0x35c>)
 800647e:	5ccb      	ldrb	r3, [r1, r3]
 8006480:	f003 031f 	and.w	r3, r3, #31
 8006484:	fa22 f303 	lsr.w	r3, r2, r3
 8006488:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800648a:	4b0e      	ldr	r3, [pc, #56]	@ (80064c4 <HAL_RCC_ClockConfig+0x358>)
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	4a0d      	ldr	r2, [pc, #52]	@ (80064c8 <HAL_RCC_ClockConfig+0x35c>)
 8006494:	5cd3      	ldrb	r3, [r2, r3]
 8006496:	f003 031f 	and.w	r3, r3, #31
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	fa22 f303 	lsr.w	r3, r2, r3
 80064a0:	4a0a      	ldr	r2, [pc, #40]	@ (80064cc <HAL_RCC_ClockConfig+0x360>)
 80064a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064a4:	4a0a      	ldr	r2, [pc, #40]	@ (80064d0 <HAL_RCC_ClockConfig+0x364>)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80064aa:	4b0a      	ldr	r3, [pc, #40]	@ (80064d4 <HAL_RCC_ClockConfig+0x368>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fb ff7e 	bl	80023b0 <HAL_InitTick>
 80064b4:	4603      	mov	r3, r0
 80064b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	58024400 	.word	0x58024400
 80064c8:	0800adf4 	.word	0x0800adf4
 80064cc:	24000004 	.word	0x24000004
 80064d0:	24000000 	.word	0x24000000
 80064d4:	24000008 	.word	0x24000008

080064d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	b089      	sub	sp, #36	@ 0x24
 80064dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064de:	4bb3      	ldr	r3, [pc, #716]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064e6:	2b18      	cmp	r3, #24
 80064e8:	f200 8155 	bhi.w	8006796 <HAL_RCC_GetSysClockFreq+0x2be>
 80064ec:	a201      	add	r2, pc, #4	@ (adr r2, 80064f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80064ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f2:	bf00      	nop
 80064f4:	08006559 	.word	0x08006559
 80064f8:	08006797 	.word	0x08006797
 80064fc:	08006797 	.word	0x08006797
 8006500:	08006797 	.word	0x08006797
 8006504:	08006797 	.word	0x08006797
 8006508:	08006797 	.word	0x08006797
 800650c:	08006797 	.word	0x08006797
 8006510:	08006797 	.word	0x08006797
 8006514:	0800657f 	.word	0x0800657f
 8006518:	08006797 	.word	0x08006797
 800651c:	08006797 	.word	0x08006797
 8006520:	08006797 	.word	0x08006797
 8006524:	08006797 	.word	0x08006797
 8006528:	08006797 	.word	0x08006797
 800652c:	08006797 	.word	0x08006797
 8006530:	08006797 	.word	0x08006797
 8006534:	08006585 	.word	0x08006585
 8006538:	08006797 	.word	0x08006797
 800653c:	08006797 	.word	0x08006797
 8006540:	08006797 	.word	0x08006797
 8006544:	08006797 	.word	0x08006797
 8006548:	08006797 	.word	0x08006797
 800654c:	08006797 	.word	0x08006797
 8006550:	08006797 	.word	0x08006797
 8006554:	0800658b 	.word	0x0800658b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006558:	4b94      	ldr	r3, [pc, #592]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0320 	and.w	r3, r3, #32
 8006560:	2b00      	cmp	r3, #0
 8006562:	d009      	beq.n	8006578 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006564:	4b91      	ldr	r3, [pc, #580]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	08db      	lsrs	r3, r3, #3
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	4a90      	ldr	r2, [pc, #576]	@ (80067b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006570:	fa22 f303 	lsr.w	r3, r2, r3
 8006574:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006576:	e111      	b.n	800679c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006578:	4b8d      	ldr	r3, [pc, #564]	@ (80067b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800657a:	61bb      	str	r3, [r7, #24]
      break;
 800657c:	e10e      	b.n	800679c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800657e:	4b8d      	ldr	r3, [pc, #564]	@ (80067b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006580:	61bb      	str	r3, [r7, #24]
      break;
 8006582:	e10b      	b.n	800679c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006584:	4b8c      	ldr	r3, [pc, #560]	@ (80067b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006586:	61bb      	str	r3, [r7, #24]
      break;
 8006588:	e108      	b.n	800679c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800658a:	4b88      	ldr	r3, [pc, #544]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800658c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006594:	4b85      	ldr	r3, [pc, #532]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006598:	091b      	lsrs	r3, r3, #4
 800659a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800659e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80065a0:	4b82      	ldr	r3, [pc, #520]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80065aa:	4b80      	ldr	r3, [pc, #512]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ae:	08db      	lsrs	r3, r3, #3
 80065b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	fb02 f303 	mul.w	r3, r2, r3
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 80e1 	beq.w	8006790 <HAL_RCC_GetSysClockFreq+0x2b8>
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	f000 8083 	beq.w	80066dc <HAL_RCC_GetSysClockFreq+0x204>
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b02      	cmp	r3, #2
 80065da:	f200 80a1 	bhi.w	8006720 <HAL_RCC_GetSysClockFreq+0x248>
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_RCC_GetSysClockFreq+0x114>
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d056      	beq.n	8006698 <HAL_RCC_GetSysClockFreq+0x1c0>
 80065ea:	e099      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ec:	4b6f      	ldr	r3, [pc, #444]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d02d      	beq.n	8006654 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065f8:	4b6c      	ldr	r3, [pc, #432]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	08db      	lsrs	r3, r3, #3
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	4a6b      	ldr	r2, [pc, #428]	@ (80067b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006604:	fa22 f303 	lsr.w	r3, r2, r3
 8006608:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	ee07 3a90 	vmov	s15, r3
 8006610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	ee07 3a90 	vmov	s15, r3
 800661a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006622:	4b62      	ldr	r3, [pc, #392]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006632:	ed97 6a02 	vldr	s12, [r7, #8]
 8006636:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80067bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800663a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800663e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800664a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800664e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006652:	e087      	b.n	8006764 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	ee07 3a90 	vmov	s15, r3
 800665a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80067c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006666:	4b51      	ldr	r3, [pc, #324]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800666a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666e:	ee07 3a90 	vmov	s15, r3
 8006672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006676:	ed97 6a02 	vldr	s12, [r7, #8]
 800667a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80067bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800667e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800668a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800668e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006692:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006696:	e065      	b.n	8006764 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80067c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80066a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066aa:	4b40      	ldr	r3, [pc, #256]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80066be:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80067bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80066c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066da:	e043      	b.n	8006764 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80067c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80066ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ee:	4b2f      	ldr	r3, [pc, #188]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006702:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80067bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800670a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800670e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800671e:	e021      	b.n	8006764 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80067c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800672e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006732:	4b1e      	ldr	r3, [pc, #120]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006742:	ed97 6a02 	vldr	s12, [r7, #8]
 8006746:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80067bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800674a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800674e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800675a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800675e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006762:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006764:	4b11      	ldr	r3, [pc, #68]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006768:	0a5b      	lsrs	r3, r3, #9
 800676a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800676e:	3301      	adds	r3, #1
 8006770:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	ee07 3a90 	vmov	s15, r3
 8006778:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800677c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006788:	ee17 3a90 	vmov	r3, s15
 800678c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800678e:	e005      	b.n	800679c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	61bb      	str	r3, [r7, #24]
      break;
 8006794:	e002      	b.n	800679c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006796:	4b07      	ldr	r3, [pc, #28]	@ (80067b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006798:	61bb      	str	r3, [r7, #24]
      break;
 800679a:	bf00      	nop
  }

  return sysclockfreq;
 800679c:	69bb      	ldr	r3, [r7, #24]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3724      	adds	r7, #36	@ 0x24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	58024400 	.word	0x58024400
 80067b0:	03d09000 	.word	0x03d09000
 80067b4:	003d0900 	.word	0x003d0900
 80067b8:	017d7840 	.word	0x017d7840
 80067bc:	46000000 	.word	0x46000000
 80067c0:	4c742400 	.word	0x4c742400
 80067c4:	4a742400 	.word	0x4a742400
 80067c8:	4bbebc20 	.word	0x4bbebc20

080067cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80067d2:	f7ff fe81 	bl	80064d8 <HAL_RCC_GetSysClockFreq>
 80067d6:	4602      	mov	r2, r0
 80067d8:	4b10      	ldr	r3, [pc, #64]	@ (800681c <HAL_RCC_GetHCLKFreq+0x50>)
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	0a1b      	lsrs	r3, r3, #8
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	490f      	ldr	r1, [pc, #60]	@ (8006820 <HAL_RCC_GetHCLKFreq+0x54>)
 80067e4:	5ccb      	ldrb	r3, [r1, r3]
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	fa22 f303 	lsr.w	r3, r2, r3
 80067ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80067f0:	4b0a      	ldr	r3, [pc, #40]	@ (800681c <HAL_RCC_GetHCLKFreq+0x50>)
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	f003 030f 	and.w	r3, r3, #15
 80067f8:	4a09      	ldr	r2, [pc, #36]	@ (8006820 <HAL_RCC_GetHCLKFreq+0x54>)
 80067fa:	5cd3      	ldrb	r3, [r2, r3]
 80067fc:	f003 031f 	and.w	r3, r3, #31
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	fa22 f303 	lsr.w	r3, r2, r3
 8006806:	4a07      	ldr	r2, [pc, #28]	@ (8006824 <HAL_RCC_GetHCLKFreq+0x58>)
 8006808:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800680a:	4a07      	ldr	r2, [pc, #28]	@ (8006828 <HAL_RCC_GetHCLKFreq+0x5c>)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006810:	4b04      	ldr	r3, [pc, #16]	@ (8006824 <HAL_RCC_GetHCLKFreq+0x58>)
 8006812:	681b      	ldr	r3, [r3, #0]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	58024400 	.word	0x58024400
 8006820:	0800adf4 	.word	0x0800adf4
 8006824:	24000004 	.word	0x24000004
 8006828:	24000000 	.word	0x24000000

0800682c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006830:	f7ff ffcc 	bl	80067cc <HAL_RCC_GetHCLKFreq>
 8006834:	4602      	mov	r2, r0
 8006836:	4b06      	ldr	r3, [pc, #24]	@ (8006850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	091b      	lsrs	r3, r3, #4
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	4904      	ldr	r1, [pc, #16]	@ (8006854 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006842:	5ccb      	ldrb	r3, [r1, r3]
 8006844:	f003 031f 	and.w	r3, r3, #31
 8006848:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800684c:	4618      	mov	r0, r3
 800684e:	bd80      	pop	{r7, pc}
 8006850:	58024400 	.word	0x58024400
 8006854:	0800adf4 	.word	0x0800adf4

08006858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800685c:	f7ff ffb6 	bl	80067cc <HAL_RCC_GetHCLKFreq>
 8006860:	4602      	mov	r2, r0
 8006862:	4b06      	ldr	r3, [pc, #24]	@ (800687c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	0a1b      	lsrs	r3, r3, #8
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	4904      	ldr	r1, [pc, #16]	@ (8006880 <HAL_RCC_GetPCLK2Freq+0x28>)
 800686e:	5ccb      	ldrb	r3, [r1, r3]
 8006870:	f003 031f 	and.w	r3, r3, #31
 8006874:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006878:	4618      	mov	r0, r3
 800687a:	bd80      	pop	{r7, pc}
 800687c:	58024400 	.word	0x58024400
 8006880:	0800adf4 	.word	0x0800adf4

08006884 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006888:	b0c6      	sub	sp, #280	@ 0x118
 800688a:	af00      	add	r7, sp, #0
 800688c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006890:	2300      	movs	r3, #0
 8006892:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006896:	2300      	movs	r3, #0
 8006898:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800689c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80068a8:	2500      	movs	r5, #0
 80068aa:	ea54 0305 	orrs.w	r3, r4, r5
 80068ae:	d049      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068ba:	d02f      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80068bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068c0:	d828      	bhi.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80068c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068c6:	d01a      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80068c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068cc:	d822      	bhi.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80068d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068d6:	d007      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80068d8:	e01c      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068da:	4bab      	ldr	r3, [pc, #684]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068de:	4aaa      	ldr	r2, [pc, #680]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068e6:	e01a      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ec:	3308      	adds	r3, #8
 80068ee:	2102      	movs	r1, #2
 80068f0:	4618      	mov	r0, r3
 80068f2:	f001 fc25 	bl	8008140 <RCCEx_PLL2_Config>
 80068f6:	4603      	mov	r3, r0
 80068f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068fc:	e00f      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006902:	3328      	adds	r3, #40	@ 0x28
 8006904:	2102      	movs	r1, #2
 8006906:	4618      	mov	r0, r3
 8006908:	f001 fccc 	bl	80082a4 <RCCEx_PLL3_Config>
 800690c:	4603      	mov	r3, r0
 800690e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006912:	e004      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800691a:	e000      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800691c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800691e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10a      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006926:	4b98      	ldr	r3, [pc, #608]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800692a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800692e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006934:	4a94      	ldr	r2, [pc, #592]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006936:	430b      	orrs	r3, r1
 8006938:	6513      	str	r3, [r2, #80]	@ 0x50
 800693a:	e003      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006940:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006950:	f04f 0900 	mov.w	r9, #0
 8006954:	ea58 0309 	orrs.w	r3, r8, r9
 8006958:	d047      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800695a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006960:	2b04      	cmp	r3, #4
 8006962:	d82a      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006964:	a201      	add	r2, pc, #4	@ (adr r2, 800696c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696a:	bf00      	nop
 800696c:	08006981 	.word	0x08006981
 8006970:	0800698f 	.word	0x0800698f
 8006974:	080069a5 	.word	0x080069a5
 8006978:	080069c3 	.word	0x080069c3
 800697c:	080069c3 	.word	0x080069c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006980:	4b81      	ldr	r3, [pc, #516]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006984:	4a80      	ldr	r2, [pc, #512]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800698a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800698c:	e01a      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800698e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006992:	3308      	adds	r3, #8
 8006994:	2100      	movs	r1, #0
 8006996:	4618      	mov	r0, r3
 8006998:	f001 fbd2 	bl	8008140 <RCCEx_PLL2_Config>
 800699c:	4603      	mov	r3, r0
 800699e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069a2:	e00f      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a8:	3328      	adds	r3, #40	@ 0x28
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 fc79 	bl	80082a4 <RCCEx_PLL3_Config>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069b8:	e004      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069c0:	e000      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80069c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10a      	bne.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069cc:	4b6e      	ldr	r3, [pc, #440]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069d0:	f023 0107 	bic.w	r1, r3, #7
 80069d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069da:	4a6b      	ldr	r2, [pc, #428]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069dc:	430b      	orrs	r3, r1
 80069de:	6513      	str	r3, [r2, #80]	@ 0x50
 80069e0:	e003      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80069ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80069f6:	f04f 0b00 	mov.w	fp, #0
 80069fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80069fe:	d05b      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a08:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006a0c:	d03b      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006a0e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006a12:	d834      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006a14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a18:	d037      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006a1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a1e:	d82e      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006a20:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006a24:	d033      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006a26:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006a2a:	d828      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006a2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a30:	d01a      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006a32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a36:	d822      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006a3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a40:	d007      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006a42:	e01c      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a44:	4b50      	ldr	r3, [pc, #320]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a48:	4a4f      	ldr	r2, [pc, #316]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a50:	e01e      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a56:	3308      	adds	r3, #8
 8006a58:	2100      	movs	r1, #0
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 fb70 	bl	8008140 <RCCEx_PLL2_Config>
 8006a60:	4603      	mov	r3, r0
 8006a62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a66:	e013      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6c:	3328      	adds	r3, #40	@ 0x28
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4618      	mov	r0, r3
 8006a72:	f001 fc17 	bl	80082a4 <RCCEx_PLL3_Config>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a7c:	e008      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a84:	e004      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006a86:	bf00      	nop
 8006a88:	e002      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006a8a:	bf00      	nop
 8006a8c:	e000      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10b      	bne.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a98:	4b3b      	ldr	r3, [pc, #236]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a9c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006aa8:	4a37      	ldr	r2, [pc, #220]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006aaa:	430b      	orrs	r3, r1
 8006aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8006aae:	e003      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ab4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006ac4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006ace:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	d05d      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006adc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006ae0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006ae4:	d03b      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006ae6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006aea:	d834      	bhi.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006aec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006af0:	d037      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006af2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006af6:	d82e      	bhi.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006af8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006afc:	d033      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006afe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006b02:	d828      	bhi.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006b04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b08:	d01a      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006b0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b0e:	d822      	bhi.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b18:	d007      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006b1a:	e01c      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b20:	4a19      	ldr	r2, [pc, #100]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b28:	e01e      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2e:	3308      	adds	r3, #8
 8006b30:	2100      	movs	r1, #0
 8006b32:	4618      	mov	r0, r3
 8006b34:	f001 fb04 	bl	8008140 <RCCEx_PLL2_Config>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b3e:	e013      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b44:	3328      	adds	r3, #40	@ 0x28
 8006b46:	2100      	movs	r1, #0
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f001 fbab 	bl	80082a4 <RCCEx_PLL3_Config>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b54:	e008      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b5c:	e004      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006b5e:	bf00      	nop
 8006b60:	e002      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006b62:	bf00      	nop
 8006b64:	e000      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10d      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006b70:	4b05      	ldr	r3, [pc, #20]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b74:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006b80:	4a01      	ldr	r2, [pc, #4]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b82:	430b      	orrs	r3, r1
 8006b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b86:	e005      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006b88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006ba0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006baa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	d03a      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bba:	2b30      	cmp	r3, #48	@ 0x30
 8006bbc:	d01f      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006bbe:	2b30      	cmp	r3, #48	@ 0x30
 8006bc0:	d819      	bhi.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006bc2:	2b20      	cmp	r3, #32
 8006bc4:	d00c      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006bc6:	2b20      	cmp	r3, #32
 8006bc8:	d815      	bhi.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d019      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006bce:	2b10      	cmp	r3, #16
 8006bd0:	d111      	bne.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd2:	4baa      	ldr	r3, [pc, #680]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd6:	4aa9      	ldr	r2, [pc, #676]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006bde:	e011      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be4:	3308      	adds	r3, #8
 8006be6:	2102      	movs	r1, #2
 8006be8:	4618      	mov	r0, r3
 8006bea:	f001 faa9 	bl	8008140 <RCCEx_PLL2_Config>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006bf4:	e006      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006bfc:	e002      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006bfe:	bf00      	nop
 8006c00:	e000      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10a      	bne.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006c0c:	4b9b      	ldr	r3, [pc, #620]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c10:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c1a:	4a98      	ldr	r2, [pc, #608]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c20:	e003      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006c44:	460b      	mov	r3, r1
 8006c46:	4313      	orrs	r3, r2
 8006c48:	d051      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c54:	d035      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006c56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c5a:	d82e      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006c5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c60:	d031      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006c62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c66:	d828      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c6c:	d01a      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c72:	d822      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c7c:	d007      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006c7e:	e01c      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c80:	4b7e      	ldr	r3, [pc, #504]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c84:	4a7d      	ldr	r2, [pc, #500]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c8c:	e01c      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c92:	3308      	adds	r3, #8
 8006c94:	2100      	movs	r1, #0
 8006c96:	4618      	mov	r0, r3
 8006c98:	f001 fa52 	bl	8008140 <RCCEx_PLL2_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ca2:	e011      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca8:	3328      	adds	r3, #40	@ 0x28
 8006caa:	2100      	movs	r1, #0
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 faf9 	bl	80082a4 <RCCEx_PLL3_Config>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006cb8:	e006      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cc0:	e002      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006cc2:	bf00      	nop
 8006cc4:	e000      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006cd0:	4b6a      	ldr	r3, [pc, #424]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cd4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cde:	4a67      	ldr	r2, [pc, #412]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ce0:	430b      	orrs	r3, r1
 8006ce2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ce4:	e003      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006cfa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d04:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	d053      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d18:	d033      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006d1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d1e:	d82c      	bhi.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006d20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d24:	d02f      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006d26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d2a:	d826      	bhi.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006d2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d30:	d02b      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006d32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d36:	d820      	bhi.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006d38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d3c:	d012      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006d3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d42:	d81a      	bhi.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d022      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d4c:	d115      	bne.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d52:	3308      	adds	r3, #8
 8006d54:	2101      	movs	r1, #1
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 f9f2 	bl	8008140 <RCCEx_PLL2_Config>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d62:	e015      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d68:	3328      	adds	r3, #40	@ 0x28
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f001 fa99 	bl	80082a4 <RCCEx_PLL3_Config>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d78:	e00a      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d80:	e006      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006d82:	bf00      	nop
 8006d84:	e004      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006d86:	bf00      	nop
 8006d88:	e002      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006d8a:	bf00      	nop
 8006d8c:	e000      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10a      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d98:	4b38      	ldr	r3, [pc, #224]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d9c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006da6:	4a35      	ldr	r2, [pc, #212]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006da8:	430b      	orrs	r3, r1
 8006daa:	6513      	str	r3, [r2, #80]	@ 0x50
 8006dac:	e003      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006dcc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	d058      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006de2:	d033      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006de8:	d82c      	bhi.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dee:	d02f      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006df4:	d826      	bhi.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006df6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006dfa:	d02b      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006dfc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e00:	d820      	bhi.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006e02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e06:	d012      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006e08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e0c:	d81a      	bhi.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d022      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006e12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e16:	d115      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	2101      	movs	r1, #1
 8006e20:	4618      	mov	r0, r3
 8006e22:	f001 f98d 	bl	8008140 <RCCEx_PLL2_Config>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e2c:	e015      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e32:	3328      	adds	r3, #40	@ 0x28
 8006e34:	2101      	movs	r1, #1
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 fa34 	bl	80082a4 <RCCEx_PLL3_Config>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e42:	e00a      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e4a:	e006      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006e4c:	bf00      	nop
 8006e4e:	e004      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006e50:	bf00      	nop
 8006e52:	e002      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006e54:	bf00      	nop
 8006e56:	e000      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10e      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e62:	4b06      	ldr	r3, [pc, #24]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e66:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e72:	4a02      	ldr	r2, [pc, #8]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e74:	430b      	orrs	r3, r1
 8006e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e78:	e006      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006e7a:	bf00      	nop
 8006e7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006e94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	d037      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006eb2:	d00e      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006eb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006eb8:	d816      	bhi.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d018      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006ebe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ec2:	d111      	bne.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec4:	4bc4      	ldr	r3, [pc, #784]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec8:	4ac3      	ldr	r2, [pc, #780]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ece:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006ed0:	e00f      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	2101      	movs	r1, #1
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 f930 	bl	8008140 <RCCEx_PLL2_Config>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006ee6:	e004      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006eee:	e000      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ef2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006efa:	4bb7      	ldr	r3, [pc, #732]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006efe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f08:	4ab3      	ldr	r2, [pc, #716]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f0a:	430b      	orrs	r3, r1
 8006f0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f0e:	e003      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006f24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006f32:	460b      	mov	r3, r1
 8006f34:	4313      	orrs	r3, r2
 8006f36:	d039      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d81c      	bhi.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006f42:	a201      	add	r2, pc, #4	@ (adr r2, 8006f48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f48:	08006f85 	.word	0x08006f85
 8006f4c:	08006f59 	.word	0x08006f59
 8006f50:	08006f67 	.word	0x08006f67
 8006f54:	08006f85 	.word	0x08006f85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f58:	4b9f      	ldr	r3, [pc, #636]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5c:	4a9e      	ldr	r2, [pc, #632]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f64:	e00f      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	2102      	movs	r1, #2
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f001 f8e6 	bl	8008140 <RCCEx_PLL2_Config>
 8006f74:	4603      	mov	r3, r0
 8006f76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f7a:	e004      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f82:	e000      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f8e:	4b92      	ldr	r3, [pc, #584]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f92:	f023 0103 	bic.w	r1, r3, #3
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f9c:	4a8e      	ldr	r2, [pc, #568]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f9e:	430b      	orrs	r3, r1
 8006fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006fa2:	e003      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fc2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	f000 8099 	beq.w	8007100 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fce:	4b83      	ldr	r3, [pc, #524]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a82      	ldr	r2, [pc, #520]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fda:	f7fb fa33 	bl	8002444 <HAL_GetTick>
 8006fde:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fe2:	e00b      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fe4:	f7fb fa2e 	bl	8002444 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b64      	cmp	r3, #100	@ 0x64
 8006ff2:	d903      	bls.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ffa:	e005      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ffc:	4b77      	ldr	r3, [pc, #476]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007004:	2b00      	cmp	r3, #0
 8007006:	d0ed      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007008:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800700c:	2b00      	cmp	r3, #0
 800700e:	d173      	bne.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007010:	4b71      	ldr	r3, [pc, #452]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007012:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007018:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800701c:	4053      	eors	r3, r2
 800701e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007022:	2b00      	cmp	r3, #0
 8007024:	d015      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007026:	4b6c      	ldr	r3, [pc, #432]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800702e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007032:	4b69      	ldr	r3, [pc, #420]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007036:	4a68      	ldr	r2, [pc, #416]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800703c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800703e:	4b66      	ldr	r3, [pc, #408]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007042:	4a65      	ldr	r2, [pc, #404]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007048:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800704a:	4a63      	ldr	r2, [pc, #396]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800704c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007050:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007056:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800705a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800705e:	d118      	bne.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007060:	f7fb f9f0 	bl	8002444 <HAL_GetTick>
 8007064:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007068:	e00d      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800706a:	f7fb f9eb 	bl	8002444 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007074:	1ad2      	subs	r2, r2, r3
 8007076:	f241 3388 	movw	r3, #5000	@ 0x1388
 800707a:	429a      	cmp	r2, r3
 800707c:	d903      	bls.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007084:	e005      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007086:	4b54      	ldr	r3, [pc, #336]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0eb      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007092:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007096:	2b00      	cmp	r3, #0
 8007098:	d129      	bne.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800709a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800709e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80070a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070aa:	d10e      	bne.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x846>
 80070ac:	4b4a      	ldr	r3, [pc, #296]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80070b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80070bc:	091a      	lsrs	r2, r3, #4
 80070be:	4b48      	ldr	r3, [pc, #288]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80070c0:	4013      	ands	r3, r2
 80070c2:	4a45      	ldr	r2, [pc, #276]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070c4:	430b      	orrs	r3, r1
 80070c6:	6113      	str	r3, [r2, #16]
 80070c8:	e005      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80070ca:	4b43      	ldr	r3, [pc, #268]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	4a42      	ldr	r2, [pc, #264]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80070d4:	6113      	str	r3, [r2, #16]
 80070d6:	4b40      	ldr	r3, [pc, #256]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070d8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80070da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80070e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070e6:	4a3c      	ldr	r2, [pc, #240]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070e8:	430b      	orrs	r3, r1
 80070ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80070ec:	e008      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80070f6:	e003      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f002 0301 	and.w	r3, r2, #1
 800710c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007110:	2300      	movs	r3, #0
 8007112:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007116:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800711a:	460b      	mov	r3, r1
 800711c:	4313      	orrs	r3, r2
 800711e:	f000 808f 	beq.w	8007240 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007126:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007128:	2b28      	cmp	r3, #40	@ 0x28
 800712a:	d871      	bhi.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800712c:	a201      	add	r2, pc, #4	@ (adr r2, 8007134 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800712e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007132:	bf00      	nop
 8007134:	08007219 	.word	0x08007219
 8007138:	08007211 	.word	0x08007211
 800713c:	08007211 	.word	0x08007211
 8007140:	08007211 	.word	0x08007211
 8007144:	08007211 	.word	0x08007211
 8007148:	08007211 	.word	0x08007211
 800714c:	08007211 	.word	0x08007211
 8007150:	08007211 	.word	0x08007211
 8007154:	080071e5 	.word	0x080071e5
 8007158:	08007211 	.word	0x08007211
 800715c:	08007211 	.word	0x08007211
 8007160:	08007211 	.word	0x08007211
 8007164:	08007211 	.word	0x08007211
 8007168:	08007211 	.word	0x08007211
 800716c:	08007211 	.word	0x08007211
 8007170:	08007211 	.word	0x08007211
 8007174:	080071fb 	.word	0x080071fb
 8007178:	08007211 	.word	0x08007211
 800717c:	08007211 	.word	0x08007211
 8007180:	08007211 	.word	0x08007211
 8007184:	08007211 	.word	0x08007211
 8007188:	08007211 	.word	0x08007211
 800718c:	08007211 	.word	0x08007211
 8007190:	08007211 	.word	0x08007211
 8007194:	08007219 	.word	0x08007219
 8007198:	08007211 	.word	0x08007211
 800719c:	08007211 	.word	0x08007211
 80071a0:	08007211 	.word	0x08007211
 80071a4:	08007211 	.word	0x08007211
 80071a8:	08007211 	.word	0x08007211
 80071ac:	08007211 	.word	0x08007211
 80071b0:	08007211 	.word	0x08007211
 80071b4:	08007219 	.word	0x08007219
 80071b8:	08007211 	.word	0x08007211
 80071bc:	08007211 	.word	0x08007211
 80071c0:	08007211 	.word	0x08007211
 80071c4:	08007211 	.word	0x08007211
 80071c8:	08007211 	.word	0x08007211
 80071cc:	08007211 	.word	0x08007211
 80071d0:	08007211 	.word	0x08007211
 80071d4:	08007219 	.word	0x08007219
 80071d8:	58024400 	.word	0x58024400
 80071dc:	58024800 	.word	0x58024800
 80071e0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e8:	3308      	adds	r3, #8
 80071ea:	2101      	movs	r1, #1
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 ffa7 	bl	8008140 <RCCEx_PLL2_Config>
 80071f2:	4603      	mov	r3, r0
 80071f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80071f8:	e00f      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071fe:	3328      	adds	r3, #40	@ 0x28
 8007200:	2101      	movs	r1, #1
 8007202:	4618      	mov	r0, r3
 8007204:	f001 f84e 	bl	80082a4 <RCCEx_PLL3_Config>
 8007208:	4603      	mov	r3, r0
 800720a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800720e:	e004      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007216:	e000      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800721a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10a      	bne.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007222:	4bbf      	ldr	r3, [pc, #764]	@ (8007520 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007226:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800722a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800722e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007230:	4abb      	ldr	r2, [pc, #748]	@ (8007520 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007232:	430b      	orrs	r3, r1
 8007234:	6553      	str	r3, [r2, #84]	@ 0x54
 8007236:	e003      	b.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007238:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800723c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	f002 0302 	and.w	r3, r2, #2
 800724c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007250:	2300      	movs	r3, #0
 8007252:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007256:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800725a:	460b      	mov	r3, r1
 800725c:	4313      	orrs	r3, r2
 800725e:	d041      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007266:	2b05      	cmp	r3, #5
 8007268:	d824      	bhi.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800726a:	a201      	add	r2, pc, #4	@ (adr r2, 8007270 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800726c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007270:	080072bd 	.word	0x080072bd
 8007274:	08007289 	.word	0x08007289
 8007278:	0800729f 	.word	0x0800729f
 800727c:	080072bd 	.word	0x080072bd
 8007280:	080072bd 	.word	0x080072bd
 8007284:	080072bd 	.word	0x080072bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728c:	3308      	adds	r3, #8
 800728e:	2101      	movs	r1, #1
 8007290:	4618      	mov	r0, r3
 8007292:	f000 ff55 	bl	8008140 <RCCEx_PLL2_Config>
 8007296:	4603      	mov	r3, r0
 8007298:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800729c:	e00f      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800729e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a2:	3328      	adds	r3, #40	@ 0x28
 80072a4:	2101      	movs	r1, #1
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fffc 	bl	80082a4 <RCCEx_PLL3_Config>
 80072ac:	4603      	mov	r3, r0
 80072ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80072b2:	e004      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072ba:	e000      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80072bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80072c6:	4b96      	ldr	r3, [pc, #600]	@ (8007520 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ca:	f023 0107 	bic.w	r1, r3, #7
 80072ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072d4:	4a92      	ldr	r2, [pc, #584]	@ (8007520 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072d6:	430b      	orrs	r3, r1
 80072d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80072da:	e003      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	f002 0304 	and.w	r3, r2, #4
 80072f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80072f4:	2300      	movs	r3, #0
 80072f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072fa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80072fe:	460b      	mov	r3, r1
 8007300:	4313      	orrs	r3, r2
 8007302:	d044      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800730c:	2b05      	cmp	r3, #5
 800730e:	d825      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007310:	a201      	add	r2, pc, #4	@ (adr r2, 8007318 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007316:	bf00      	nop
 8007318:	08007365 	.word	0x08007365
 800731c:	08007331 	.word	0x08007331
 8007320:	08007347 	.word	0x08007347
 8007324:	08007365 	.word	0x08007365
 8007328:	08007365 	.word	0x08007365
 800732c:	08007365 	.word	0x08007365
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007334:	3308      	adds	r3, #8
 8007336:	2101      	movs	r1, #1
 8007338:	4618      	mov	r0, r3
 800733a:	f000 ff01 	bl	8008140 <RCCEx_PLL2_Config>
 800733e:	4603      	mov	r3, r0
 8007340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007344:	e00f      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734a:	3328      	adds	r3, #40	@ 0x28
 800734c:	2101      	movs	r1, #1
 800734e:	4618      	mov	r0, r3
 8007350:	f000 ffa8 	bl	80082a4 <RCCEx_PLL3_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800735a:	e004      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007362:	e000      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007366:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10b      	bne.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800736e:	4b6c      	ldr	r3, [pc, #432]	@ (8007520 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007372:	f023 0107 	bic.w	r1, r3, #7
 8007376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800737e:	4a68      	ldr	r2, [pc, #416]	@ (8007520 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007380:	430b      	orrs	r3, r1
 8007382:	6593      	str	r3, [r2, #88]	@ 0x58
 8007384:	e003      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007386:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800738a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800738e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f002 0320 	and.w	r3, r2, #32
 800739a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800739e:	2300      	movs	r3, #0
 80073a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80073a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80073a8:	460b      	mov	r3, r1
 80073aa:	4313      	orrs	r3, r2
 80073ac:	d055      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80073ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073ba:	d033      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80073bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073c0:	d82c      	bhi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c6:	d02f      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80073c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073cc:	d826      	bhi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80073ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073d2:	d02b      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80073d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073d8:	d820      	bhi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80073da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073de:	d012      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80073e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073e4:	d81a      	bhi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d022      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80073ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073ee:	d115      	bne.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f4:	3308      	adds	r3, #8
 80073f6:	2100      	movs	r1, #0
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 fea1 	bl	8008140 <RCCEx_PLL2_Config>
 80073fe:	4603      	mov	r3, r0
 8007400:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007404:	e015      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740a:	3328      	adds	r3, #40	@ 0x28
 800740c:	2102      	movs	r1, #2
 800740e:	4618      	mov	r0, r3
 8007410:	f000 ff48 	bl	80082a4 <RCCEx_PLL3_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800741a:	e00a      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007422:	e006      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007424:	bf00      	nop
 8007426:	e004      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007428:	bf00      	nop
 800742a:	e002      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800742c:	bf00      	nop
 800742e:	e000      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007432:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10b      	bne.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800743a:	4b39      	ldr	r3, [pc, #228]	@ (8007520 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800743c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800743e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007446:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800744a:	4a35      	ldr	r2, [pc, #212]	@ (8007520 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800744c:	430b      	orrs	r3, r1
 800744e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007450:	e003      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007452:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007456:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800745a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007466:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800746a:	2300      	movs	r3, #0
 800746c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007470:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007474:	460b      	mov	r3, r1
 8007476:	4313      	orrs	r3, r2
 8007478:	d058      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800747a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007482:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007486:	d033      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007488:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800748c:	d82c      	bhi.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800748e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007492:	d02f      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007498:	d826      	bhi.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800749a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800749e:	d02b      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80074a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074a4:	d820      	bhi.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80074a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074aa:	d012      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80074ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074b0:	d81a      	bhi.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d022      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80074b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074ba:	d115      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c0:	3308      	adds	r3, #8
 80074c2:	2100      	movs	r1, #0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fe3b 	bl	8008140 <RCCEx_PLL2_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80074d0:	e015      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d6:	3328      	adds	r3, #40	@ 0x28
 80074d8:	2102      	movs	r1, #2
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fee2 	bl	80082a4 <RCCEx_PLL3_Config>
 80074e0:	4603      	mov	r3, r0
 80074e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80074e6:	e00a      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074ee:	e006      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80074f0:	bf00      	nop
 80074f2:	e004      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80074f4:	bf00      	nop
 80074f6:	e002      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80074f8:	bf00      	nop
 80074fa:	e000      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80074fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10e      	bne.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007506:	4b06      	ldr	r3, [pc, #24]	@ (8007520 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800750a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800750e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007512:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007516:	4a02      	ldr	r2, [pc, #8]	@ (8007520 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007518:	430b      	orrs	r3, r1
 800751a:	6593      	str	r3, [r2, #88]	@ 0x58
 800751c:	e006      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800751e:	bf00      	nop
 8007520:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007528:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800752c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007534:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007538:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800753c:	2300      	movs	r3, #0
 800753e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007542:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007546:	460b      	mov	r3, r1
 8007548:	4313      	orrs	r3, r2
 800754a:	d055      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800754c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007550:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007554:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007558:	d033      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800755a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800755e:	d82c      	bhi.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007560:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007564:	d02f      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800756a:	d826      	bhi.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800756c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007570:	d02b      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007572:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007576:	d820      	bhi.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007578:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800757c:	d012      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800757e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007582:	d81a      	bhi.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d022      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007588:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800758c:	d115      	bne.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800758e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007592:	3308      	adds	r3, #8
 8007594:	2100      	movs	r1, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fdd2 	bl	8008140 <RCCEx_PLL2_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80075a2:	e015      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a8:	3328      	adds	r3, #40	@ 0x28
 80075aa:	2102      	movs	r1, #2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 fe79 	bl	80082a4 <RCCEx_PLL3_Config>
 80075b2:	4603      	mov	r3, r0
 80075b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80075b8:	e00a      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075c0:	e006      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80075c2:	bf00      	nop
 80075c4:	e004      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80075c6:	bf00      	nop
 80075c8:	e002      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80075ca:	bf00      	nop
 80075cc:	e000      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80075ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10b      	bne.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80075d8:	4ba0      	ldr	r3, [pc, #640]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075dc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80075e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075e8:	4a9c      	ldr	r2, [pc, #624]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075ea:	430b      	orrs	r3, r1
 80075ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80075ee:	e003      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80075f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	f002 0308 	and.w	r3, r2, #8
 8007604:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007608:	2300      	movs	r3, #0
 800760a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800760e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007612:	460b      	mov	r3, r1
 8007614:	4313      	orrs	r3, r2
 8007616:	d01e      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800761c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007624:	d10c      	bne.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762a:	3328      	adds	r3, #40	@ 0x28
 800762c:	2102      	movs	r1, #2
 800762e:	4618      	mov	r0, r3
 8007630:	f000 fe38 	bl	80082a4 <RCCEx_PLL3_Config>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007640:	4b86      	ldr	r3, [pc, #536]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007644:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800764c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007650:	4a82      	ldr	r2, [pc, #520]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007652:	430b      	orrs	r3, r1
 8007654:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	f002 0310 	and.w	r3, r2, #16
 8007662:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007666:	2300      	movs	r3, #0
 8007668:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800766c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007670:	460b      	mov	r3, r1
 8007672:	4313      	orrs	r3, r2
 8007674:	d01e      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800767e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007682:	d10c      	bne.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007688:	3328      	adds	r3, #40	@ 0x28
 800768a:	2102      	movs	r1, #2
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fe09 	bl	80082a4 <RCCEx_PLL3_Config>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800769e:	4b6f      	ldr	r3, [pc, #444]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80076a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076ae:	4a6b      	ldr	r2, [pc, #428]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076b0:	430b      	orrs	r3, r1
 80076b2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076bc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80076c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076c2:	2300      	movs	r3, #0
 80076c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076c6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80076ca:	460b      	mov	r3, r1
 80076cc:	4313      	orrs	r3, r2
 80076ce:	d03e      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80076d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80076d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076dc:	d022      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80076de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076e2:	d81b      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80076e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076ec:	d00b      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80076ee:	e015      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f4:	3308      	adds	r3, #8
 80076f6:	2100      	movs	r1, #0
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 fd21 	bl	8008140 <RCCEx_PLL2_Config>
 80076fe:	4603      	mov	r3, r0
 8007700:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007704:	e00f      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770a:	3328      	adds	r3, #40	@ 0x28
 800770c:	2102      	movs	r1, #2
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fdc8 	bl	80082a4 <RCCEx_PLL3_Config>
 8007714:	4603      	mov	r3, r0
 8007716:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800771a:	e004      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007722:	e000      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007726:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10b      	bne.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800772e:	4b4b      	ldr	r3, [pc, #300]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007732:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800773e:	4a47      	ldr	r2, [pc, #284]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007740:	430b      	orrs	r3, r1
 8007742:	6593      	str	r3, [r2, #88]	@ 0x58
 8007744:	e003      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007746:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800774a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800774e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007756:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800775a:	673b      	str	r3, [r7, #112]	@ 0x70
 800775c:	2300      	movs	r3, #0
 800775e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007760:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007764:	460b      	mov	r3, r1
 8007766:	4313      	orrs	r3, r2
 8007768:	d03b      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800776a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007772:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007776:	d01f      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007778:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800777c:	d818      	bhi.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800777e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007782:	d003      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007784:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007788:	d007      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800778a:	e011      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800778c:	4b33      	ldr	r3, [pc, #204]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800778e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007790:	4a32      	ldr	r2, [pc, #200]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007796:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007798:	e00f      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800779a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800779e:	3328      	adds	r3, #40	@ 0x28
 80077a0:	2101      	movs	r1, #1
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 fd7e 	bl	80082a4 <RCCEx_PLL3_Config>
 80077a8:	4603      	mov	r3, r0
 80077aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80077ae:	e004      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077b6:	e000      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80077b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10b      	bne.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077c2:	4b26      	ldr	r3, [pc, #152]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80077ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077d2:	4a22      	ldr	r2, [pc, #136]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077d4:	430b      	orrs	r3, r1
 80077d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80077d8:	e003      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80077e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80077ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077f0:	2300      	movs	r3, #0
 80077f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077f4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80077f8:	460b      	mov	r3, r1
 80077fa:	4313      	orrs	r3, r2
 80077fc:	d034      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80077fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800780c:	d007      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800780e:	e011      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007810:	4b12      	ldr	r3, [pc, #72]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007814:	4a11      	ldr	r2, [pc, #68]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800781a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800781c:	e00e      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800781e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007822:	3308      	adds	r3, #8
 8007824:	2102      	movs	r1, #2
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fc8a 	bl	8008140 <RCCEx_PLL2_Config>
 800782c:	4603      	mov	r3, r0
 800782e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007832:	e003      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800783a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800783c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10d      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007844:	4b05      	ldr	r3, [pc, #20]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007848:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800784c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007852:	4a02      	ldr	r2, [pc, #8]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007854:	430b      	orrs	r3, r1
 8007856:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007858:	e006      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800785a:	bf00      	nop
 800785c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007864:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007874:	663b      	str	r3, [r7, #96]	@ 0x60
 8007876:	2300      	movs	r3, #0
 8007878:	667b      	str	r3, [r7, #100]	@ 0x64
 800787a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800787e:	460b      	mov	r3, r1
 8007880:	4313      	orrs	r3, r2
 8007882:	d00c      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007888:	3328      	adds	r3, #40	@ 0x28
 800788a:	2102      	movs	r1, #2
 800788c:	4618      	mov	r0, r3
 800788e:	f000 fd09 	bl	80082a4 <RCCEx_PLL3_Config>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800789e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80078aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078ac:	2300      	movs	r3, #0
 80078ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078b0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80078b4:	460b      	mov	r3, r1
 80078b6:	4313      	orrs	r3, r2
 80078b8:	d036      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80078ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078c4:	d018      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80078c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078ca:	d811      	bhi.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80078cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078d0:	d014      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80078d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078d6:	d80b      	bhi.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d011      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80078dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078e0:	d106      	bne.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078e2:	4bb7      	ldr	r3, [pc, #732]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e6:	4ab6      	ldr	r2, [pc, #728]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80078ee:	e008      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078f6:	e004      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80078f8:	bf00      	nop
 80078fa:	e002      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80078fc:	bf00      	nop
 80078fe:	e000      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007902:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10a      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800790a:	4bad      	ldr	r3, [pc, #692]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800790c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800790e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007916:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007918:	4aa9      	ldr	r2, [pc, #676]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800791a:	430b      	orrs	r3, r1
 800791c:	6553      	str	r3, [r2, #84]	@ 0x54
 800791e:	e003      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007920:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007924:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800792c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007930:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007934:	653b      	str	r3, [r7, #80]	@ 0x50
 8007936:	2300      	movs	r3, #0
 8007938:	657b      	str	r3, [r7, #84]	@ 0x54
 800793a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800793e:	460b      	mov	r3, r1
 8007940:	4313      	orrs	r3, r2
 8007942:	d009      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007944:	4b9e      	ldr	r3, [pc, #632]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007948:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800794c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007952:	4a9b      	ldr	r2, [pc, #620]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007954:	430b      	orrs	r3, r1
 8007956:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007964:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007966:	2300      	movs	r3, #0
 8007968:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800796a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800796e:	460b      	mov	r3, r1
 8007970:	4313      	orrs	r3, r2
 8007972:	d009      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007974:	4b92      	ldr	r3, [pc, #584]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007978:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800797c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007980:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007982:	4a8f      	ldr	r2, [pc, #572]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007984:	430b      	orrs	r3, r1
 8007986:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007994:	643b      	str	r3, [r7, #64]	@ 0x40
 8007996:	2300      	movs	r3, #0
 8007998:	647b      	str	r3, [r7, #68]	@ 0x44
 800799a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800799e:	460b      	mov	r3, r1
 80079a0:	4313      	orrs	r3, r2
 80079a2:	d00e      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079a4:	4b86      	ldr	r3, [pc, #536]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	4a85      	ldr	r2, [pc, #532]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079ae:	6113      	str	r3, [r2, #16]
 80079b0:	4b83      	ldr	r3, [pc, #524]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079b2:	6919      	ldr	r1, [r3, #16]
 80079b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079bc:	4a80      	ldr	r2, [pc, #512]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079be:	430b      	orrs	r3, r1
 80079c0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80079c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80079ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079d0:	2300      	movs	r3, #0
 80079d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80079d8:	460b      	mov	r3, r1
 80079da:	4313      	orrs	r3, r2
 80079dc:	d009      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80079de:	4b78      	ldr	r3, [pc, #480]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80079e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ec:	4a74      	ldr	r2, [pc, #464]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079ee:	430b      	orrs	r3, r1
 80079f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80079f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80079fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a00:	2300      	movs	r3, #0
 8007a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a04:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	d00a      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a0e:	4b6c      	ldr	r3, [pc, #432]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a12:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a1e:	4a68      	ldr	r2, [pc, #416]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a20:	430b      	orrs	r3, r1
 8007a22:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a36:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	d011      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a44:	3308      	adds	r3, #8
 8007a46:	2100      	movs	r1, #0
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 fb79 	bl	8008140 <RCCEx_PLL2_Config>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007a54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	6239      	str	r1, [r7, #32]
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a76:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	d011      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a84:	3308      	adds	r3, #8
 8007a86:	2101      	movs	r1, #1
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 fb59 	bl	8008140 <RCCEx_PLL2_Config>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007a94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aac:	2100      	movs	r1, #0
 8007aae:	61b9      	str	r1, [r7, #24]
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	61fb      	str	r3, [r7, #28]
 8007ab6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007aba:	460b      	mov	r3, r1
 8007abc:	4313      	orrs	r3, r2
 8007abe:	d011      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	2102      	movs	r1, #2
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 fb39 	bl	8008140 <RCCEx_PLL2_Config>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007ad4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007adc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ae0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aec:	2100      	movs	r1, #0
 8007aee:	6139      	str	r1, [r7, #16]
 8007af0:	f003 0308 	and.w	r3, r3, #8
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007afa:	460b      	mov	r3, r1
 8007afc:	4313      	orrs	r3, r2
 8007afe:	d011      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b04:	3328      	adds	r3, #40	@ 0x28
 8007b06:	2100      	movs	r1, #0
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 fbcb 	bl	80082a4 <RCCEx_PLL3_Config>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007b14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	60b9      	str	r1, [r7, #8]
 8007b30:	f003 0310 	and.w	r3, r3, #16
 8007b34:	60fb      	str	r3, [r7, #12]
 8007b36:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	d011      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b44:	3328      	adds	r3, #40	@ 0x28
 8007b46:	2101      	movs	r1, #1
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f000 fbab 	bl	80082a4 <RCCEx_PLL3_Config>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007b54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	6039      	str	r1, [r7, #0]
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	607b      	str	r3, [r7, #4]
 8007b76:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	d011      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b84:	3328      	adds	r3, #40	@ 0x28
 8007b86:	2102      	movs	r1, #2
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 fb8b 	bl	80082a4 <RCCEx_PLL3_Config>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007b94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ba0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007ba4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	e000      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bbe:	bf00      	nop
 8007bc0:	58024400 	.word	0x58024400

08007bc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007bc8:	f7fe fe00 	bl	80067cc <HAL_RCC_GetHCLKFreq>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	4b06      	ldr	r3, [pc, #24]	@ (8007be8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	091b      	lsrs	r3, r3, #4
 8007bd4:	f003 0307 	and.w	r3, r3, #7
 8007bd8:	4904      	ldr	r1, [pc, #16]	@ (8007bec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007bda:	5ccb      	ldrb	r3, [r1, r3]
 8007bdc:	f003 031f 	and.w	r3, r3, #31
 8007be0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	58024400 	.word	0x58024400
 8007bec:	0800adf4 	.word	0x0800adf4

08007bf0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b089      	sub	sp, #36	@ 0x24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bf8:	4ba1      	ldr	r3, [pc, #644]	@ (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfc:	f003 0303 	and.w	r3, r3, #3
 8007c00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007c02:	4b9f      	ldr	r3, [pc, #636]	@ (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c06:	0b1b      	lsrs	r3, r3, #12
 8007c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007c0e:	4b9c      	ldr	r3, [pc, #624]	@ (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c12:	091b      	lsrs	r3, r3, #4
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007c1a:	4b99      	ldr	r3, [pc, #612]	@ (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c1e:	08db      	lsrs	r3, r3, #3
 8007c20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	fb02 f303 	mul.w	r3, r2, r3
 8007c2a:	ee07 3a90 	vmov	s15, r3
 8007c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 8111 	beq.w	8007e60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	f000 8083 	beq.w	8007d4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	f200 80a1 	bhi.w	8007d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d003      	beq.n	8007c5c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d056      	beq.n	8007d08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007c5a:	e099      	b.n	8007d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c5c:	4b88      	ldr	r3, [pc, #544]	@ (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0320 	and.w	r3, r3, #32
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d02d      	beq.n	8007cc4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c68:	4b85      	ldr	r3, [pc, #532]	@ (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	08db      	lsrs	r3, r3, #3
 8007c6e:	f003 0303 	and.w	r3, r3, #3
 8007c72:	4a84      	ldr	r2, [pc, #528]	@ (8007e84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007c74:	fa22 f303 	lsr.w	r3, r2, r3
 8007c78:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	ee07 3a90 	vmov	s15, r3
 8007c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c92:	4b7b      	ldr	r3, [pc, #492]	@ (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ca6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007cc2:	e087      	b.n	8007dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007e8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cde:	ee07 3a90 	vmov	s15, r3
 8007ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007e88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d06:	e065      	b.n	8007dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	ee07 3a90 	vmov	s15, r3
 8007d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d1a:	4b59      	ldr	r3, [pc, #356]	@ (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007e88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d4a:	e043      	b.n	8007dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	ee07 3a90 	vmov	s15, r3
 8007d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007e94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d5e:	4b48      	ldr	r3, [pc, #288]	@ (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d66:	ee07 3a90 	vmov	s15, r3
 8007d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007e88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d8e:	e021      	b.n	8007dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007da2:	4b37      	ldr	r3, [pc, #220]	@ (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007db6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007e88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dd2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd8:	0a5b      	lsrs	r3, r3, #9
 8007dda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dde:	ee07 3a90 	vmov	s15, r3
 8007de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dee:	edd7 6a07 	vldr	s13, [r7, #28]
 8007df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dfa:	ee17 2a90 	vmov	r2, s15
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007e02:	4b1f      	ldr	r3, [pc, #124]	@ (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e06:	0c1b      	lsrs	r3, r3, #16
 8007e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e0c:	ee07 3a90 	vmov	s15, r3
 8007e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e28:	ee17 2a90 	vmov	r2, s15
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007e30:	4b13      	ldr	r3, [pc, #76]	@ (8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e34:	0e1b      	lsrs	r3, r3, #24
 8007e36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e3a:	ee07 3a90 	vmov	s15, r3
 8007e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e56:	ee17 2a90 	vmov	r2, s15
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007e5e:	e008      	b.n	8007e72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	609a      	str	r2, [r3, #8]
}
 8007e72:	bf00      	nop
 8007e74:	3724      	adds	r7, #36	@ 0x24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	58024400 	.word	0x58024400
 8007e84:	03d09000 	.word	0x03d09000
 8007e88:	46000000 	.word	0x46000000
 8007e8c:	4c742400 	.word	0x4c742400
 8007e90:	4a742400 	.word	0x4a742400
 8007e94:	4bbebc20 	.word	0x4bbebc20

08007e98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b089      	sub	sp, #36	@ 0x24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ea0:	4ba1      	ldr	r3, [pc, #644]	@ (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007eaa:	4b9f      	ldr	r3, [pc, #636]	@ (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eae:	0d1b      	lsrs	r3, r3, #20
 8007eb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007eb4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007eb6:	4b9c      	ldr	r3, [pc, #624]	@ (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eba:	0a1b      	lsrs	r3, r3, #8
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007ec2:	4b99      	ldr	r3, [pc, #612]	@ (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec6:	08db      	lsrs	r3, r3, #3
 8007ec8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	fb02 f303 	mul.w	r3, r2, r3
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 8111 	beq.w	8008108 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	f000 8083 	beq.w	8007ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	f200 80a1 	bhi.w	8008038 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d056      	beq.n	8007fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007f02:	e099      	b.n	8008038 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f04:	4b88      	ldr	r3, [pc, #544]	@ (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d02d      	beq.n	8007f6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f10:	4b85      	ldr	r3, [pc, #532]	@ (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	08db      	lsrs	r3, r3, #3
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	4a84      	ldr	r2, [pc, #528]	@ (800812c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f20:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	ee07 3a90 	vmov	s15, r3
 8007f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	ee07 3a90 	vmov	s15, r3
 8007f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f3a:	4b7b      	ldr	r3, [pc, #492]	@ (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f42:	ee07 3a90 	vmov	s15, r3
 8007f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f6a:	e087      	b.n	800807c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	ee07 3a90 	vmov	s15, r3
 8007f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008134 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f7e:	4b6a      	ldr	r3, [pc, #424]	@ (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f86:	ee07 3a90 	vmov	s15, r3
 8007f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007faa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fae:	e065      	b.n	800807c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	ee07 3a90 	vmov	s15, r3
 8007fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fc2:	4b59      	ldr	r3, [pc, #356]	@ (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fd6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ff2:	e043      	b.n	800807c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	ee07 3a90 	vmov	s15, r3
 8007ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ffe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800813c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008006:	4b48      	ldr	r3, [pc, #288]	@ (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800800a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800800e:	ee07 3a90 	vmov	s15, r3
 8008012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008016:	ed97 6a03 	vldr	s12, [r7, #12]
 800801a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800801e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800802a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800802e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008036:	e021      	b.n	800807c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008042:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800804a:	4b37      	ldr	r3, [pc, #220]	@ (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800804c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800804e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008052:	ee07 3a90 	vmov	s15, r3
 8008056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800805a:	ed97 6a03 	vldr	s12, [r7, #12]
 800805e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800806a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800806e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008076:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800807a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800807c:	4b2a      	ldr	r3, [pc, #168]	@ (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800807e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008080:	0a5b      	lsrs	r3, r3, #9
 8008082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008086:	ee07 3a90 	vmov	s15, r3
 800808a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800808e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008092:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008096:	edd7 6a07 	vldr	s13, [r7, #28]
 800809a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800809e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080a2:	ee17 2a90 	vmov	r2, s15
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80080aa:	4b1f      	ldr	r3, [pc, #124]	@ (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ae:	0c1b      	lsrs	r3, r3, #16
 80080b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080b4:	ee07 3a90 	vmov	s15, r3
 80080b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80080c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080d0:	ee17 2a90 	vmov	r2, s15
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80080d8:	4b13      	ldr	r3, [pc, #76]	@ (8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080dc:	0e1b      	lsrs	r3, r3, #24
 80080de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80080f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080fe:	ee17 2a90 	vmov	r2, s15
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008106:	e008      	b.n	800811a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	609a      	str	r2, [r3, #8]
}
 800811a:	bf00      	nop
 800811c:	3724      	adds	r7, #36	@ 0x24
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	58024400 	.word	0x58024400
 800812c:	03d09000 	.word	0x03d09000
 8008130:	46000000 	.word	0x46000000
 8008134:	4c742400 	.word	0x4c742400
 8008138:	4a742400 	.word	0x4a742400
 800813c:	4bbebc20 	.word	0x4bbebc20

08008140 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800814e:	4b53      	ldr	r3, [pc, #332]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	2b03      	cmp	r3, #3
 8008158:	d101      	bne.n	800815e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e099      	b.n	8008292 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800815e:	4b4f      	ldr	r3, [pc, #316]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a4e      	ldr	r2, [pc, #312]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008164:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800816a:	f7fa f96b 	bl	8002444 <HAL_GetTick>
 800816e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008170:	e008      	b.n	8008184 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008172:	f7fa f967 	bl	8002444 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e086      	b.n	8008292 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008184:	4b45      	ldr	r3, [pc, #276]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1f0      	bne.n	8008172 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008190:	4b42      	ldr	r3, [pc, #264]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008194:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	031b      	lsls	r3, r3, #12
 800819e:	493f      	ldr	r1, [pc, #252]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 80081a0:	4313      	orrs	r3, r2
 80081a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	025b      	lsls	r3, r3, #9
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	431a      	orrs	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	3b01      	subs	r3, #1
 80081c0:	041b      	lsls	r3, r3, #16
 80081c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80081c6:	431a      	orrs	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	061b      	lsls	r3, r3, #24
 80081d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081d4:	4931      	ldr	r1, [pc, #196]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081da:	4b30      	ldr	r3, [pc, #192]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 80081dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	492d      	ldr	r1, [pc, #180]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80081ec:	4b2b      	ldr	r3, [pc, #172]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 80081ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f0:	f023 0220 	bic.w	r2, r3, #32
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	4928      	ldr	r1, [pc, #160]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80081fe:	4b27      	ldr	r3, [pc, #156]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008202:	4a26      	ldr	r2, [pc, #152]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008204:	f023 0310 	bic.w	r3, r3, #16
 8008208:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800820a:	4b24      	ldr	r3, [pc, #144]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 800820c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800820e:	4b24      	ldr	r3, [pc, #144]	@ (80082a0 <RCCEx_PLL2_Config+0x160>)
 8008210:	4013      	ands	r3, r2
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	69d2      	ldr	r2, [r2, #28]
 8008216:	00d2      	lsls	r2, r2, #3
 8008218:	4920      	ldr	r1, [pc, #128]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 800821a:	4313      	orrs	r3, r2
 800821c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800821e:	4b1f      	ldr	r3, [pc, #124]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008222:	4a1e      	ldr	r2, [pc, #120]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008224:	f043 0310 	orr.w	r3, r3, #16
 8008228:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d106      	bne.n	800823e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008230:	4b1a      	ldr	r3, [pc, #104]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008234:	4a19      	ldr	r2, [pc, #100]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008236:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800823a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800823c:	e00f      	b.n	800825e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d106      	bne.n	8008252 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008244:	4b15      	ldr	r3, [pc, #84]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008248:	4a14      	ldr	r2, [pc, #80]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 800824a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800824e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008250:	e005      	b.n	800825e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008252:	4b12      	ldr	r3, [pc, #72]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008256:	4a11      	ldr	r2, [pc, #68]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008258:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800825c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800825e:	4b0f      	ldr	r3, [pc, #60]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a0e      	ldr	r2, [pc, #56]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008264:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800826a:	f7fa f8eb 	bl	8002444 <HAL_GetTick>
 800826e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008270:	e008      	b.n	8008284 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008272:	f7fa f8e7 	bl	8002444 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d901      	bls.n	8008284 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e006      	b.n	8008292 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008284:	4b05      	ldr	r3, [pc, #20]	@ (800829c <RCCEx_PLL2_Config+0x15c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d0f0      	beq.n	8008272 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008290:	7bfb      	ldrb	r3, [r7, #15]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	58024400 	.word	0x58024400
 80082a0:	ffff0007 	.word	0xffff0007

080082a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082b2:	4b53      	ldr	r3, [pc, #332]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 80082b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d101      	bne.n	80082c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e099      	b.n	80083f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082c2:	4b4f      	ldr	r3, [pc, #316]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a4e      	ldr	r2, [pc, #312]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 80082c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ce:	f7fa f8b9 	bl	8002444 <HAL_GetTick>
 80082d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082d4:	e008      	b.n	80082e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082d6:	f7fa f8b5 	bl	8002444 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d901      	bls.n	80082e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e086      	b.n	80083f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082e8:	4b45      	ldr	r3, [pc, #276]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1f0      	bne.n	80082d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082f4:	4b42      	ldr	r3, [pc, #264]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 80082f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	051b      	lsls	r3, r3, #20
 8008302:	493f      	ldr	r1, [pc, #252]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008304:	4313      	orrs	r3, r2
 8008306:	628b      	str	r3, [r1, #40]	@ 0x28
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	3b01      	subs	r3, #1
 800830e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	3b01      	subs	r3, #1
 8008318:	025b      	lsls	r3, r3, #9
 800831a:	b29b      	uxth	r3, r3
 800831c:	431a      	orrs	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	3b01      	subs	r3, #1
 8008324:	041b      	lsls	r3, r3, #16
 8008326:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	3b01      	subs	r3, #1
 8008332:	061b      	lsls	r3, r3, #24
 8008334:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008338:	4931      	ldr	r1, [pc, #196]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 800833a:	4313      	orrs	r3, r2
 800833c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800833e:	4b30      	ldr	r3, [pc, #192]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008342:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	492d      	ldr	r1, [pc, #180]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 800834c:	4313      	orrs	r3, r2
 800834e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008350:	4b2b      	ldr	r3, [pc, #172]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008354:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	4928      	ldr	r1, [pc, #160]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 800835e:	4313      	orrs	r3, r2
 8008360:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008362:	4b27      	ldr	r3, [pc, #156]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008366:	4a26      	ldr	r2, [pc, #152]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800836c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800836e:	4b24      	ldr	r3, [pc, #144]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008372:	4b24      	ldr	r3, [pc, #144]	@ (8008404 <RCCEx_PLL3_Config+0x160>)
 8008374:	4013      	ands	r3, r2
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	69d2      	ldr	r2, [r2, #28]
 800837a:	00d2      	lsls	r2, r2, #3
 800837c:	4920      	ldr	r1, [pc, #128]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 800837e:	4313      	orrs	r3, r2
 8008380:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008382:	4b1f      	ldr	r3, [pc, #124]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008386:	4a1e      	ldr	r2, [pc, #120]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800838c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d106      	bne.n	80083a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008394:	4b1a      	ldr	r3, [pc, #104]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 8008396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008398:	4a19      	ldr	r2, [pc, #100]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 800839a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800839e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80083a0:	e00f      	b.n	80083c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d106      	bne.n	80083b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80083a8:	4b15      	ldr	r3, [pc, #84]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ac:	4a14      	ldr	r2, [pc, #80]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80083b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80083b4:	e005      	b.n	80083c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80083b6:	4b12      	ldr	r3, [pc, #72]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ba:	4a11      	ldr	r2, [pc, #68]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083c2:	4b0f      	ldr	r3, [pc, #60]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a0e      	ldr	r2, [pc, #56]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ce:	f7fa f839 	bl	8002444 <HAL_GetTick>
 80083d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083d4:	e008      	b.n	80083e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083d6:	f7fa f835 	bl	8002444 <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d901      	bls.n	80083e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e006      	b.n	80083f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083e8:	4b05      	ldr	r3, [pc, #20]	@ (8008400 <RCCEx_PLL3_Config+0x15c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d0f0      	beq.n	80083d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	58024400 	.word	0x58024400
 8008404:	ffff0007 	.word	0xffff0007

08008408 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d101      	bne.n	800841a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e10f      	b.n	800863a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a87      	ldr	r2, [pc, #540]	@ (8008644 <HAL_SPI_Init+0x23c>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d00f      	beq.n	800844a <HAL_SPI_Init+0x42>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a86      	ldr	r2, [pc, #536]	@ (8008648 <HAL_SPI_Init+0x240>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d00a      	beq.n	800844a <HAL_SPI_Init+0x42>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a84      	ldr	r2, [pc, #528]	@ (800864c <HAL_SPI_Init+0x244>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d005      	beq.n	800844a <HAL_SPI_Init+0x42>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	2b0f      	cmp	r3, #15
 8008444:	d901      	bls.n	800844a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e0f7      	b.n	800863a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f900 	bl	8008650 <SPI_GetPacketSize>
 8008450:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a7b      	ldr	r2, [pc, #492]	@ (8008644 <HAL_SPI_Init+0x23c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d00c      	beq.n	8008476 <HAL_SPI_Init+0x6e>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a79      	ldr	r2, [pc, #484]	@ (8008648 <HAL_SPI_Init+0x240>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d007      	beq.n	8008476 <HAL_SPI_Init+0x6e>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a78      	ldr	r2, [pc, #480]	@ (800864c <HAL_SPI_Init+0x244>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d002      	beq.n	8008476 <HAL_SPI_Init+0x6e>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2b08      	cmp	r3, #8
 8008474:	d811      	bhi.n	800849a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800847a:	4a72      	ldr	r2, [pc, #456]	@ (8008644 <HAL_SPI_Init+0x23c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d009      	beq.n	8008494 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a70      	ldr	r2, [pc, #448]	@ (8008648 <HAL_SPI_Init+0x240>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d004      	beq.n	8008494 <HAL_SPI_Init+0x8c>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a6f      	ldr	r2, [pc, #444]	@ (800864c <HAL_SPI_Init+0x244>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d104      	bne.n	800849e <HAL_SPI_Init+0x96>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b10      	cmp	r3, #16
 8008498:	d901      	bls.n	800849e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e0cd      	b.n	800863a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d106      	bne.n	80084b8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7f9 f992 	bl	80017dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0201 	bic.w	r2, r2, #1
 80084ce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80084da:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80084e4:	d119      	bne.n	800851a <HAL_SPI_Init+0x112>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084ee:	d103      	bne.n	80084f8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d008      	beq.n	800850a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10c      	bne.n	800851a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008508:	d107      	bne.n	800851a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008518:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00f      	beq.n	8008546 <HAL_SPI_Init+0x13e>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	2b06      	cmp	r3, #6
 800852c:	d90b      	bls.n	8008546 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	e007      	b.n	8008556 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008554:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	69da      	ldr	r2, [r3, #28]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855e:	431a      	orrs	r2, r3
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008568:	ea42 0103 	orr.w	r1, r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68da      	ldr	r2, [r3, #12]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008580:	431a      	orrs	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008586:	431a      	orrs	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	431a      	orrs	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	431a      	orrs	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	431a      	orrs	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	431a      	orrs	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	431a      	orrs	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085aa:	431a      	orrs	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	431a      	orrs	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085b6:	ea42 0103 	orr.w	r1, r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	430a      	orrs	r2, r1
 80085c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d113      	bne.n	80085f6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80085f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f022 0201 	bic.w	r2, r2, #1
 8008604:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00a      	beq.n	8008628 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	40013000 	.word	0x40013000
 8008648:	40003800 	.word	0x40003800
 800864c:	40003c00 	.word	0x40003c00

08008650 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800865c:	095b      	lsrs	r3, r3, #5
 800865e:	3301      	adds	r3, #1
 8008660:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	3301      	adds	r3, #1
 8008668:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	3307      	adds	r3, #7
 800866e:	08db      	lsrs	r3, r3, #3
 8008670:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	fb02 f303 	mul.w	r3, r2, r3
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b082      	sub	sp, #8
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d101      	bne.n	8008698 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e049      	b.n	800872c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d106      	bne.n	80086b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7f9 fb39 	bl	8001d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2202      	movs	r2, #2
 80086b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	3304      	adds	r3, #4
 80086c2:	4619      	mov	r1, r3
 80086c4:	4610      	mov	r0, r2
 80086c6:	f000 faa3 	bl	8008c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2201      	movs	r2, #1
 80086ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e049      	b.n	80087da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b00      	cmp	r3, #0
 8008750:	d106      	bne.n	8008760 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f841 	bl	80087e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2202      	movs	r2, #2
 8008764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	3304      	adds	r3, #4
 8008770:	4619      	mov	r1, r3
 8008772:	4610      	mov	r0, r2
 8008774:	f000 fa4c 	bl	8008c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80087ea:	bf00      	nop
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
	...

080087f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800880e:	2b01      	cmp	r3, #1
 8008810:	d101      	bne.n	8008816 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008812:	2302      	movs	r3, #2
 8008814:	e0ff      	b.n	8008a16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b14      	cmp	r3, #20
 8008822:	f200 80f0 	bhi.w	8008a06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008826:	a201      	add	r2, pc, #4	@ (adr r2, 800882c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882c:	08008881 	.word	0x08008881
 8008830:	08008a07 	.word	0x08008a07
 8008834:	08008a07 	.word	0x08008a07
 8008838:	08008a07 	.word	0x08008a07
 800883c:	080088c1 	.word	0x080088c1
 8008840:	08008a07 	.word	0x08008a07
 8008844:	08008a07 	.word	0x08008a07
 8008848:	08008a07 	.word	0x08008a07
 800884c:	08008903 	.word	0x08008903
 8008850:	08008a07 	.word	0x08008a07
 8008854:	08008a07 	.word	0x08008a07
 8008858:	08008a07 	.word	0x08008a07
 800885c:	08008943 	.word	0x08008943
 8008860:	08008a07 	.word	0x08008a07
 8008864:	08008a07 	.word	0x08008a07
 8008868:	08008a07 	.word	0x08008a07
 800886c:	08008985 	.word	0x08008985
 8008870:	08008a07 	.word	0x08008a07
 8008874:	08008a07 	.word	0x08008a07
 8008878:	08008a07 	.word	0x08008a07
 800887c:	080089c5 	.word	0x080089c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 fa74 	bl	8008d74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	699a      	ldr	r2, [r3, #24]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f042 0208 	orr.w	r2, r2, #8
 800889a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	699a      	ldr	r2, [r3, #24]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0204 	bic.w	r2, r2, #4
 80088aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6999      	ldr	r1, [r3, #24]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	691a      	ldr	r2, [r3, #16]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	619a      	str	r2, [r3, #24]
      break;
 80088be:	e0a5      	b.n	8008a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68b9      	ldr	r1, [r7, #8]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 fae4 	bl	8008e94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	699a      	ldr	r2, [r3, #24]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	699a      	ldr	r2, [r3, #24]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6999      	ldr	r1, [r3, #24]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	021a      	lsls	r2, r3, #8
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	619a      	str	r2, [r3, #24]
      break;
 8008900:	e084      	b.n	8008a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fb4d 	bl	8008fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	69da      	ldr	r2, [r3, #28]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f042 0208 	orr.w	r2, r2, #8
 800891c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69da      	ldr	r2, [r3, #28]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0204 	bic.w	r2, r2, #4
 800892c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69d9      	ldr	r1, [r3, #28]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	691a      	ldr	r2, [r3, #16]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	61da      	str	r2, [r3, #28]
      break;
 8008940:	e064      	b.n	8008a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68b9      	ldr	r1, [r7, #8]
 8008948:	4618      	mov	r0, r3
 800894a:	f000 fbb5 	bl	80090b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	69da      	ldr	r2, [r3, #28]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800895c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	69da      	ldr	r2, [r3, #28]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800896c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	69d9      	ldr	r1, [r3, #28]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	021a      	lsls	r2, r3, #8
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	430a      	orrs	r2, r1
 8008980:	61da      	str	r2, [r3, #28]
      break;
 8008982:	e043      	b.n	8008a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68b9      	ldr	r1, [r7, #8]
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fbfe 	bl	800918c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f042 0208 	orr.w	r2, r2, #8
 800899e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f022 0204 	bic.w	r2, r2, #4
 80089ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	691a      	ldr	r2, [r3, #16]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	430a      	orrs	r2, r1
 80089c0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80089c2:	e023      	b.n	8008a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68b9      	ldr	r1, [r7, #8]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 fc42 	bl	8009254 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	021a      	lsls	r2, r3, #8
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008a04:	e002      	b.n	8008a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	75fb      	strb	r3, [r7, #23]
      break;
 8008a0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3718      	adds	r7, #24
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop

08008a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d101      	bne.n	8008a3c <HAL_TIM_ConfigClockSource+0x1c>
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e0dc      	b.n	8008bf6 <HAL_TIM_ConfigClockSource+0x1d6>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2202      	movs	r2, #2
 8008a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	4b6a      	ldr	r3, [pc, #424]	@ (8008c00 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a64      	ldr	r2, [pc, #400]	@ (8008c04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	f000 80a9 	beq.w	8008bca <HAL_TIM_ConfigClockSource+0x1aa>
 8008a78:	4a62      	ldr	r2, [pc, #392]	@ (8008c04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	f200 80ae 	bhi.w	8008bdc <HAL_TIM_ConfigClockSource+0x1bc>
 8008a80:	4a61      	ldr	r2, [pc, #388]	@ (8008c08 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	f000 80a1 	beq.w	8008bca <HAL_TIM_ConfigClockSource+0x1aa>
 8008a88:	4a5f      	ldr	r2, [pc, #380]	@ (8008c08 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	f200 80a6 	bhi.w	8008bdc <HAL_TIM_ConfigClockSource+0x1bc>
 8008a90:	4a5e      	ldr	r2, [pc, #376]	@ (8008c0c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	f000 8099 	beq.w	8008bca <HAL_TIM_ConfigClockSource+0x1aa>
 8008a98:	4a5c      	ldr	r2, [pc, #368]	@ (8008c0c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	f200 809e 	bhi.w	8008bdc <HAL_TIM_ConfigClockSource+0x1bc>
 8008aa0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008aa4:	f000 8091 	beq.w	8008bca <HAL_TIM_ConfigClockSource+0x1aa>
 8008aa8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008aac:	f200 8096 	bhi.w	8008bdc <HAL_TIM_ConfigClockSource+0x1bc>
 8008ab0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ab4:	f000 8089 	beq.w	8008bca <HAL_TIM_ConfigClockSource+0x1aa>
 8008ab8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008abc:	f200 808e 	bhi.w	8008bdc <HAL_TIM_ConfigClockSource+0x1bc>
 8008ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ac4:	d03e      	beq.n	8008b44 <HAL_TIM_ConfigClockSource+0x124>
 8008ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aca:	f200 8087 	bhi.w	8008bdc <HAL_TIM_ConfigClockSource+0x1bc>
 8008ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ad2:	f000 8086 	beq.w	8008be2 <HAL_TIM_ConfigClockSource+0x1c2>
 8008ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ada:	d87f      	bhi.n	8008bdc <HAL_TIM_ConfigClockSource+0x1bc>
 8008adc:	2b70      	cmp	r3, #112	@ 0x70
 8008ade:	d01a      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0xf6>
 8008ae0:	2b70      	cmp	r3, #112	@ 0x70
 8008ae2:	d87b      	bhi.n	8008bdc <HAL_TIM_ConfigClockSource+0x1bc>
 8008ae4:	2b60      	cmp	r3, #96	@ 0x60
 8008ae6:	d050      	beq.n	8008b8a <HAL_TIM_ConfigClockSource+0x16a>
 8008ae8:	2b60      	cmp	r3, #96	@ 0x60
 8008aea:	d877      	bhi.n	8008bdc <HAL_TIM_ConfigClockSource+0x1bc>
 8008aec:	2b50      	cmp	r3, #80	@ 0x50
 8008aee:	d03c      	beq.n	8008b6a <HAL_TIM_ConfigClockSource+0x14a>
 8008af0:	2b50      	cmp	r3, #80	@ 0x50
 8008af2:	d873      	bhi.n	8008bdc <HAL_TIM_ConfigClockSource+0x1bc>
 8008af4:	2b40      	cmp	r3, #64	@ 0x40
 8008af6:	d058      	beq.n	8008baa <HAL_TIM_ConfigClockSource+0x18a>
 8008af8:	2b40      	cmp	r3, #64	@ 0x40
 8008afa:	d86f      	bhi.n	8008bdc <HAL_TIM_ConfigClockSource+0x1bc>
 8008afc:	2b30      	cmp	r3, #48	@ 0x30
 8008afe:	d064      	beq.n	8008bca <HAL_TIM_ConfigClockSource+0x1aa>
 8008b00:	2b30      	cmp	r3, #48	@ 0x30
 8008b02:	d86b      	bhi.n	8008bdc <HAL_TIM_ConfigClockSource+0x1bc>
 8008b04:	2b20      	cmp	r3, #32
 8008b06:	d060      	beq.n	8008bca <HAL_TIM_ConfigClockSource+0x1aa>
 8008b08:	2b20      	cmp	r3, #32
 8008b0a:	d867      	bhi.n	8008bdc <HAL_TIM_ConfigClockSource+0x1bc>
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d05c      	beq.n	8008bca <HAL_TIM_ConfigClockSource+0x1aa>
 8008b10:	2b10      	cmp	r3, #16
 8008b12:	d05a      	beq.n	8008bca <HAL_TIM_ConfigClockSource+0x1aa>
 8008b14:	e062      	b.n	8008bdc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b26:	f000 fc79 	bl	800941c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008b38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	609a      	str	r2, [r3, #8]
      break;
 8008b42:	e04f      	b.n	8008be4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b54:	f000 fc62 	bl	800941c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689a      	ldr	r2, [r3, #8]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b66:	609a      	str	r2, [r3, #8]
      break;
 8008b68:	e03c      	b.n	8008be4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b76:	461a      	mov	r2, r3
 8008b78:	f000 fbd2 	bl	8009320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2150      	movs	r1, #80	@ 0x50
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 fc2c 	bl	80093e0 <TIM_ITRx_SetConfig>
      break;
 8008b88:	e02c      	b.n	8008be4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b96:	461a      	mov	r2, r3
 8008b98:	f000 fbf1 	bl	800937e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2160      	movs	r1, #96	@ 0x60
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 fc1c 	bl	80093e0 <TIM_ITRx_SetConfig>
      break;
 8008ba8:	e01c      	b.n	8008be4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	f000 fbb2 	bl	8009320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2140      	movs	r1, #64	@ 0x40
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 fc0c 	bl	80093e0 <TIM_ITRx_SetConfig>
      break;
 8008bc8:	e00c      	b.n	8008be4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	f000 fc03 	bl	80093e0 <TIM_ITRx_SetConfig>
      break;
 8008bda:	e003      	b.n	8008be4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	73fb      	strb	r3, [r7, #15]
      break;
 8008be0:	e000      	b.n	8008be4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	ffceff88 	.word	0xffceff88
 8008c04:	00100040 	.word	0x00100040
 8008c08:	00100030 	.word	0x00100030
 8008c0c:	00100020 	.word	0x00100020

08008c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a4a      	ldr	r2, [pc, #296]	@ (8008d4c <TIM_Base_SetConfig+0x13c>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d013      	beq.n	8008c50 <TIM_Base_SetConfig+0x40>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c2e:	d00f      	beq.n	8008c50 <TIM_Base_SetConfig+0x40>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a47      	ldr	r2, [pc, #284]	@ (8008d50 <TIM_Base_SetConfig+0x140>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d00b      	beq.n	8008c50 <TIM_Base_SetConfig+0x40>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a46      	ldr	r2, [pc, #280]	@ (8008d54 <TIM_Base_SetConfig+0x144>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d007      	beq.n	8008c50 <TIM_Base_SetConfig+0x40>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a45      	ldr	r2, [pc, #276]	@ (8008d58 <TIM_Base_SetConfig+0x148>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d003      	beq.n	8008c50 <TIM_Base_SetConfig+0x40>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a44      	ldr	r2, [pc, #272]	@ (8008d5c <TIM_Base_SetConfig+0x14c>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d108      	bne.n	8008c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a39      	ldr	r2, [pc, #228]	@ (8008d4c <TIM_Base_SetConfig+0x13c>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d027      	beq.n	8008cba <TIM_Base_SetConfig+0xaa>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c70:	d023      	beq.n	8008cba <TIM_Base_SetConfig+0xaa>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a36      	ldr	r2, [pc, #216]	@ (8008d50 <TIM_Base_SetConfig+0x140>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d01f      	beq.n	8008cba <TIM_Base_SetConfig+0xaa>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a35      	ldr	r2, [pc, #212]	@ (8008d54 <TIM_Base_SetConfig+0x144>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d01b      	beq.n	8008cba <TIM_Base_SetConfig+0xaa>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a34      	ldr	r2, [pc, #208]	@ (8008d58 <TIM_Base_SetConfig+0x148>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d017      	beq.n	8008cba <TIM_Base_SetConfig+0xaa>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a33      	ldr	r2, [pc, #204]	@ (8008d5c <TIM_Base_SetConfig+0x14c>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d013      	beq.n	8008cba <TIM_Base_SetConfig+0xaa>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a32      	ldr	r2, [pc, #200]	@ (8008d60 <TIM_Base_SetConfig+0x150>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d00f      	beq.n	8008cba <TIM_Base_SetConfig+0xaa>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a31      	ldr	r2, [pc, #196]	@ (8008d64 <TIM_Base_SetConfig+0x154>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d00b      	beq.n	8008cba <TIM_Base_SetConfig+0xaa>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a30      	ldr	r2, [pc, #192]	@ (8008d68 <TIM_Base_SetConfig+0x158>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d007      	beq.n	8008cba <TIM_Base_SetConfig+0xaa>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a2f      	ldr	r2, [pc, #188]	@ (8008d6c <TIM_Base_SetConfig+0x15c>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d003      	beq.n	8008cba <TIM_Base_SetConfig+0xaa>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8008d70 <TIM_Base_SetConfig+0x160>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d108      	bne.n	8008ccc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a16      	ldr	r2, [pc, #88]	@ (8008d4c <TIM_Base_SetConfig+0x13c>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d00f      	beq.n	8008d18 <TIM_Base_SetConfig+0x108>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a18      	ldr	r2, [pc, #96]	@ (8008d5c <TIM_Base_SetConfig+0x14c>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d00b      	beq.n	8008d18 <TIM_Base_SetConfig+0x108>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a17      	ldr	r2, [pc, #92]	@ (8008d60 <TIM_Base_SetConfig+0x150>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d007      	beq.n	8008d18 <TIM_Base_SetConfig+0x108>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a16      	ldr	r2, [pc, #88]	@ (8008d64 <TIM_Base_SetConfig+0x154>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d003      	beq.n	8008d18 <TIM_Base_SetConfig+0x108>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a15      	ldr	r2, [pc, #84]	@ (8008d68 <TIM_Base_SetConfig+0x158>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d103      	bne.n	8008d20 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	691a      	ldr	r2, [r3, #16]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d105      	bne.n	8008d3e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	f023 0201 	bic.w	r2, r3, #1
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	611a      	str	r2, [r3, #16]
  }
}
 8008d3e:	bf00      	nop
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	40010000 	.word	0x40010000
 8008d50:	40000400 	.word	0x40000400
 8008d54:	40000800 	.word	0x40000800
 8008d58:	40000c00 	.word	0x40000c00
 8008d5c:	40010400 	.word	0x40010400
 8008d60:	40014000 	.word	0x40014000
 8008d64:	40014400 	.word	0x40014400
 8008d68:	40014800 	.word	0x40014800
 8008d6c:	4000e000 	.word	0x4000e000
 8008d70:	4000e400 	.word	0x4000e400

08008d74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a1b      	ldr	r3, [r3, #32]
 8008d88:	f023 0201 	bic.w	r2, r3, #1
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	4b37      	ldr	r3, [pc, #220]	@ (8008e7c <TIM_OC1_SetConfig+0x108>)
 8008da0:	4013      	ands	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 0303 	bic.w	r3, r3, #3
 8008daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f023 0302 	bic.w	r3, r3, #2
 8008dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a2d      	ldr	r2, [pc, #180]	@ (8008e80 <TIM_OC1_SetConfig+0x10c>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d00f      	beq.n	8008df0 <TIM_OC1_SetConfig+0x7c>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8008e84 <TIM_OC1_SetConfig+0x110>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d00b      	beq.n	8008df0 <TIM_OC1_SetConfig+0x7c>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a2b      	ldr	r2, [pc, #172]	@ (8008e88 <TIM_OC1_SetConfig+0x114>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d007      	beq.n	8008df0 <TIM_OC1_SetConfig+0x7c>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a2a      	ldr	r2, [pc, #168]	@ (8008e8c <TIM_OC1_SetConfig+0x118>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d003      	beq.n	8008df0 <TIM_OC1_SetConfig+0x7c>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a29      	ldr	r2, [pc, #164]	@ (8008e90 <TIM_OC1_SetConfig+0x11c>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d10c      	bne.n	8008e0a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	f023 0308 	bic.w	r3, r3, #8
 8008df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	697a      	ldr	r2, [r7, #20]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	f023 0304 	bic.w	r3, r3, #4
 8008e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8008e80 <TIM_OC1_SetConfig+0x10c>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d00f      	beq.n	8008e32 <TIM_OC1_SetConfig+0xbe>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a1b      	ldr	r2, [pc, #108]	@ (8008e84 <TIM_OC1_SetConfig+0x110>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d00b      	beq.n	8008e32 <TIM_OC1_SetConfig+0xbe>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8008e88 <TIM_OC1_SetConfig+0x114>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d007      	beq.n	8008e32 <TIM_OC1_SetConfig+0xbe>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a19      	ldr	r2, [pc, #100]	@ (8008e8c <TIM_OC1_SetConfig+0x118>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d003      	beq.n	8008e32 <TIM_OC1_SetConfig+0xbe>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a18      	ldr	r2, [pc, #96]	@ (8008e90 <TIM_OC1_SetConfig+0x11c>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d111      	bne.n	8008e56 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	621a      	str	r2, [r3, #32]
}
 8008e70:	bf00      	nop
 8008e72:	371c      	adds	r7, #28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	fffeff8f 	.word	0xfffeff8f
 8008e80:	40010000 	.word	0x40010000
 8008e84:	40010400 	.word	0x40010400
 8008e88:	40014000 	.word	0x40014000
 8008e8c:	40014400 	.word	0x40014400
 8008e90:	40014800 	.word	0x40014800

08008e94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a1b      	ldr	r3, [r3, #32]
 8008ea8:	f023 0210 	bic.w	r2, r3, #16
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	4b34      	ldr	r3, [pc, #208]	@ (8008f90 <TIM_OC2_SetConfig+0xfc>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	021b      	lsls	r3, r3, #8
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	f023 0320 	bic.w	r3, r3, #32
 8008ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	011b      	lsls	r3, r3, #4
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a29      	ldr	r2, [pc, #164]	@ (8008f94 <TIM_OC2_SetConfig+0x100>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d003      	beq.n	8008efc <TIM_OC2_SetConfig+0x68>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a28      	ldr	r2, [pc, #160]	@ (8008f98 <TIM_OC2_SetConfig+0x104>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d10d      	bne.n	8008f18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	011b      	lsls	r3, r3, #4
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8008f94 <TIM_OC2_SetConfig+0x100>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d00f      	beq.n	8008f40 <TIM_OC2_SetConfig+0xac>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a1d      	ldr	r2, [pc, #116]	@ (8008f98 <TIM_OC2_SetConfig+0x104>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d00b      	beq.n	8008f40 <TIM_OC2_SetConfig+0xac>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8008f9c <TIM_OC2_SetConfig+0x108>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d007      	beq.n	8008f40 <TIM_OC2_SetConfig+0xac>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a1b      	ldr	r2, [pc, #108]	@ (8008fa0 <TIM_OC2_SetConfig+0x10c>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d003      	beq.n	8008f40 <TIM_OC2_SetConfig+0xac>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8008fa4 <TIM_OC2_SetConfig+0x110>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d113      	bne.n	8008f68 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	685a      	ldr	r2, [r3, #4]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	621a      	str	r2, [r3, #32]
}
 8008f82:	bf00      	nop
 8008f84:	371c      	adds	r7, #28
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	feff8fff 	.word	0xfeff8fff
 8008f94:	40010000 	.word	0x40010000
 8008f98:	40010400 	.word	0x40010400
 8008f9c:	40014000 	.word	0x40014000
 8008fa0:	40014400 	.word	0x40014400
 8008fa4:	40014800 	.word	0x40014800

08008fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b087      	sub	sp, #28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a1b      	ldr	r3, [r3, #32]
 8008fbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	4b33      	ldr	r3, [pc, #204]	@ (80090a0 <TIM_OC3_SetConfig+0xf8>)
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 0303 	bic.w	r3, r3, #3
 8008fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	021b      	lsls	r3, r3, #8
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a28      	ldr	r2, [pc, #160]	@ (80090a4 <TIM_OC3_SetConfig+0xfc>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d003      	beq.n	800900e <TIM_OC3_SetConfig+0x66>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a27      	ldr	r2, [pc, #156]	@ (80090a8 <TIM_OC3_SetConfig+0x100>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d10d      	bne.n	800902a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	021b      	lsls	r3, r3, #8
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	4313      	orrs	r3, r2
 8009020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a1d      	ldr	r2, [pc, #116]	@ (80090a4 <TIM_OC3_SetConfig+0xfc>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d00f      	beq.n	8009052 <TIM_OC3_SetConfig+0xaa>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a1c      	ldr	r2, [pc, #112]	@ (80090a8 <TIM_OC3_SetConfig+0x100>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d00b      	beq.n	8009052 <TIM_OC3_SetConfig+0xaa>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a1b      	ldr	r2, [pc, #108]	@ (80090ac <TIM_OC3_SetConfig+0x104>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d007      	beq.n	8009052 <TIM_OC3_SetConfig+0xaa>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a1a      	ldr	r2, [pc, #104]	@ (80090b0 <TIM_OC3_SetConfig+0x108>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d003      	beq.n	8009052 <TIM_OC3_SetConfig+0xaa>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a19      	ldr	r2, [pc, #100]	@ (80090b4 <TIM_OC3_SetConfig+0x10c>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d113      	bne.n	800907a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	011b      	lsls	r3, r3, #4
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	4313      	orrs	r3, r2
 800906c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	011b      	lsls	r3, r3, #4
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	4313      	orrs	r3, r2
 8009078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	621a      	str	r2, [r3, #32]
}
 8009094:	bf00      	nop
 8009096:	371c      	adds	r7, #28
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	fffeff8f 	.word	0xfffeff8f
 80090a4:	40010000 	.word	0x40010000
 80090a8:	40010400 	.word	0x40010400
 80090ac:	40014000 	.word	0x40014000
 80090b0:	40014400 	.word	0x40014400
 80090b4:	40014800 	.word	0x40014800

080090b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b087      	sub	sp, #28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a1b      	ldr	r3, [r3, #32]
 80090cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	4b24      	ldr	r3, [pc, #144]	@ (8009174 <TIM_OC4_SetConfig+0xbc>)
 80090e4:	4013      	ands	r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	021b      	lsls	r3, r3, #8
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	031b      	lsls	r3, r3, #12
 800910a:	693a      	ldr	r2, [r7, #16]
 800910c:	4313      	orrs	r3, r2
 800910e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a19      	ldr	r2, [pc, #100]	@ (8009178 <TIM_OC4_SetConfig+0xc0>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d00f      	beq.n	8009138 <TIM_OC4_SetConfig+0x80>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a18      	ldr	r2, [pc, #96]	@ (800917c <TIM_OC4_SetConfig+0xc4>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d00b      	beq.n	8009138 <TIM_OC4_SetConfig+0x80>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a17      	ldr	r2, [pc, #92]	@ (8009180 <TIM_OC4_SetConfig+0xc8>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d007      	beq.n	8009138 <TIM_OC4_SetConfig+0x80>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a16      	ldr	r2, [pc, #88]	@ (8009184 <TIM_OC4_SetConfig+0xcc>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d003      	beq.n	8009138 <TIM_OC4_SetConfig+0x80>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a15      	ldr	r2, [pc, #84]	@ (8009188 <TIM_OC4_SetConfig+0xd0>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d109      	bne.n	800914c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800913e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	019b      	lsls	r3, r3, #6
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	4313      	orrs	r3, r2
 800914a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	621a      	str	r2, [r3, #32]
}
 8009166:	bf00      	nop
 8009168:	371c      	adds	r7, #28
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	feff8fff 	.word	0xfeff8fff
 8009178:	40010000 	.word	0x40010000
 800917c:	40010400 	.word	0x40010400
 8009180:	40014000 	.word	0x40014000
 8009184:	40014400 	.word	0x40014400
 8009188:	40014800 	.word	0x40014800

0800918c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800918c:	b480      	push	{r7}
 800918e:	b087      	sub	sp, #28
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a1b      	ldr	r3, [r3, #32]
 800919a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	4b21      	ldr	r3, [pc, #132]	@ (800923c <TIM_OC5_SetConfig+0xb0>)
 80091b8:	4013      	ands	r3, r2
 80091ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80091cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	041b      	lsls	r3, r3, #16
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a18      	ldr	r2, [pc, #96]	@ (8009240 <TIM_OC5_SetConfig+0xb4>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d00f      	beq.n	8009202 <TIM_OC5_SetConfig+0x76>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a17      	ldr	r2, [pc, #92]	@ (8009244 <TIM_OC5_SetConfig+0xb8>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d00b      	beq.n	8009202 <TIM_OC5_SetConfig+0x76>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a16      	ldr	r2, [pc, #88]	@ (8009248 <TIM_OC5_SetConfig+0xbc>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d007      	beq.n	8009202 <TIM_OC5_SetConfig+0x76>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a15      	ldr	r2, [pc, #84]	@ (800924c <TIM_OC5_SetConfig+0xc0>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d003      	beq.n	8009202 <TIM_OC5_SetConfig+0x76>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a14      	ldr	r2, [pc, #80]	@ (8009250 <TIM_OC5_SetConfig+0xc4>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d109      	bne.n	8009216 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009208:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	021b      	lsls	r3, r3, #8
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	4313      	orrs	r3, r2
 8009214:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	621a      	str	r2, [r3, #32]
}
 8009230:	bf00      	nop
 8009232:	371c      	adds	r7, #28
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	fffeff8f 	.word	0xfffeff8f
 8009240:	40010000 	.word	0x40010000
 8009244:	40010400 	.word	0x40010400
 8009248:	40014000 	.word	0x40014000
 800924c:	40014400 	.word	0x40014400
 8009250:	40014800 	.word	0x40014800

08009254 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009254:	b480      	push	{r7}
 8009256:	b087      	sub	sp, #28
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a1b      	ldr	r3, [r3, #32]
 8009268:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800927a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	4b22      	ldr	r3, [pc, #136]	@ (8009308 <TIM_OC6_SetConfig+0xb4>)
 8009280:	4013      	ands	r3, r2
 8009282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	021b      	lsls	r3, r3, #8
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	4313      	orrs	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	051b      	lsls	r3, r3, #20
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a19      	ldr	r2, [pc, #100]	@ (800930c <TIM_OC6_SetConfig+0xb8>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d00f      	beq.n	80092cc <TIM_OC6_SetConfig+0x78>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a18      	ldr	r2, [pc, #96]	@ (8009310 <TIM_OC6_SetConfig+0xbc>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d00b      	beq.n	80092cc <TIM_OC6_SetConfig+0x78>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a17      	ldr	r2, [pc, #92]	@ (8009314 <TIM_OC6_SetConfig+0xc0>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d007      	beq.n	80092cc <TIM_OC6_SetConfig+0x78>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a16      	ldr	r2, [pc, #88]	@ (8009318 <TIM_OC6_SetConfig+0xc4>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d003      	beq.n	80092cc <TIM_OC6_SetConfig+0x78>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a15      	ldr	r2, [pc, #84]	@ (800931c <TIM_OC6_SetConfig+0xc8>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d109      	bne.n	80092e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	029b      	lsls	r3, r3, #10
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	4313      	orrs	r3, r2
 80092de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	697a      	ldr	r2, [r7, #20]
 80092e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	621a      	str	r2, [r3, #32]
}
 80092fa:	bf00      	nop
 80092fc:	371c      	adds	r7, #28
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	feff8fff 	.word	0xfeff8fff
 800930c:	40010000 	.word	0x40010000
 8009310:	40010400 	.word	0x40010400
 8009314:	40014000 	.word	0x40014000
 8009318:	40014400 	.word	0x40014400
 800931c:	40014800 	.word	0x40014800

08009320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009320:	b480      	push	{r7}
 8009322:	b087      	sub	sp, #28
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6a1b      	ldr	r3, [r3, #32]
 8009330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6a1b      	ldr	r3, [r3, #32]
 8009336:	f023 0201 	bic.w	r2, r3, #1
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800934a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	011b      	lsls	r3, r3, #4
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	4313      	orrs	r3, r2
 8009354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f023 030a 	bic.w	r3, r3, #10
 800935c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	4313      	orrs	r3, r2
 8009364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	621a      	str	r2, [r3, #32]
}
 8009372:	bf00      	nop
 8009374:	371c      	adds	r7, #28
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800937e:	b480      	push	{r7}
 8009380:	b087      	sub	sp, #28
 8009382:	af00      	add	r7, sp, #0
 8009384:	60f8      	str	r0, [r7, #12]
 8009386:	60b9      	str	r1, [r7, #8]
 8009388:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6a1b      	ldr	r3, [r3, #32]
 800938e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6a1b      	ldr	r3, [r3, #32]
 8009394:	f023 0210 	bic.w	r2, r3, #16
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80093a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	031b      	lsls	r3, r3, #12
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80093ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	011b      	lsls	r3, r3, #4
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	621a      	str	r2, [r3, #32]
}
 80093d2:	bf00      	nop
 80093d4:	371c      	adds	r7, #28
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
	...

080093e0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	4b09      	ldr	r3, [pc, #36]	@ (8009418 <TIM_ITRx_SetConfig+0x38>)
 80093f4:	4013      	ands	r3, r2
 80093f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	f043 0307 	orr.w	r3, r3, #7
 8009402:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	609a      	str	r2, [r3, #8]
}
 800940a:	bf00      	nop
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	ffcfff8f 	.word	0xffcfff8f

0800941c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800941c:	b480      	push	{r7}
 800941e:	b087      	sub	sp, #28
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
 8009428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009436:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	021a      	lsls	r2, r3, #8
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	431a      	orrs	r2, r3
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	4313      	orrs	r3, r2
 8009444:	697a      	ldr	r2, [r7, #20]
 8009446:	4313      	orrs	r3, r2
 8009448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	697a      	ldr	r2, [r7, #20]
 800944e:	609a      	str	r2, [r3, #8]
}
 8009450:	bf00      	nop
 8009452:	371c      	adds	r7, #28
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800946c:	2b01      	cmp	r3, #1
 800946e:	d101      	bne.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009470:	2302      	movs	r3, #2
 8009472:	e077      	b.n	8009564 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2202      	movs	r2, #2
 8009480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a35      	ldr	r2, [pc, #212]	@ (8009570 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d004      	beq.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a34      	ldr	r2, [pc, #208]	@ (8009574 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d108      	bne.n	80094ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80094ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a25      	ldr	r2, [pc, #148]	@ (8009570 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d02c      	beq.n	8009538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094e6:	d027      	beq.n	8009538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a22      	ldr	r2, [pc, #136]	@ (8009578 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d022      	beq.n	8009538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a21      	ldr	r2, [pc, #132]	@ (800957c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d01d      	beq.n	8009538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a1f      	ldr	r2, [pc, #124]	@ (8009580 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d018      	beq.n	8009538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a1a      	ldr	r2, [pc, #104]	@ (8009574 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d013      	beq.n	8009538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a1b      	ldr	r2, [pc, #108]	@ (8009584 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d00e      	beq.n	8009538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a1a      	ldr	r2, [pc, #104]	@ (8009588 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d009      	beq.n	8009538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a18      	ldr	r2, [pc, #96]	@ (800958c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d004      	beq.n	8009538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a17      	ldr	r2, [pc, #92]	@ (8009590 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d10c      	bne.n	8009552 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800953e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	4313      	orrs	r3, r2
 8009548:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3714      	adds	r7, #20
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	40010000 	.word	0x40010000
 8009574:	40010400 	.word	0x40010400
 8009578:	40000400 	.word	0x40000400
 800957c:	40000800 	.word	0x40000800
 8009580:	40000c00 	.word	0x40000c00
 8009584:	40001800 	.word	0x40001800
 8009588:	40014000 	.word	0x40014000
 800958c:	4000e000 	.word	0x4000e000
 8009590:	4000e400 	.word	0x4000e400

08009594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e042      	b.n	800962c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d106      	bne.n	80095be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f7f8 fd25 	bl	8002008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2224      	movs	r2, #36	@ 0x24
 80095c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f022 0201 	bic.w	r2, r2, #1
 80095d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d002      	beq.n	80095e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fe94 	bl	800a30c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f825 	bl	8009634 <UART_SetConfig>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d101      	bne.n	80095f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e01b      	b.n	800962c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689a      	ldr	r2, [r3, #8]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f042 0201 	orr.w	r2, r2, #1
 8009622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 ff13 	bl	800a450 <UART_CheckIdleState>
 800962a:	4603      	mov	r3, r0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009638:	b092      	sub	sp, #72	@ 0x48
 800963a:	af00      	add	r7, sp, #0
 800963c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	689a      	ldr	r2, [r3, #8]
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	431a      	orrs	r2, r3
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	431a      	orrs	r2, r3
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	69db      	ldr	r3, [r3, #28]
 8009658:	4313      	orrs	r3, r2
 800965a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	4bbe      	ldr	r3, [pc, #760]	@ (800995c <UART_SetConfig+0x328>)
 8009664:	4013      	ands	r3, r2
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	6812      	ldr	r2, [r2, #0]
 800966a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800966c:	430b      	orrs	r3, r1
 800966e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	68da      	ldr	r2, [r3, #12]
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	430a      	orrs	r2, r1
 8009684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4ab3      	ldr	r2, [pc, #716]	@ (8009960 <UART_SetConfig+0x32c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d004      	beq.n	80096a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800969c:	4313      	orrs	r3, r2
 800969e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689a      	ldr	r2, [r3, #8]
 80096a6:	4baf      	ldr	r3, [pc, #700]	@ (8009964 <UART_SetConfig+0x330>)
 80096a8:	4013      	ands	r3, r2
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	6812      	ldr	r2, [r2, #0]
 80096ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80096b0:	430b      	orrs	r3, r1
 80096b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ba:	f023 010f 	bic.w	r1, r3, #15
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	430a      	orrs	r2, r1
 80096c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4aa6      	ldr	r2, [pc, #664]	@ (8009968 <UART_SetConfig+0x334>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d177      	bne.n	80097c4 <UART_SetConfig+0x190>
 80096d4:	4ba5      	ldr	r3, [pc, #660]	@ (800996c <UART_SetConfig+0x338>)
 80096d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096dc:	2b28      	cmp	r3, #40	@ 0x28
 80096de:	d86d      	bhi.n	80097bc <UART_SetConfig+0x188>
 80096e0:	a201      	add	r2, pc, #4	@ (adr r2, 80096e8 <UART_SetConfig+0xb4>)
 80096e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e6:	bf00      	nop
 80096e8:	0800978d 	.word	0x0800978d
 80096ec:	080097bd 	.word	0x080097bd
 80096f0:	080097bd 	.word	0x080097bd
 80096f4:	080097bd 	.word	0x080097bd
 80096f8:	080097bd 	.word	0x080097bd
 80096fc:	080097bd 	.word	0x080097bd
 8009700:	080097bd 	.word	0x080097bd
 8009704:	080097bd 	.word	0x080097bd
 8009708:	08009795 	.word	0x08009795
 800970c:	080097bd 	.word	0x080097bd
 8009710:	080097bd 	.word	0x080097bd
 8009714:	080097bd 	.word	0x080097bd
 8009718:	080097bd 	.word	0x080097bd
 800971c:	080097bd 	.word	0x080097bd
 8009720:	080097bd 	.word	0x080097bd
 8009724:	080097bd 	.word	0x080097bd
 8009728:	0800979d 	.word	0x0800979d
 800972c:	080097bd 	.word	0x080097bd
 8009730:	080097bd 	.word	0x080097bd
 8009734:	080097bd 	.word	0x080097bd
 8009738:	080097bd 	.word	0x080097bd
 800973c:	080097bd 	.word	0x080097bd
 8009740:	080097bd 	.word	0x080097bd
 8009744:	080097bd 	.word	0x080097bd
 8009748:	080097a5 	.word	0x080097a5
 800974c:	080097bd 	.word	0x080097bd
 8009750:	080097bd 	.word	0x080097bd
 8009754:	080097bd 	.word	0x080097bd
 8009758:	080097bd 	.word	0x080097bd
 800975c:	080097bd 	.word	0x080097bd
 8009760:	080097bd 	.word	0x080097bd
 8009764:	080097bd 	.word	0x080097bd
 8009768:	080097ad 	.word	0x080097ad
 800976c:	080097bd 	.word	0x080097bd
 8009770:	080097bd 	.word	0x080097bd
 8009774:	080097bd 	.word	0x080097bd
 8009778:	080097bd 	.word	0x080097bd
 800977c:	080097bd 	.word	0x080097bd
 8009780:	080097bd 	.word	0x080097bd
 8009784:	080097bd 	.word	0x080097bd
 8009788:	080097b5 	.word	0x080097b5
 800978c:	2301      	movs	r3, #1
 800978e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009792:	e326      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009794:	2304      	movs	r3, #4
 8009796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979a:	e322      	b.n	8009de2 <UART_SetConfig+0x7ae>
 800979c:	2308      	movs	r3, #8
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a2:	e31e      	b.n	8009de2 <UART_SetConfig+0x7ae>
 80097a4:	2310      	movs	r3, #16
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097aa:	e31a      	b.n	8009de2 <UART_SetConfig+0x7ae>
 80097ac:	2320      	movs	r3, #32
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b2:	e316      	b.n	8009de2 <UART_SetConfig+0x7ae>
 80097b4:	2340      	movs	r3, #64	@ 0x40
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ba:	e312      	b.n	8009de2 <UART_SetConfig+0x7ae>
 80097bc:	2380      	movs	r3, #128	@ 0x80
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c2:	e30e      	b.n	8009de2 <UART_SetConfig+0x7ae>
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a69      	ldr	r2, [pc, #420]	@ (8009970 <UART_SetConfig+0x33c>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d130      	bne.n	8009830 <UART_SetConfig+0x1fc>
 80097ce:	4b67      	ldr	r3, [pc, #412]	@ (800996c <UART_SetConfig+0x338>)
 80097d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	2b05      	cmp	r3, #5
 80097d8:	d826      	bhi.n	8009828 <UART_SetConfig+0x1f4>
 80097da:	a201      	add	r2, pc, #4	@ (adr r2, 80097e0 <UART_SetConfig+0x1ac>)
 80097dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e0:	080097f9 	.word	0x080097f9
 80097e4:	08009801 	.word	0x08009801
 80097e8:	08009809 	.word	0x08009809
 80097ec:	08009811 	.word	0x08009811
 80097f0:	08009819 	.word	0x08009819
 80097f4:	08009821 	.word	0x08009821
 80097f8:	2300      	movs	r3, #0
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fe:	e2f0      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009800:	2304      	movs	r3, #4
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009806:	e2ec      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009808:	2308      	movs	r3, #8
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980e:	e2e8      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009810:	2310      	movs	r3, #16
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009816:	e2e4      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009818:	2320      	movs	r3, #32
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e2e0      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009820:	2340      	movs	r3, #64	@ 0x40
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e2dc      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009828:	2380      	movs	r3, #128	@ 0x80
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982e:	e2d8      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a4f      	ldr	r2, [pc, #316]	@ (8009974 <UART_SetConfig+0x340>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d130      	bne.n	800989c <UART_SetConfig+0x268>
 800983a:	4b4c      	ldr	r3, [pc, #304]	@ (800996c <UART_SetConfig+0x338>)
 800983c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800983e:	f003 0307 	and.w	r3, r3, #7
 8009842:	2b05      	cmp	r3, #5
 8009844:	d826      	bhi.n	8009894 <UART_SetConfig+0x260>
 8009846:	a201      	add	r2, pc, #4	@ (adr r2, 800984c <UART_SetConfig+0x218>)
 8009848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984c:	08009865 	.word	0x08009865
 8009850:	0800986d 	.word	0x0800986d
 8009854:	08009875 	.word	0x08009875
 8009858:	0800987d 	.word	0x0800987d
 800985c:	08009885 	.word	0x08009885
 8009860:	0800988d 	.word	0x0800988d
 8009864:	2300      	movs	r3, #0
 8009866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986a:	e2ba      	b.n	8009de2 <UART_SetConfig+0x7ae>
 800986c:	2304      	movs	r3, #4
 800986e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009872:	e2b6      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009874:	2308      	movs	r3, #8
 8009876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987a:	e2b2      	b.n	8009de2 <UART_SetConfig+0x7ae>
 800987c:	2310      	movs	r3, #16
 800987e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009882:	e2ae      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009884:	2320      	movs	r3, #32
 8009886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800988a:	e2aa      	b.n	8009de2 <UART_SetConfig+0x7ae>
 800988c:	2340      	movs	r3, #64	@ 0x40
 800988e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009892:	e2a6      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009894:	2380      	movs	r3, #128	@ 0x80
 8009896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800989a:	e2a2      	b.n	8009de2 <UART_SetConfig+0x7ae>
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a35      	ldr	r2, [pc, #212]	@ (8009978 <UART_SetConfig+0x344>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d130      	bne.n	8009908 <UART_SetConfig+0x2d4>
 80098a6:	4b31      	ldr	r3, [pc, #196]	@ (800996c <UART_SetConfig+0x338>)
 80098a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098aa:	f003 0307 	and.w	r3, r3, #7
 80098ae:	2b05      	cmp	r3, #5
 80098b0:	d826      	bhi.n	8009900 <UART_SetConfig+0x2cc>
 80098b2:	a201      	add	r2, pc, #4	@ (adr r2, 80098b8 <UART_SetConfig+0x284>)
 80098b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b8:	080098d1 	.word	0x080098d1
 80098bc:	080098d9 	.word	0x080098d9
 80098c0:	080098e1 	.word	0x080098e1
 80098c4:	080098e9 	.word	0x080098e9
 80098c8:	080098f1 	.word	0x080098f1
 80098cc:	080098f9 	.word	0x080098f9
 80098d0:	2300      	movs	r3, #0
 80098d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d6:	e284      	b.n	8009de2 <UART_SetConfig+0x7ae>
 80098d8:	2304      	movs	r3, #4
 80098da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098de:	e280      	b.n	8009de2 <UART_SetConfig+0x7ae>
 80098e0:	2308      	movs	r3, #8
 80098e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e6:	e27c      	b.n	8009de2 <UART_SetConfig+0x7ae>
 80098e8:	2310      	movs	r3, #16
 80098ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ee:	e278      	b.n	8009de2 <UART_SetConfig+0x7ae>
 80098f0:	2320      	movs	r3, #32
 80098f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098f6:	e274      	b.n	8009de2 <UART_SetConfig+0x7ae>
 80098f8:	2340      	movs	r3, #64	@ 0x40
 80098fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098fe:	e270      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009900:	2380      	movs	r3, #128	@ 0x80
 8009902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009906:	e26c      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a1b      	ldr	r2, [pc, #108]	@ (800997c <UART_SetConfig+0x348>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d142      	bne.n	8009998 <UART_SetConfig+0x364>
 8009912:	4b16      	ldr	r3, [pc, #88]	@ (800996c <UART_SetConfig+0x338>)
 8009914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009916:	f003 0307 	and.w	r3, r3, #7
 800991a:	2b05      	cmp	r3, #5
 800991c:	d838      	bhi.n	8009990 <UART_SetConfig+0x35c>
 800991e:	a201      	add	r2, pc, #4	@ (adr r2, 8009924 <UART_SetConfig+0x2f0>)
 8009920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009924:	0800993d 	.word	0x0800993d
 8009928:	08009945 	.word	0x08009945
 800992c:	0800994d 	.word	0x0800994d
 8009930:	08009955 	.word	0x08009955
 8009934:	08009981 	.word	0x08009981
 8009938:	08009989 	.word	0x08009989
 800993c:	2300      	movs	r3, #0
 800993e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009942:	e24e      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009944:	2304      	movs	r3, #4
 8009946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994a:	e24a      	b.n	8009de2 <UART_SetConfig+0x7ae>
 800994c:	2308      	movs	r3, #8
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009952:	e246      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009954:	2310      	movs	r3, #16
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995a:	e242      	b.n	8009de2 <UART_SetConfig+0x7ae>
 800995c:	cfff69f3 	.word	0xcfff69f3
 8009960:	58000c00 	.word	0x58000c00
 8009964:	11fff4ff 	.word	0x11fff4ff
 8009968:	40011000 	.word	0x40011000
 800996c:	58024400 	.word	0x58024400
 8009970:	40004400 	.word	0x40004400
 8009974:	40004800 	.word	0x40004800
 8009978:	40004c00 	.word	0x40004c00
 800997c:	40005000 	.word	0x40005000
 8009980:	2320      	movs	r3, #32
 8009982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009986:	e22c      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009988:	2340      	movs	r3, #64	@ 0x40
 800998a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998e:	e228      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009990:	2380      	movs	r3, #128	@ 0x80
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009996:	e224      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4ab1      	ldr	r2, [pc, #708]	@ (8009c64 <UART_SetConfig+0x630>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d176      	bne.n	8009a90 <UART_SetConfig+0x45c>
 80099a2:	4bb1      	ldr	r3, [pc, #708]	@ (8009c68 <UART_SetConfig+0x634>)
 80099a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099aa:	2b28      	cmp	r3, #40	@ 0x28
 80099ac:	d86c      	bhi.n	8009a88 <UART_SetConfig+0x454>
 80099ae:	a201      	add	r2, pc, #4	@ (adr r2, 80099b4 <UART_SetConfig+0x380>)
 80099b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b4:	08009a59 	.word	0x08009a59
 80099b8:	08009a89 	.word	0x08009a89
 80099bc:	08009a89 	.word	0x08009a89
 80099c0:	08009a89 	.word	0x08009a89
 80099c4:	08009a89 	.word	0x08009a89
 80099c8:	08009a89 	.word	0x08009a89
 80099cc:	08009a89 	.word	0x08009a89
 80099d0:	08009a89 	.word	0x08009a89
 80099d4:	08009a61 	.word	0x08009a61
 80099d8:	08009a89 	.word	0x08009a89
 80099dc:	08009a89 	.word	0x08009a89
 80099e0:	08009a89 	.word	0x08009a89
 80099e4:	08009a89 	.word	0x08009a89
 80099e8:	08009a89 	.word	0x08009a89
 80099ec:	08009a89 	.word	0x08009a89
 80099f0:	08009a89 	.word	0x08009a89
 80099f4:	08009a69 	.word	0x08009a69
 80099f8:	08009a89 	.word	0x08009a89
 80099fc:	08009a89 	.word	0x08009a89
 8009a00:	08009a89 	.word	0x08009a89
 8009a04:	08009a89 	.word	0x08009a89
 8009a08:	08009a89 	.word	0x08009a89
 8009a0c:	08009a89 	.word	0x08009a89
 8009a10:	08009a89 	.word	0x08009a89
 8009a14:	08009a71 	.word	0x08009a71
 8009a18:	08009a89 	.word	0x08009a89
 8009a1c:	08009a89 	.word	0x08009a89
 8009a20:	08009a89 	.word	0x08009a89
 8009a24:	08009a89 	.word	0x08009a89
 8009a28:	08009a89 	.word	0x08009a89
 8009a2c:	08009a89 	.word	0x08009a89
 8009a30:	08009a89 	.word	0x08009a89
 8009a34:	08009a79 	.word	0x08009a79
 8009a38:	08009a89 	.word	0x08009a89
 8009a3c:	08009a89 	.word	0x08009a89
 8009a40:	08009a89 	.word	0x08009a89
 8009a44:	08009a89 	.word	0x08009a89
 8009a48:	08009a89 	.word	0x08009a89
 8009a4c:	08009a89 	.word	0x08009a89
 8009a50:	08009a89 	.word	0x08009a89
 8009a54:	08009a81 	.word	0x08009a81
 8009a58:	2301      	movs	r3, #1
 8009a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a5e:	e1c0      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009a60:	2304      	movs	r3, #4
 8009a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a66:	e1bc      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009a68:	2308      	movs	r3, #8
 8009a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a6e:	e1b8      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009a70:	2310      	movs	r3, #16
 8009a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a76:	e1b4      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009a78:	2320      	movs	r3, #32
 8009a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a7e:	e1b0      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009a80:	2340      	movs	r3, #64	@ 0x40
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a86:	e1ac      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009a88:	2380      	movs	r3, #128	@ 0x80
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a8e:	e1a8      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a75      	ldr	r2, [pc, #468]	@ (8009c6c <UART_SetConfig+0x638>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d130      	bne.n	8009afc <UART_SetConfig+0x4c8>
 8009a9a:	4b73      	ldr	r3, [pc, #460]	@ (8009c68 <UART_SetConfig+0x634>)
 8009a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a9e:	f003 0307 	and.w	r3, r3, #7
 8009aa2:	2b05      	cmp	r3, #5
 8009aa4:	d826      	bhi.n	8009af4 <UART_SetConfig+0x4c0>
 8009aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8009aac <UART_SetConfig+0x478>)
 8009aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aac:	08009ac5 	.word	0x08009ac5
 8009ab0:	08009acd 	.word	0x08009acd
 8009ab4:	08009ad5 	.word	0x08009ad5
 8009ab8:	08009add 	.word	0x08009add
 8009abc:	08009ae5 	.word	0x08009ae5
 8009ac0:	08009aed 	.word	0x08009aed
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aca:	e18a      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009acc:	2304      	movs	r3, #4
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad2:	e186      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009ad4:	2308      	movs	r3, #8
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ada:	e182      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009adc:	2310      	movs	r3, #16
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ae2:	e17e      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009ae4:	2320      	movs	r3, #32
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aea:	e17a      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009aec:	2340      	movs	r3, #64	@ 0x40
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af2:	e176      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009af4:	2380      	movs	r3, #128	@ 0x80
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afa:	e172      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a5b      	ldr	r2, [pc, #364]	@ (8009c70 <UART_SetConfig+0x63c>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d130      	bne.n	8009b68 <UART_SetConfig+0x534>
 8009b06:	4b58      	ldr	r3, [pc, #352]	@ (8009c68 <UART_SetConfig+0x634>)
 8009b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b0a:	f003 0307 	and.w	r3, r3, #7
 8009b0e:	2b05      	cmp	r3, #5
 8009b10:	d826      	bhi.n	8009b60 <UART_SetConfig+0x52c>
 8009b12:	a201      	add	r2, pc, #4	@ (adr r2, 8009b18 <UART_SetConfig+0x4e4>)
 8009b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b18:	08009b31 	.word	0x08009b31
 8009b1c:	08009b39 	.word	0x08009b39
 8009b20:	08009b41 	.word	0x08009b41
 8009b24:	08009b49 	.word	0x08009b49
 8009b28:	08009b51 	.word	0x08009b51
 8009b2c:	08009b59 	.word	0x08009b59
 8009b30:	2300      	movs	r3, #0
 8009b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b36:	e154      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009b38:	2304      	movs	r3, #4
 8009b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b3e:	e150      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009b40:	2308      	movs	r3, #8
 8009b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b46:	e14c      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009b48:	2310      	movs	r3, #16
 8009b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b4e:	e148      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009b50:	2320      	movs	r3, #32
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b56:	e144      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009b58:	2340      	movs	r3, #64	@ 0x40
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b5e:	e140      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009b60:	2380      	movs	r3, #128	@ 0x80
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b66:	e13c      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a41      	ldr	r2, [pc, #260]	@ (8009c74 <UART_SetConfig+0x640>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	f040 8082 	bne.w	8009c78 <UART_SetConfig+0x644>
 8009b74:	4b3c      	ldr	r3, [pc, #240]	@ (8009c68 <UART_SetConfig+0x634>)
 8009b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b7c:	2b28      	cmp	r3, #40	@ 0x28
 8009b7e:	d86d      	bhi.n	8009c5c <UART_SetConfig+0x628>
 8009b80:	a201      	add	r2, pc, #4	@ (adr r2, 8009b88 <UART_SetConfig+0x554>)
 8009b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b86:	bf00      	nop
 8009b88:	08009c2d 	.word	0x08009c2d
 8009b8c:	08009c5d 	.word	0x08009c5d
 8009b90:	08009c5d 	.word	0x08009c5d
 8009b94:	08009c5d 	.word	0x08009c5d
 8009b98:	08009c5d 	.word	0x08009c5d
 8009b9c:	08009c5d 	.word	0x08009c5d
 8009ba0:	08009c5d 	.word	0x08009c5d
 8009ba4:	08009c5d 	.word	0x08009c5d
 8009ba8:	08009c35 	.word	0x08009c35
 8009bac:	08009c5d 	.word	0x08009c5d
 8009bb0:	08009c5d 	.word	0x08009c5d
 8009bb4:	08009c5d 	.word	0x08009c5d
 8009bb8:	08009c5d 	.word	0x08009c5d
 8009bbc:	08009c5d 	.word	0x08009c5d
 8009bc0:	08009c5d 	.word	0x08009c5d
 8009bc4:	08009c5d 	.word	0x08009c5d
 8009bc8:	08009c3d 	.word	0x08009c3d
 8009bcc:	08009c5d 	.word	0x08009c5d
 8009bd0:	08009c5d 	.word	0x08009c5d
 8009bd4:	08009c5d 	.word	0x08009c5d
 8009bd8:	08009c5d 	.word	0x08009c5d
 8009bdc:	08009c5d 	.word	0x08009c5d
 8009be0:	08009c5d 	.word	0x08009c5d
 8009be4:	08009c5d 	.word	0x08009c5d
 8009be8:	08009c45 	.word	0x08009c45
 8009bec:	08009c5d 	.word	0x08009c5d
 8009bf0:	08009c5d 	.word	0x08009c5d
 8009bf4:	08009c5d 	.word	0x08009c5d
 8009bf8:	08009c5d 	.word	0x08009c5d
 8009bfc:	08009c5d 	.word	0x08009c5d
 8009c00:	08009c5d 	.word	0x08009c5d
 8009c04:	08009c5d 	.word	0x08009c5d
 8009c08:	08009c4d 	.word	0x08009c4d
 8009c0c:	08009c5d 	.word	0x08009c5d
 8009c10:	08009c5d 	.word	0x08009c5d
 8009c14:	08009c5d 	.word	0x08009c5d
 8009c18:	08009c5d 	.word	0x08009c5d
 8009c1c:	08009c5d 	.word	0x08009c5d
 8009c20:	08009c5d 	.word	0x08009c5d
 8009c24:	08009c5d 	.word	0x08009c5d
 8009c28:	08009c55 	.word	0x08009c55
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c32:	e0d6      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009c34:	2304      	movs	r3, #4
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c3a:	e0d2      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009c3c:	2308      	movs	r3, #8
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c42:	e0ce      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009c44:	2310      	movs	r3, #16
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c4a:	e0ca      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009c4c:	2320      	movs	r3, #32
 8009c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c52:	e0c6      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009c54:	2340      	movs	r3, #64	@ 0x40
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c5a:	e0c2      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009c5c:	2380      	movs	r3, #128	@ 0x80
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c62:	e0be      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009c64:	40011400 	.word	0x40011400
 8009c68:	58024400 	.word	0x58024400
 8009c6c:	40007800 	.word	0x40007800
 8009c70:	40007c00 	.word	0x40007c00
 8009c74:	40011800 	.word	0x40011800
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4aad      	ldr	r2, [pc, #692]	@ (8009f34 <UART_SetConfig+0x900>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d176      	bne.n	8009d70 <UART_SetConfig+0x73c>
 8009c82:	4bad      	ldr	r3, [pc, #692]	@ (8009f38 <UART_SetConfig+0x904>)
 8009c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c8a:	2b28      	cmp	r3, #40	@ 0x28
 8009c8c:	d86c      	bhi.n	8009d68 <UART_SetConfig+0x734>
 8009c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c94 <UART_SetConfig+0x660>)
 8009c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c94:	08009d39 	.word	0x08009d39
 8009c98:	08009d69 	.word	0x08009d69
 8009c9c:	08009d69 	.word	0x08009d69
 8009ca0:	08009d69 	.word	0x08009d69
 8009ca4:	08009d69 	.word	0x08009d69
 8009ca8:	08009d69 	.word	0x08009d69
 8009cac:	08009d69 	.word	0x08009d69
 8009cb0:	08009d69 	.word	0x08009d69
 8009cb4:	08009d41 	.word	0x08009d41
 8009cb8:	08009d69 	.word	0x08009d69
 8009cbc:	08009d69 	.word	0x08009d69
 8009cc0:	08009d69 	.word	0x08009d69
 8009cc4:	08009d69 	.word	0x08009d69
 8009cc8:	08009d69 	.word	0x08009d69
 8009ccc:	08009d69 	.word	0x08009d69
 8009cd0:	08009d69 	.word	0x08009d69
 8009cd4:	08009d49 	.word	0x08009d49
 8009cd8:	08009d69 	.word	0x08009d69
 8009cdc:	08009d69 	.word	0x08009d69
 8009ce0:	08009d69 	.word	0x08009d69
 8009ce4:	08009d69 	.word	0x08009d69
 8009ce8:	08009d69 	.word	0x08009d69
 8009cec:	08009d69 	.word	0x08009d69
 8009cf0:	08009d69 	.word	0x08009d69
 8009cf4:	08009d51 	.word	0x08009d51
 8009cf8:	08009d69 	.word	0x08009d69
 8009cfc:	08009d69 	.word	0x08009d69
 8009d00:	08009d69 	.word	0x08009d69
 8009d04:	08009d69 	.word	0x08009d69
 8009d08:	08009d69 	.word	0x08009d69
 8009d0c:	08009d69 	.word	0x08009d69
 8009d10:	08009d69 	.word	0x08009d69
 8009d14:	08009d59 	.word	0x08009d59
 8009d18:	08009d69 	.word	0x08009d69
 8009d1c:	08009d69 	.word	0x08009d69
 8009d20:	08009d69 	.word	0x08009d69
 8009d24:	08009d69 	.word	0x08009d69
 8009d28:	08009d69 	.word	0x08009d69
 8009d2c:	08009d69 	.word	0x08009d69
 8009d30:	08009d69 	.word	0x08009d69
 8009d34:	08009d61 	.word	0x08009d61
 8009d38:	2301      	movs	r3, #1
 8009d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3e:	e050      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009d40:	2304      	movs	r3, #4
 8009d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d46:	e04c      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009d48:	2308      	movs	r3, #8
 8009d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4e:	e048      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009d50:	2310      	movs	r3, #16
 8009d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d56:	e044      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009d58:	2320      	movs	r3, #32
 8009d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5e:	e040      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009d60:	2340      	movs	r3, #64	@ 0x40
 8009d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d66:	e03c      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009d68:	2380      	movs	r3, #128	@ 0x80
 8009d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d6e:	e038      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a71      	ldr	r2, [pc, #452]	@ (8009f3c <UART_SetConfig+0x908>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d130      	bne.n	8009ddc <UART_SetConfig+0x7a8>
 8009d7a:	4b6f      	ldr	r3, [pc, #444]	@ (8009f38 <UART_SetConfig+0x904>)
 8009d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d7e:	f003 0307 	and.w	r3, r3, #7
 8009d82:	2b05      	cmp	r3, #5
 8009d84:	d826      	bhi.n	8009dd4 <UART_SetConfig+0x7a0>
 8009d86:	a201      	add	r2, pc, #4	@ (adr r2, 8009d8c <UART_SetConfig+0x758>)
 8009d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8c:	08009da5 	.word	0x08009da5
 8009d90:	08009dad 	.word	0x08009dad
 8009d94:	08009db5 	.word	0x08009db5
 8009d98:	08009dbd 	.word	0x08009dbd
 8009d9c:	08009dc5 	.word	0x08009dc5
 8009da0:	08009dcd 	.word	0x08009dcd
 8009da4:	2302      	movs	r3, #2
 8009da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009daa:	e01a      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009dac:	2304      	movs	r3, #4
 8009dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009db2:	e016      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009db4:	2308      	movs	r3, #8
 8009db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dba:	e012      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009dbc:	2310      	movs	r3, #16
 8009dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc2:	e00e      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009dc4:	2320      	movs	r3, #32
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dca:	e00a      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009dcc:	2340      	movs	r3, #64	@ 0x40
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd2:	e006      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009dd4:	2380      	movs	r3, #128	@ 0x80
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dda:	e002      	b.n	8009de2 <UART_SetConfig+0x7ae>
 8009ddc:	2380      	movs	r3, #128	@ 0x80
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a55      	ldr	r2, [pc, #340]	@ (8009f3c <UART_SetConfig+0x908>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	f040 80f8 	bne.w	8009fde <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009dee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009df2:	2b20      	cmp	r3, #32
 8009df4:	dc46      	bgt.n	8009e84 <UART_SetConfig+0x850>
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	db75      	blt.n	8009ee6 <UART_SetConfig+0x8b2>
 8009dfa:	3b02      	subs	r3, #2
 8009dfc:	2b1e      	cmp	r3, #30
 8009dfe:	d872      	bhi.n	8009ee6 <UART_SetConfig+0x8b2>
 8009e00:	a201      	add	r2, pc, #4	@ (adr r2, 8009e08 <UART_SetConfig+0x7d4>)
 8009e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e06:	bf00      	nop
 8009e08:	08009e8b 	.word	0x08009e8b
 8009e0c:	08009ee7 	.word	0x08009ee7
 8009e10:	08009e93 	.word	0x08009e93
 8009e14:	08009ee7 	.word	0x08009ee7
 8009e18:	08009ee7 	.word	0x08009ee7
 8009e1c:	08009ee7 	.word	0x08009ee7
 8009e20:	08009ea3 	.word	0x08009ea3
 8009e24:	08009ee7 	.word	0x08009ee7
 8009e28:	08009ee7 	.word	0x08009ee7
 8009e2c:	08009ee7 	.word	0x08009ee7
 8009e30:	08009ee7 	.word	0x08009ee7
 8009e34:	08009ee7 	.word	0x08009ee7
 8009e38:	08009ee7 	.word	0x08009ee7
 8009e3c:	08009ee7 	.word	0x08009ee7
 8009e40:	08009eb3 	.word	0x08009eb3
 8009e44:	08009ee7 	.word	0x08009ee7
 8009e48:	08009ee7 	.word	0x08009ee7
 8009e4c:	08009ee7 	.word	0x08009ee7
 8009e50:	08009ee7 	.word	0x08009ee7
 8009e54:	08009ee7 	.word	0x08009ee7
 8009e58:	08009ee7 	.word	0x08009ee7
 8009e5c:	08009ee7 	.word	0x08009ee7
 8009e60:	08009ee7 	.word	0x08009ee7
 8009e64:	08009ee7 	.word	0x08009ee7
 8009e68:	08009ee7 	.word	0x08009ee7
 8009e6c:	08009ee7 	.word	0x08009ee7
 8009e70:	08009ee7 	.word	0x08009ee7
 8009e74:	08009ee7 	.word	0x08009ee7
 8009e78:	08009ee7 	.word	0x08009ee7
 8009e7c:	08009ee7 	.word	0x08009ee7
 8009e80:	08009ed9 	.word	0x08009ed9
 8009e84:	2b40      	cmp	r3, #64	@ 0x40
 8009e86:	d02a      	beq.n	8009ede <UART_SetConfig+0x8aa>
 8009e88:	e02d      	b.n	8009ee6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009e8a:	f7fd fe9b 	bl	8007bc4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009e8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e90:	e02f      	b.n	8009ef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fd feaa 	bl	8007bf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea0:	e027      	b.n	8009ef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ea2:	f107 0318 	add.w	r3, r7, #24
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fd fff6 	bl	8007e98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eb0:	e01f      	b.n	8009ef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009eb2:	4b21      	ldr	r3, [pc, #132]	@ (8009f38 <UART_SetConfig+0x904>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 0320 	and.w	r3, r3, #32
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d009      	beq.n	8009ed2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8009f38 <UART_SetConfig+0x904>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	08db      	lsrs	r3, r3, #3
 8009ec4:	f003 0303 	and.w	r3, r3, #3
 8009ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8009f40 <UART_SetConfig+0x90c>)
 8009eca:	fa22 f303 	lsr.w	r3, r2, r3
 8009ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ed0:	e00f      	b.n	8009ef2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f40 <UART_SetConfig+0x90c>)
 8009ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ed6:	e00c      	b.n	8009ef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8009f44 <UART_SetConfig+0x910>)
 8009eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009edc:	e009      	b.n	8009ef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ee4:	e005      	b.n	8009ef2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ef0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f000 81ee 	beq.w	800a2d6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009efe:	4a12      	ldr	r2, [pc, #72]	@ (8009f48 <UART_SetConfig+0x914>)
 8009f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f04:	461a      	mov	r2, r3
 8009f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f08:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f0c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	685a      	ldr	r2, [r3, #4]
 8009f12:	4613      	mov	r3, r2
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	4413      	add	r3, r2
 8009f18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d305      	bcc.n	8009f2a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d910      	bls.n	8009f4c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009f30:	e1d1      	b.n	800a2d6 <UART_SetConfig+0xca2>
 8009f32:	bf00      	nop
 8009f34:	40011c00 	.word	0x40011c00
 8009f38:	58024400 	.word	0x58024400
 8009f3c:	58000c00 	.word	0x58000c00
 8009f40:	03d09000 	.word	0x03d09000
 8009f44:	003d0900 	.word	0x003d0900
 8009f48:	0800ae0c 	.word	0x0800ae0c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f4e:	2200      	movs	r2, #0
 8009f50:	60bb      	str	r3, [r7, #8]
 8009f52:	60fa      	str	r2, [r7, #12]
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f58:	4ac0      	ldr	r2, [pc, #768]	@ (800a25c <UART_SetConfig+0xc28>)
 8009f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	2200      	movs	r2, #0
 8009f62:	603b      	str	r3, [r7, #0]
 8009f64:	607a      	str	r2, [r7, #4]
 8009f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009f6e:	f7f6 f9cd 	bl	800030c <__aeabi_uldivmod>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4610      	mov	r0, r2
 8009f78:	4619      	mov	r1, r3
 8009f7a:	f04f 0200 	mov.w	r2, #0
 8009f7e:	f04f 0300 	mov.w	r3, #0
 8009f82:	020b      	lsls	r3, r1, #8
 8009f84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f88:	0202      	lsls	r2, r0, #8
 8009f8a:	6979      	ldr	r1, [r7, #20]
 8009f8c:	6849      	ldr	r1, [r1, #4]
 8009f8e:	0849      	lsrs	r1, r1, #1
 8009f90:	2000      	movs	r0, #0
 8009f92:	460c      	mov	r4, r1
 8009f94:	4605      	mov	r5, r0
 8009f96:	eb12 0804 	adds.w	r8, r2, r4
 8009f9a:	eb43 0905 	adc.w	r9, r3, r5
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	469a      	mov	sl, r3
 8009fa6:	4693      	mov	fp, r2
 8009fa8:	4652      	mov	r2, sl
 8009faa:	465b      	mov	r3, fp
 8009fac:	4640      	mov	r0, r8
 8009fae:	4649      	mov	r1, r9
 8009fb0:	f7f6 f9ac 	bl	800030c <__aeabi_uldivmod>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4613      	mov	r3, r2
 8009fba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fc2:	d308      	bcc.n	8009fd6 <UART_SetConfig+0x9a2>
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fca:	d204      	bcs.n	8009fd6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fd2:	60da      	str	r2, [r3, #12]
 8009fd4:	e17f      	b.n	800a2d6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009fdc:	e17b      	b.n	800a2d6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	69db      	ldr	r3, [r3, #28]
 8009fe2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fe6:	f040 80bd 	bne.w	800a164 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009fea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009fee:	2b20      	cmp	r3, #32
 8009ff0:	dc48      	bgt.n	800a084 <UART_SetConfig+0xa50>
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	db7b      	blt.n	800a0ee <UART_SetConfig+0xaba>
 8009ff6:	2b20      	cmp	r3, #32
 8009ff8:	d879      	bhi.n	800a0ee <UART_SetConfig+0xaba>
 8009ffa:	a201      	add	r2, pc, #4	@ (adr r2, 800a000 <UART_SetConfig+0x9cc>)
 8009ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a000:	0800a08b 	.word	0x0800a08b
 800a004:	0800a093 	.word	0x0800a093
 800a008:	0800a0ef 	.word	0x0800a0ef
 800a00c:	0800a0ef 	.word	0x0800a0ef
 800a010:	0800a09b 	.word	0x0800a09b
 800a014:	0800a0ef 	.word	0x0800a0ef
 800a018:	0800a0ef 	.word	0x0800a0ef
 800a01c:	0800a0ef 	.word	0x0800a0ef
 800a020:	0800a0ab 	.word	0x0800a0ab
 800a024:	0800a0ef 	.word	0x0800a0ef
 800a028:	0800a0ef 	.word	0x0800a0ef
 800a02c:	0800a0ef 	.word	0x0800a0ef
 800a030:	0800a0ef 	.word	0x0800a0ef
 800a034:	0800a0ef 	.word	0x0800a0ef
 800a038:	0800a0ef 	.word	0x0800a0ef
 800a03c:	0800a0ef 	.word	0x0800a0ef
 800a040:	0800a0bb 	.word	0x0800a0bb
 800a044:	0800a0ef 	.word	0x0800a0ef
 800a048:	0800a0ef 	.word	0x0800a0ef
 800a04c:	0800a0ef 	.word	0x0800a0ef
 800a050:	0800a0ef 	.word	0x0800a0ef
 800a054:	0800a0ef 	.word	0x0800a0ef
 800a058:	0800a0ef 	.word	0x0800a0ef
 800a05c:	0800a0ef 	.word	0x0800a0ef
 800a060:	0800a0ef 	.word	0x0800a0ef
 800a064:	0800a0ef 	.word	0x0800a0ef
 800a068:	0800a0ef 	.word	0x0800a0ef
 800a06c:	0800a0ef 	.word	0x0800a0ef
 800a070:	0800a0ef 	.word	0x0800a0ef
 800a074:	0800a0ef 	.word	0x0800a0ef
 800a078:	0800a0ef 	.word	0x0800a0ef
 800a07c:	0800a0ef 	.word	0x0800a0ef
 800a080:	0800a0e1 	.word	0x0800a0e1
 800a084:	2b40      	cmp	r3, #64	@ 0x40
 800a086:	d02e      	beq.n	800a0e6 <UART_SetConfig+0xab2>
 800a088:	e031      	b.n	800a0ee <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a08a:	f7fc fbcf 	bl	800682c <HAL_RCC_GetPCLK1Freq>
 800a08e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a090:	e033      	b.n	800a0fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a092:	f7fc fbe1 	bl	8006858 <HAL_RCC_GetPCLK2Freq>
 800a096:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a098:	e02f      	b.n	800a0fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a09a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fd fda6 	bl	8007bf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0a8:	e027      	b.n	800a0fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0aa:	f107 0318 	add.w	r3, r7, #24
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fd fef2 	bl	8007e98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0b8:	e01f      	b.n	800a0fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0ba:	4b69      	ldr	r3, [pc, #420]	@ (800a260 <UART_SetConfig+0xc2c>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 0320 	and.w	r3, r3, #32
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d009      	beq.n	800a0da <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0c6:	4b66      	ldr	r3, [pc, #408]	@ (800a260 <UART_SetConfig+0xc2c>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	08db      	lsrs	r3, r3, #3
 800a0cc:	f003 0303 	and.w	r3, r3, #3
 800a0d0:	4a64      	ldr	r2, [pc, #400]	@ (800a264 <UART_SetConfig+0xc30>)
 800a0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0d8:	e00f      	b.n	800a0fa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a0da:	4b62      	ldr	r3, [pc, #392]	@ (800a264 <UART_SetConfig+0xc30>)
 800a0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0de:	e00c      	b.n	800a0fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0e0:	4b61      	ldr	r3, [pc, #388]	@ (800a268 <UART_SetConfig+0xc34>)
 800a0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0e4:	e009      	b.n	800a0fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ec:	e005      	b.n	800a0fa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a0f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 80ea 	beq.w	800a2d6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a106:	4a55      	ldr	r2, [pc, #340]	@ (800a25c <UART_SetConfig+0xc28>)
 800a108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a10c:	461a      	mov	r2, r3
 800a10e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a110:	fbb3 f3f2 	udiv	r3, r3, r2
 800a114:	005a      	lsls	r2, r3, #1
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	085b      	lsrs	r3, r3, #1
 800a11c:	441a      	add	r2, r3
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	fbb2 f3f3 	udiv	r3, r2, r3
 800a126:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a12a:	2b0f      	cmp	r3, #15
 800a12c:	d916      	bls.n	800a15c <UART_SetConfig+0xb28>
 800a12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a134:	d212      	bcs.n	800a15c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a138:	b29b      	uxth	r3, r3
 800a13a:	f023 030f 	bic.w	r3, r3, #15
 800a13e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a142:	085b      	lsrs	r3, r3, #1
 800a144:	b29b      	uxth	r3, r3
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a14e:	4313      	orrs	r3, r2
 800a150:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a158:	60da      	str	r2, [r3, #12]
 800a15a:	e0bc      	b.n	800a2d6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a162:	e0b8      	b.n	800a2d6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a164:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a168:	2b20      	cmp	r3, #32
 800a16a:	dc4b      	bgt.n	800a204 <UART_SetConfig+0xbd0>
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f2c0 8087 	blt.w	800a280 <UART_SetConfig+0xc4c>
 800a172:	2b20      	cmp	r3, #32
 800a174:	f200 8084 	bhi.w	800a280 <UART_SetConfig+0xc4c>
 800a178:	a201      	add	r2, pc, #4	@ (adr r2, 800a180 <UART_SetConfig+0xb4c>)
 800a17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17e:	bf00      	nop
 800a180:	0800a20b 	.word	0x0800a20b
 800a184:	0800a213 	.word	0x0800a213
 800a188:	0800a281 	.word	0x0800a281
 800a18c:	0800a281 	.word	0x0800a281
 800a190:	0800a21b 	.word	0x0800a21b
 800a194:	0800a281 	.word	0x0800a281
 800a198:	0800a281 	.word	0x0800a281
 800a19c:	0800a281 	.word	0x0800a281
 800a1a0:	0800a22b 	.word	0x0800a22b
 800a1a4:	0800a281 	.word	0x0800a281
 800a1a8:	0800a281 	.word	0x0800a281
 800a1ac:	0800a281 	.word	0x0800a281
 800a1b0:	0800a281 	.word	0x0800a281
 800a1b4:	0800a281 	.word	0x0800a281
 800a1b8:	0800a281 	.word	0x0800a281
 800a1bc:	0800a281 	.word	0x0800a281
 800a1c0:	0800a23b 	.word	0x0800a23b
 800a1c4:	0800a281 	.word	0x0800a281
 800a1c8:	0800a281 	.word	0x0800a281
 800a1cc:	0800a281 	.word	0x0800a281
 800a1d0:	0800a281 	.word	0x0800a281
 800a1d4:	0800a281 	.word	0x0800a281
 800a1d8:	0800a281 	.word	0x0800a281
 800a1dc:	0800a281 	.word	0x0800a281
 800a1e0:	0800a281 	.word	0x0800a281
 800a1e4:	0800a281 	.word	0x0800a281
 800a1e8:	0800a281 	.word	0x0800a281
 800a1ec:	0800a281 	.word	0x0800a281
 800a1f0:	0800a281 	.word	0x0800a281
 800a1f4:	0800a281 	.word	0x0800a281
 800a1f8:	0800a281 	.word	0x0800a281
 800a1fc:	0800a281 	.word	0x0800a281
 800a200:	0800a273 	.word	0x0800a273
 800a204:	2b40      	cmp	r3, #64	@ 0x40
 800a206:	d037      	beq.n	800a278 <UART_SetConfig+0xc44>
 800a208:	e03a      	b.n	800a280 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a20a:	f7fc fb0f 	bl	800682c <HAL_RCC_GetPCLK1Freq>
 800a20e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a210:	e03c      	b.n	800a28c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a212:	f7fc fb21 	bl	8006858 <HAL_RCC_GetPCLK2Freq>
 800a216:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a218:	e038      	b.n	800a28c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a21a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fd fce6 	bl	8007bf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a228:	e030      	b.n	800a28c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a22a:	f107 0318 	add.w	r3, r7, #24
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fd fe32 	bl	8007e98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a238:	e028      	b.n	800a28c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a23a:	4b09      	ldr	r3, [pc, #36]	@ (800a260 <UART_SetConfig+0xc2c>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 0320 	and.w	r3, r3, #32
 800a242:	2b00      	cmp	r3, #0
 800a244:	d012      	beq.n	800a26c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a246:	4b06      	ldr	r3, [pc, #24]	@ (800a260 <UART_SetConfig+0xc2c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	08db      	lsrs	r3, r3, #3
 800a24c:	f003 0303 	and.w	r3, r3, #3
 800a250:	4a04      	ldr	r2, [pc, #16]	@ (800a264 <UART_SetConfig+0xc30>)
 800a252:	fa22 f303 	lsr.w	r3, r2, r3
 800a256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a258:	e018      	b.n	800a28c <UART_SetConfig+0xc58>
 800a25a:	bf00      	nop
 800a25c:	0800ae0c 	.word	0x0800ae0c
 800a260:	58024400 	.word	0x58024400
 800a264:	03d09000 	.word	0x03d09000
 800a268:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a26c:	4b24      	ldr	r3, [pc, #144]	@ (800a300 <UART_SetConfig+0xccc>)
 800a26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a270:	e00c      	b.n	800a28c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a272:	4b24      	ldr	r3, [pc, #144]	@ (800a304 <UART_SetConfig+0xcd0>)
 800a274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a276:	e009      	b.n	800a28c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a278:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a27e:	e005      	b.n	800a28c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a280:	2300      	movs	r3, #0
 800a282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a28a:	bf00      	nop
    }

    if (pclk != 0U)
 800a28c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d021      	beq.n	800a2d6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a296:	4a1c      	ldr	r2, [pc, #112]	@ (800a308 <UART_SetConfig+0xcd4>)
 800a298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a29c:	461a      	mov	r2, r3
 800a29e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2a0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	085b      	lsrs	r3, r3, #1
 800a2aa:	441a      	add	r2, r3
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b8:	2b0f      	cmp	r3, #15
 800a2ba:	d909      	bls.n	800a2d0 <UART_SetConfig+0xc9c>
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2c2:	d205      	bcs.n	800a2d0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	60da      	str	r2, [r3, #12]
 800a2ce:	e002      	b.n	800a2d6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a2f2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3748      	adds	r7, #72	@ 0x48
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a300:	03d09000 	.word	0x03d09000
 800a304:	003d0900 	.word	0x003d0900
 800a308:	0800ae0c 	.word	0x0800ae0c

0800a30c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a318:	f003 0308 	and.w	r3, r3, #8
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00a      	beq.n	800a336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	430a      	orrs	r2, r1
 800a334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00a      	beq.n	800a358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	430a      	orrs	r2, r1
 800a356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a35c:	f003 0302 	and.w	r3, r3, #2
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00a      	beq.n	800a37a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	430a      	orrs	r2, r1
 800a378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37e:	f003 0304 	and.w	r3, r3, #4
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00a      	beq.n	800a39c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	430a      	orrs	r2, r1
 800a39a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a0:	f003 0310 	and.w	r3, r3, #16
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00a      	beq.n	800a3be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c2:	f003 0320 	and.w	r3, r3, #32
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00a      	beq.n	800a3e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	430a      	orrs	r2, r1
 800a3de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d01a      	beq.n	800a422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	430a      	orrs	r2, r1
 800a400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a406:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a40a:	d10a      	bne.n	800a422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00a      	beq.n	800a444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	430a      	orrs	r2, r1
 800a442:	605a      	str	r2, [r3, #4]
  }
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b098      	sub	sp, #96	@ 0x60
 800a454:	af02      	add	r7, sp, #8
 800a456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a460:	f7f7 fff0 	bl	8002444 <HAL_GetTick>
 800a464:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 0308 	and.w	r3, r3, #8
 800a470:	2b08      	cmp	r3, #8
 800a472:	d12f      	bne.n	800a4d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a474:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a47c:	2200      	movs	r2, #0
 800a47e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f88e 	bl	800a5a4 <UART_WaitOnFlagUntilTimeout>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d022      	beq.n	800a4d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a49c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a49e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4b4:	e841 2300 	strex	r3, r2, [r1]
 800a4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1e6      	bne.n	800a48e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4d0:	2303      	movs	r3, #3
 800a4d2:	e063      	b.n	800a59c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0304 	and.w	r3, r3, #4
 800a4de:	2b04      	cmp	r3, #4
 800a4e0:	d149      	bne.n	800a576 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a4e6:	9300      	str	r3, [sp, #0]
 800a4e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f857 	bl	800a5a4 <UART_WaitOnFlagUntilTimeout>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d03c      	beq.n	800a576 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a504:	e853 3f00 	ldrex	r3, [r3]
 800a508:	623b      	str	r3, [r7, #32]
   return(result);
 800a50a:	6a3b      	ldr	r3, [r7, #32]
 800a50c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a510:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	461a      	mov	r2, r3
 800a518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a51a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a51c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a522:	e841 2300 	strex	r3, r2, [r1]
 800a526:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1e6      	bne.n	800a4fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	3308      	adds	r3, #8
 800a534:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	e853 3f00 	ldrex	r3, [r3]
 800a53c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f023 0301 	bic.w	r3, r3, #1
 800a544:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	3308      	adds	r3, #8
 800a54c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a54e:	61fa      	str	r2, [r7, #28]
 800a550:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a552:	69b9      	ldr	r1, [r7, #24]
 800a554:	69fa      	ldr	r2, [r7, #28]
 800a556:	e841 2300 	strex	r3, r2, [r1]
 800a55a:	617b      	str	r3, [r7, #20]
   return(result);
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1e5      	bne.n	800a52e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2220      	movs	r2, #32
 800a566:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e012      	b.n	800a59c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2220      	movs	r2, #32
 800a57a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2220      	movs	r2, #32
 800a582:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3758      	adds	r7, #88	@ 0x58
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	603b      	str	r3, [r7, #0]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5b4:	e04f      	b.n	800a656 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5bc:	d04b      	beq.n	800a656 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5be:	f7f7 ff41 	bl	8002444 <HAL_GetTick>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	69ba      	ldr	r2, [r7, #24]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d302      	bcc.n	800a5d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d101      	bne.n	800a5d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	e04e      	b.n	800a676 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f003 0304 	and.w	r3, r3, #4
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d037      	beq.n	800a656 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	2b80      	cmp	r3, #128	@ 0x80
 800a5ea:	d034      	beq.n	800a656 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	2b40      	cmp	r3, #64	@ 0x40
 800a5f0:	d031      	beq.n	800a656 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	f003 0308 	and.w	r3, r3, #8
 800a5fc:	2b08      	cmp	r3, #8
 800a5fe:	d110      	bne.n	800a622 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2208      	movs	r2, #8
 800a606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f000 f839 	bl	800a680 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2208      	movs	r2, #8
 800a612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	e029      	b.n	800a676 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	69db      	ldr	r3, [r3, #28]
 800a628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a62c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a630:	d111      	bne.n	800a656 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a63a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	f000 f81f 	bl	800a680 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2220      	movs	r2, #32
 800a646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a652:	2303      	movs	r3, #3
 800a654:	e00f      	b.n	800a676 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	69da      	ldr	r2, [r3, #28]
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	4013      	ands	r3, r2
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	429a      	cmp	r2, r3
 800a664:	bf0c      	ite	eq
 800a666:	2301      	moveq	r3, #1
 800a668:	2300      	movne	r3, #0
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	461a      	mov	r2, r3
 800a66e:	79fb      	ldrb	r3, [r7, #7]
 800a670:	429a      	cmp	r2, r3
 800a672:	d0a0      	beq.n	800a5b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
	...

0800a680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a680:	b480      	push	{r7}
 800a682:	b095      	sub	sp, #84	@ 0x54
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a690:	e853 3f00 	ldrex	r3, [r3]
 800a694:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a69c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6ae:	e841 2300 	strex	r3, r2, [r1]
 800a6b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1e6      	bne.n	800a688 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	3308      	adds	r3, #8
 800a6c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c2:	6a3b      	ldr	r3, [r7, #32]
 800a6c4:	e853 3f00 	ldrex	r3, [r3]
 800a6c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6ca:	69fa      	ldr	r2, [r7, #28]
 800a6cc:	4b1e      	ldr	r3, [pc, #120]	@ (800a748 <UART_EndRxTransfer+0xc8>)
 800a6ce:	4013      	ands	r3, r2
 800a6d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3308      	adds	r3, #8
 800a6d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a6dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6e2:	e841 2300 	strex	r3, r2, [r1]
 800a6e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1e5      	bne.n	800a6ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d118      	bne.n	800a728 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	e853 3f00 	ldrex	r3, [r3]
 800a702:	60bb      	str	r3, [r7, #8]
   return(result);
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f023 0310 	bic.w	r3, r3, #16
 800a70a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	461a      	mov	r2, r3
 800a712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a714:	61bb      	str	r3, [r7, #24]
 800a716:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a718:	6979      	ldr	r1, [r7, #20]
 800a71a:	69ba      	ldr	r2, [r7, #24]
 800a71c:	e841 2300 	strex	r3, r2, [r1]
 800a720:	613b      	str	r3, [r7, #16]
   return(result);
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1e6      	bne.n	800a6f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2220      	movs	r2, #32
 800a72c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a73c:	bf00      	nop
 800a73e:	3754      	adds	r7, #84	@ 0x54
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr
 800a748:	effffffe 	.word	0xeffffffe

0800a74c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d101      	bne.n	800a762 <HAL_UARTEx_DisableFifoMode+0x16>
 800a75e:	2302      	movs	r3, #2
 800a760:	e027      	b.n	800a7b2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2224      	movs	r2, #36	@ 0x24
 800a76e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f022 0201 	bic.w	r2, r2, #1
 800a788:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a790:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2220      	movs	r2, #32
 800a7a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3714      	adds	r7, #20
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b084      	sub	sp, #16
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d101      	bne.n	800a7d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a7d2:	2302      	movs	r3, #2
 800a7d4:	e02d      	b.n	800a832 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2224      	movs	r2, #36	@ 0x24
 800a7e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f022 0201 	bic.w	r2, r2, #1
 800a7fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	683a      	ldr	r2, [r7, #0]
 800a80e:	430a      	orrs	r2, r1
 800a810:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f850 	bl	800a8b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2220      	movs	r2, #32
 800a824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b084      	sub	sp, #16
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d101      	bne.n	800a852 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a84e:	2302      	movs	r3, #2
 800a850:	e02d      	b.n	800a8ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2224      	movs	r2, #36	@ 0x24
 800a85e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f022 0201 	bic.w	r2, r2, #1
 800a878:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	683a      	ldr	r2, [r7, #0]
 800a88a:	430a      	orrs	r2, r1
 800a88c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f812 	bl	800a8b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2220      	movs	r2, #32
 800a8a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
	...

0800a8b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d108      	bne.n	800a8da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a8d8:	e031      	b.n	800a93e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a8da:	2310      	movs	r3, #16
 800a8dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a8de:	2310      	movs	r3, #16
 800a8e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	0e5b      	lsrs	r3, r3, #25
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	f003 0307 	and.w	r3, r3, #7
 800a8f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	0f5b      	lsrs	r3, r3, #29
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	f003 0307 	and.w	r3, r3, #7
 800a900:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a902:	7bbb      	ldrb	r3, [r7, #14]
 800a904:	7b3a      	ldrb	r2, [r7, #12]
 800a906:	4911      	ldr	r1, [pc, #68]	@ (800a94c <UARTEx_SetNbDataToProcess+0x94>)
 800a908:	5c8a      	ldrb	r2, [r1, r2]
 800a90a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a90e:	7b3a      	ldrb	r2, [r7, #12]
 800a910:	490f      	ldr	r1, [pc, #60]	@ (800a950 <UARTEx_SetNbDataToProcess+0x98>)
 800a912:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a914:	fb93 f3f2 	sdiv	r3, r3, r2
 800a918:	b29a      	uxth	r2, r3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a920:	7bfb      	ldrb	r3, [r7, #15]
 800a922:	7b7a      	ldrb	r2, [r7, #13]
 800a924:	4909      	ldr	r1, [pc, #36]	@ (800a94c <UARTEx_SetNbDataToProcess+0x94>)
 800a926:	5c8a      	ldrb	r2, [r1, r2]
 800a928:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a92c:	7b7a      	ldrb	r2, [r7, #13]
 800a92e:	4908      	ldr	r1, [pc, #32]	@ (800a950 <UARTEx_SetNbDataToProcess+0x98>)
 800a930:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a932:	fb93 f3f2 	sdiv	r3, r3, r2
 800a936:	b29a      	uxth	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a93e:	bf00      	nop
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	0800ae24 	.word	0x0800ae24
 800a950:	0800ae2c 	.word	0x0800ae2c

0800a954 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a954:	b084      	sub	sp, #16
 800a956:	b580      	push	{r7, lr}
 800a958:	b084      	sub	sp, #16
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	f107 001c 	add.w	r0, r7, #28
 800a962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a966:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d121      	bne.n	800a9b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a972:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	68da      	ldr	r2, [r3, #12]
 800a97e:	4b2c      	ldr	r3, [pc, #176]	@ (800aa30 <USB_CoreInit+0xdc>)
 800a980:	4013      	ands	r3, r2
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a992:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a996:	2b01      	cmp	r3, #1
 800a998:	d105      	bne.n	800a9a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f911 	bl	800abce <USB_CoreReset>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73fb      	strb	r3, [r7, #15]
 800a9b0:	e01b      	b.n	800a9ea <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f905 	bl	800abce <USB_CoreReset>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a9c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d106      	bne.n	800a9de <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	639a      	str	r2, [r3, #56]	@ 0x38
 800a9dc:	e005      	b.n	800a9ea <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a9ea:	7fbb      	ldrb	r3, [r7, #30]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d116      	bne.n	800aa1e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a9fe:	4b0d      	ldr	r3, [pc, #52]	@ (800aa34 <USB_CoreInit+0xe0>)
 800aa00:	4313      	orrs	r3, r2
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f043 0206 	orr.w	r2, r3, #6
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	f043 0220 	orr.w	r2, r3, #32
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aa1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3710      	adds	r7, #16
 800aa24:	46bd      	mov	sp, r7
 800aa26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa2a:	b004      	add	sp, #16
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	ffbdffbf 	.word	0xffbdffbf
 800aa34:	03ee0000 	.word	0x03ee0000

0800aa38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	f023 0201 	bic.w	r2, r3, #1
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	370c      	adds	r7, #12
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b084      	sub	sp, #16
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
 800aa62:	460b      	mov	r3, r1
 800aa64:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aa66:	2300      	movs	r3, #0
 800aa68:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aa76:	78fb      	ldrb	r3, [r7, #3]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d115      	bne.n	800aaa8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aa88:	200a      	movs	r0, #10
 800aa8a:	f7f7 fce7 	bl	800245c <HAL_Delay>
      ms += 10U;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	330a      	adds	r3, #10
 800aa92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 f88c 	bl	800abb2 <USB_GetMode>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d01e      	beq.n	800aade <USB_SetCurrentMode+0x84>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2bc7      	cmp	r3, #199	@ 0xc7
 800aaa4:	d9f0      	bls.n	800aa88 <USB_SetCurrentMode+0x2e>
 800aaa6:	e01a      	b.n	800aade <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aaa8:	78fb      	ldrb	r3, [r7, #3]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d115      	bne.n	800aada <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aaba:	200a      	movs	r0, #10
 800aabc:	f7f7 fcce 	bl	800245c <HAL_Delay>
      ms += 10U;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	330a      	adds	r3, #10
 800aac4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 f873 	bl	800abb2 <USB_GetMode>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d005      	beq.n	800aade <USB_SetCurrentMode+0x84>
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2bc7      	cmp	r3, #199	@ 0xc7
 800aad6:	d9f0      	bls.n	800aaba <USB_SetCurrentMode+0x60>
 800aad8:	e001      	b.n	800aade <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e005      	b.n	800aaea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2bc8      	cmp	r3, #200	@ 0xc8
 800aae2:	d101      	bne.n	800aae8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	e000      	b.n	800aaea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b085      	sub	sp, #20
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aafc:	2300      	movs	r3, #0
 800aafe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	3301      	adds	r3, #1
 800ab04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab0c:	d901      	bls.n	800ab12 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e01b      	b.n	800ab4a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	daf2      	bge.n	800ab00 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	019b      	lsls	r3, r3, #6
 800ab22:	f043 0220 	orr.w	r2, r3, #32
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab36:	d901      	bls.n	800ab3c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ab38:	2303      	movs	r3, #3
 800ab3a:	e006      	b.n	800ab4a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	f003 0320 	and.w	r3, r3, #32
 800ab44:	2b20      	cmp	r3, #32
 800ab46:	d0f0      	beq.n	800ab2a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3714      	adds	r7, #20
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b085      	sub	sp, #20
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	3301      	adds	r3, #1
 800ab66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab6e:	d901      	bls.n	800ab74 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e018      	b.n	800aba6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	daf2      	bge.n	800ab62 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2210      	movs	r2, #16
 800ab84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab92:	d901      	bls.n	800ab98 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ab94:	2303      	movs	r3, #3
 800ab96:	e006      	b.n	800aba6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	f003 0310 	and.w	r3, r3, #16
 800aba0:	2b10      	cmp	r3, #16
 800aba2:	d0f0      	beq.n	800ab86 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3714      	adds	r7, #20
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800abb2:	b480      	push	{r7}
 800abb4:	b083      	sub	sp, #12
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	695b      	ldr	r3, [r3, #20]
 800abbe:	f003 0301 	and.w	r3, r3, #1
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	370c      	adds	r7, #12
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800abce:	b480      	push	{r7}
 800abd0:	b085      	sub	sp, #20
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abd6:	2300      	movs	r3, #0
 800abd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	3301      	adds	r3, #1
 800abde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abe6:	d901      	bls.n	800abec <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800abe8:	2303      	movs	r3, #3
 800abea:	e01b      	b.n	800ac24 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	daf2      	bge.n	800abda <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800abf4:	2300      	movs	r3, #0
 800abf6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	f043 0201 	orr.w	r2, r3, #1
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	3301      	adds	r3, #1
 800ac08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac10:	d901      	bls.n	800ac16 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ac12:	2303      	movs	r3, #3
 800ac14:	e006      	b.n	800ac24 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d0f0      	beq.n	800ac04 <USB_CoreReset+0x36>

  return HAL_OK;
 800ac22:	2300      	movs	r3, #0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac30:	b084      	sub	sp, #16
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b086      	sub	sp, #24
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
 800ac3a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ac3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac50:	461a      	mov	r2, r3
 800ac52:	2300      	movs	r3, #0
 800ac54:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac5a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac66:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	639a      	str	r2, [r3, #56]	@ 0x38


  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d119      	bne.n	800acae <USB_HostInit+0x7e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ac7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d10a      	bne.n	800ac98 <USB_HostInit+0x68>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68fa      	ldr	r2, [r7, #12]
 800ac8c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac90:	f043 0304 	orr.w	r3, r3, #4
 800ac94:	6013      	str	r3, [r2, #0]
 800ac96:	e014      	b.n	800acc2 <USB_HostInit+0x92>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aca6:	f023 0304 	bic.w	r3, r3, #4
 800acaa:	6013      	str	r3, [r2, #0]
 800acac:	e009      	b.n	800acc2 <USB_HostInit+0x92>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800acbc:	f023 0304 	bic.w	r3, r3, #4
 800acc0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800acc2:	2110      	movs	r1, #16
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f7ff ff14 	bl	800aaf2 <USB_FlushTxFifo>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d001      	beq.n	800acd4 <USB_HostInit+0xa4>
  {
    ret = HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f7ff ff3e 	bl	800ab56 <USB_FlushRxFifo>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d001      	beq.n	800ace4 <USB_HostInit+0xb4>
  {
    ret = HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ace4:	2300      	movs	r3, #0
 800ace6:	613b      	str	r3, [r7, #16]
 800ace8:	e015      	b.n	800ad16 <USB_HostInit+0xe6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	015a      	lsls	r2, r3, #5
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	4413      	add	r3, r2
 800acf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800acf6:	461a      	mov	r2, r3
 800acf8:	f04f 33ff 	mov.w	r3, #4294967295
 800acfc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	015a      	lsls	r2, r3, #5
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	4413      	add	r3, r2
 800ad06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	3301      	adds	r3, #1
 800ad14:	613b      	str	r3, [r7, #16]
 800ad16:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d3e3      	bcc.n	800acea <USB_HostInit+0xba>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad2e:	615a      	str	r2, [r3, #20]
  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x200U;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ad36:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a0f      	ldr	r2, [pc, #60]	@ (800ad78 <USB_HostInit+0x148>)
 800ad3c:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a0e      	ldr	r2, [pc, #56]	@ (800ad7c <USB_HostInit+0x14c>)
 800ad42:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ad46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d105      	bne.n	800ad5a <USB_HostInit+0x12a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	699b      	ldr	r3, [r3, #24]
 800ad52:	f043 0210 	orr.w	r2, r3, #16
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	699a      	ldr	r2, [r3, #24]
 800ad5e:	4b08      	ldr	r3, [pc, #32]	@ (800ad80 <USB_HostInit+0x150>)
 800ad60:	4313      	orrs	r3, r2
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800ad66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad72:	b004      	add	sp, #16
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	01000200 	.word	0x01000200
 800ad7c:	00e00300 	.word	0x00e00300
 800ad80:	a3200008 	.word	0xa3200008

0800ad84 <memset>:
 800ad84:	4402      	add	r2, r0
 800ad86:	4603      	mov	r3, r0
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d100      	bne.n	800ad8e <memset+0xa>
 800ad8c:	4770      	bx	lr
 800ad8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ad92:	e7f9      	b.n	800ad88 <memset+0x4>

0800ad94 <__libc_init_array>:
 800ad94:	b570      	push	{r4, r5, r6, lr}
 800ad96:	4d0d      	ldr	r5, [pc, #52]	@ (800adcc <__libc_init_array+0x38>)
 800ad98:	4c0d      	ldr	r4, [pc, #52]	@ (800add0 <__libc_init_array+0x3c>)
 800ad9a:	1b64      	subs	r4, r4, r5
 800ad9c:	10a4      	asrs	r4, r4, #2
 800ad9e:	2600      	movs	r6, #0
 800ada0:	42a6      	cmp	r6, r4
 800ada2:	d109      	bne.n	800adb8 <__libc_init_array+0x24>
 800ada4:	4d0b      	ldr	r5, [pc, #44]	@ (800add4 <__libc_init_array+0x40>)
 800ada6:	4c0c      	ldr	r4, [pc, #48]	@ (800add8 <__libc_init_array+0x44>)
 800ada8:	f000 f818 	bl	800addc <_init>
 800adac:	1b64      	subs	r4, r4, r5
 800adae:	10a4      	asrs	r4, r4, #2
 800adb0:	2600      	movs	r6, #0
 800adb2:	42a6      	cmp	r6, r4
 800adb4:	d105      	bne.n	800adc2 <__libc_init_array+0x2e>
 800adb6:	bd70      	pop	{r4, r5, r6, pc}
 800adb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800adbc:	4798      	blx	r3
 800adbe:	3601      	adds	r6, #1
 800adc0:	e7ee      	b.n	800ada0 <__libc_init_array+0xc>
 800adc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800adc6:	4798      	blx	r3
 800adc8:	3601      	adds	r6, #1
 800adca:	e7f2      	b.n	800adb2 <__libc_init_array+0x1e>
 800adcc:	0800ae3c 	.word	0x0800ae3c
 800add0:	0800ae3c 	.word	0x0800ae3c
 800add4:	0800ae3c 	.word	0x0800ae3c
 800add8:	0800ae40 	.word	0x0800ae40

0800addc <_init>:
 800addc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adde:	bf00      	nop
 800ade0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ade2:	bc08      	pop	{r3}
 800ade4:	469e      	mov	lr, r3
 800ade6:	4770      	bx	lr

0800ade8 <_fini>:
 800ade8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adea:	bf00      	nop
 800adec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adee:	bc08      	pop	{r3}
 800adf0:	469e      	mov	lr, r3
 800adf2:	4770      	bx	lr
